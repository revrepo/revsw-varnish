From be1241d4ecb0b7ae968f63fe808250c70ff208c5 Mon Sep 17 00:00:00 2001
From: sorinrevsw <sorin@revsw.com>
Date: Mon, 19 Jan 2015 16:52:47 +0200
Subject: [PATCH 33/63] Adding 'querystring' VMOD.

---
 libvmod-querystring-4.0/CHANGELOG                  |  12 +
 libvmod-querystring-4.0/CONTRIBUTORS               |   4 +
 libvmod-querystring-4.0/INSTALL                    |  69 ++
 libvmod-querystring-4.0/LICENSE                    |  30 +
 libvmod-querystring-4.0/Makefile.am                |  54 ++
 libvmod-querystring-4.0/README.rst                 | 184 ++++++
 libvmod-querystring-4.0/autogen.sh                 |  44 ++
 libvmod-querystring-4.0/configure.ac               | 158 +++++
 libvmod-querystring-4.0/src/Makefile.am            |  62 ++
 .../src/tests/clean00_without_querystring_vmod.vtc |  65 ++
 .../src/tests/clean01_clean_in_vcl_hash.vtc        |  66 ++
 .../src/tests/clean02_clean_empty_params.vtc       |  74 +++
 .../src/tests/clean03_clean_all_params.vtc         |  70 ++
 .../tests/filter00_without_querystring_vmod.vtc    |  91 +++
 .../src/tests/filter01_filter_in_vcl_hash.vtc      |  91 +++
 .../src/tests/filter02_filter_empty_parameters.vtc |  66 ++
 .../src/tests/filter03_filter_all_params.vtc       |  66 ++
 .../filter_except00_without_querystring_vmod.vtc   |  64 ++
 .../tests/filter_except01_filter_in_vcl_hash.vtc   |  67 ++
 .../tests/regfilter01_regfilter_in_vcl_hash.vtc    |  88 +++
 .../tests/regfilter02_regfilter_with_bad_regex.vtc |  96 +++
 .../regfilter03_regfilter_empty_parameters.vtc     |  63 ++
 .../src/tests/regfilter04_regfilter_all_params.vtc |  63 ++
 .../src/tests/regfilter05_allow_params.vtc         |  59 ++
 .../regfilter_except01_regfilter_in_vcl_hash.vtc   |  71 +++
 .../tests/remove00_without_querystring_vmod.vtc    |  73 +++
 .../src/tests/remove01_remove_in_vcl_hash.vtc      |  70 ++
 .../src/tests/sort00_without_querystring_vmod.vtc  |  79 +++
 .../src/tests/sort01_sort_in_vcl_hash.vtc          |  80 +++
 .../src/tests/sort02_clean_empty_parameters.vtc    |  66 ++
 libvmod-querystring-4.0/src/vmod_querystring.c     | 703 +++++++++++++++++++++
 libvmod-querystring-4.0/src/vmod_querystring.h     | 123 ++++
 libvmod-querystring-4.0/src/vmod_querystring3.vcc  |  13 +
 libvmod-querystring-4.0/src/vmod_querystring4.vcc  | 151 +++++
 34 files changed, 3135 insertions(+)
 create mode 100644 libvmod-querystring-4.0/CHANGELOG
 create mode 100644 libvmod-querystring-4.0/CONTRIBUTORS
 create mode 100644 libvmod-querystring-4.0/INSTALL
 create mode 100644 libvmod-querystring-4.0/LICENSE
 create mode 100644 libvmod-querystring-4.0/Makefile.am
 create mode 100644 libvmod-querystring-4.0/README.rst
 create mode 100755 libvmod-querystring-4.0/autogen.sh
 create mode 100644 libvmod-querystring-4.0/configure.ac
 create mode 100644 libvmod-querystring-4.0/src/Makefile.am
 create mode 100644 libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
 create mode 100644 libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
 create mode 100644 libvmod-querystring-4.0/src/vmod_querystring.c
 create mode 100644 libvmod-querystring-4.0/src/vmod_querystring.h
 create mode 100644 libvmod-querystring-4.0/src/vmod_querystring3.vcc
 create mode 100644 libvmod-querystring-4.0/src/vmod_querystring4.vcc

diff --git a/libvmod-querystring-4.0/CHANGELOG b/libvmod-querystring-4.0/CHANGELOG
new file mode 100644
index 0000000..fe001c5
--- /dev/null
+++ b/libvmod-querystring-4.0/CHANGELOG
@@ -0,0 +1,12 @@
+libvmod-querystring changelog
+=============================
+
+Changes in version 0.2 (2013-07-23)
+-----------------------------------
+
+* Improved documentation
+* Builds in FreeBSD thanks to Wesley Overdijk (#4)
+* Varnish 3.0.4 support
+* Varnish 4 "trunk" support
+* Conditional logging of functions calls and returns
+* RPM packaging
diff --git a/libvmod-querystring-4.0/CONTRIBUTORS b/libvmod-querystring-4.0/CONTRIBUTORS
new file mode 100644
index 0000000..11916a7
--- /dev/null
+++ b/libvmod-querystring-4.0/CONTRIBUTORS
@@ -0,0 +1,4 @@
+Steven Engelhardt <steven.engelhardt@morningstar.com> (through querysort)
+Lasse Karstensen <lasse@varnish-software.com>
+Wesley Overdijk <r.w.overdijk@gmail.com>
+Tobias Jakobsson <tobias@fotobias.se>
diff --git a/libvmod-querystring-4.0/INSTALL b/libvmod-querystring-4.0/INSTALL
new file mode 100644
index 0000000..f4f183d
--- /dev/null
+++ b/libvmod-querystring-4.0/INSTALL
@@ -0,0 +1,69 @@
+Installation Instructions
+=========================
+
+Varnish
+-------
+
+The source tree is based on autotools to configure the building, and does also
+have the necessary bits in place to do functional unit tests using the
+varnishtest tool.
+
+You need to download Varnish source code and build it locally. It is needed for
+varnishtest invocation. Download the appropriate Varnish 3 source tarball
+(http://repo.varnish-cache.org/source/) and extract it somewhere on your disk
+(eg. /usr/src/).
+
+Build Varnish:
+
+cd /usr/src/varnish-3.0.x/
+./autogen.sh
+./configure
+make
+
+libvmod-querystring
+-------------------
+
+Once you have a Varnish build, the libvmod-querystring module can then be built:
+
+cd /path/to/git/repository
+./autogen.sh
+./configure VARNISHSRC=/usr/src/varnish-3.0.x/ [VMODDIR=`DIR`] [--disable-logging]
+make
+sudo make install
+
+`VARNISHSRC` is the directory of the Varnish source tree for which to
+compile your vmod. Both the `VARNISHSRC` and `VARNISHSRC/include`
+will be added to the include search paths for your module.
+
+Optionally you can also set the vmod install directory by adding
+`VMODDIR=DIR` (defaults to the pkg-config discovered directory from your
+Varnish installation).
+
+It is also possible to disable logging for the module, this is enabled by
+default. The module logs function calls (with arguments) and return values.
+Those logs are very valuable when following the code path of a request in the
+VCL, you could even spot unexpected result (a wrong regex for regfilter ?).
+This might be sensible for production environments since each request would
+add to overall logging load. When in doubt, you can disable it at build time.
+
+Make targets:
+
+* make - builds the vmod
+* make install - installs your vmod in `VMODDIR`
+* make check - runs the tests in `src/tests/*.vtc`
+
+RPM packages
+------------
+
+Instead of a manual installation, you can build RPM packages from the source.
+You need two source tarballs in your rpmbuild `SOURCES` directory. Download the
+appropriate Varnish 3 source tarball (http://repo.varnish-cache.org/source/) and
+put it with the libvmod-querystring tarball in the `SOURCES` directory. Since
+the 0.2 release, it is possible to make the tarball from the git repository:
+
+cd /path/to/git/repository
+./dist.sh 0.2
+mv v0.2.tar.gz /path/to/rpmbuild/SOURCES/
+cp rpm/*.patch /path/to/rpmbuild/SOURCES/
+rpmbuild -bb --define 'VARNISHVER 3.0.x' rpm/varnish-vmod-querystring.spec
+
diff --git a/libvmod-querystring-4.0/LICENSE b/libvmod-querystring-4.0/LICENSE
new file mode 100644
index 0000000..6d5582c
--- /dev/null
+++ b/libvmod-querystring-4.0/LICENSE
@@ -0,0 +1,30 @@
+libvmod-querystring - querystring manipulation module for Varnish
+
+Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+
+1. Redistributions of source code must retain the above
+   copyright notice, this list of conditions and the following
+   disclaimer.
+2. Redistributions in binary form must reproduce the above
+   copyright notice, this list of conditions and the following
+   disclaimer in the documentation and/or other materials
+   provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+OF THE POSSIBILITY OF SUCH DAMAGE.
+
diff --git a/libvmod-querystring-4.0/Makefile.am b/libvmod-querystring-4.0/Makefile.am
new file mode 100644
index 0000000..ed0f641
--- /dev/null
+++ b/libvmod-querystring-4.0/Makefile.am
@@ -0,0 +1,54 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = src
+
+EXTRA_DIST = README.rst
+
+dist_doc_DATA = LICENSE CONTRIBUTORS CHANGELOG
+dist_man_MANS = vmod_querystring.3
+MAINTAINERCLEANFILES = $(dist_man_MANS)
+
+vmod_querystring.3: src/vmod_querystring.man.rst
+
+%.1 %.2 %.3 %.4 %.5 %.6 %.7 %.8 %.9:
+if HAVE_RST2MAN
+	${RST2MAN} $< $@
+else
+	@echo "========================================"
+	@echo "You need rst2man installed to make dist"
+	@echo "========================================"
+	@false
+endif
+
+src-dist:
+	@git archive -o $(PACKAGE)-$(VERSION)-src.tar.gz --prefix=$(PACKAGE)-$(VERSION)/ HEAD
diff --git a/libvmod-querystring-4.0/README.rst b/libvmod-querystring-4.0/README.rst
new file mode 100644
index 0000000..3c874de
--- /dev/null
+++ b/libvmod-querystring-4.0/README.rst
@@ -0,0 +1,184 @@
+.. libvmod-querystring - querystring manipulation module for Varnish
+
+   libvmod-querystring - querystring manipulation module for Varnish
+   
+   Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+   All rights reserved.
+   
+   Redistribution and use in source and binary forms, with or without
+   modification, are permitted provided that the following conditions
+   are met:
+   
+   1. Redistributions of source code must retain the above
+      copyright notice, this list of conditions and the following
+      disclaimer.
+   2. Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials
+      provided with the distribution.
+   
+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+   COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+   OF THE POSSIBILITY OF SUCH DAMAGE.
+
+================
+vmod_querystring
+================
+
+--------------------------
+Varnish QueryString Module
+--------------------------
+
+:Author: Dridi Boukelmoune
+:Date: 2012-06-18
+:Version: 0.2
+:Manual section: 3
+
+SYNOPSIS
+========
+
+import querystring;
+
+DESCRIPTION
+===========
+
+Varnish multipurpose vmod for URI query-string manipulation. Can be used to
+normalize for instance request URLs or Location response headers in various
+ways. It is recommended to at least clean incoming request URLs (removing empty
+parameters or query-strings), all other functions do the cleaning.
+
+FUNCTIONS
+=========
+
+clean
+------
+
+Prototype
+   STRING clean(STRING url)
+Description
+   Returns the given URI without empty parameters. The query-string is removed
+   if empty (either before or after the removal of empty parameters).
+Example
+   .. sourcecode::
+
+      set req.url = querystring.clean(req.url);
+
+remove
+------
+
+Prototype
+   STRING remove(STRING url)
+Description
+   Returns the given URI with its query-string removed
+Example
+   .. sourcecode::
+
+      set req.url = querystring.remove(req.url);
+
+sort
+----
+
+Prototype
+   STRING sort(STRING url)
+Description
+   Returns the given URI with its query-string sorted
+Example
+   .. sourcecode::
+
+      set req.url = querystring.sort(req.url);
+
+filtersep
+---------
+
+Prototype
+   STRING filtersep()
+Description
+   Returns the separator needed by the filter and filter_except functions
+
+filter
+------
+
+Prototype
+   STRING filter(STRING url, STRING_LIST parameter_names)
+Description
+   Returns the given URI without the listed parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter(req.url,
+        "utm_source" + querystring.filtersep() +
+        "utm_medium" + querystring.filtersep() +
+        "utm_campaign");
+
+filter_except
+-------------
+
+Prototype
+   STRING filter_except(STRING url, STRING_LIST parameter_names)
+Description
+   Returns the given URI but only keeps the listed parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter(req.url,
+                                       "q" + querystring.filtersep() + "p");
+
+regfilter
+---------
+
+Prototype
+   STRING regfilter(STRING url, STRING parameter_names_regex)
+Description
+   Returns the given URI without the parameters matching a regular expression
+Example
+   .. sourcecode::
+
+      set req.url = querystring.regfilter(req.url, "utm\_.*");
+
+regfilter_except
+----------------
+
+Prototype
+   STRING regfilter_except(STRING url, STRING parameter_names_regex)
+Description
+   Returns the given URI but only keeps the parameters matching a regular
+   expression
+Example
+   .. sourcecode::
+
+      set req.url = querystring.regfilter_except(req.url, "^(q|p)$");
+
+EXAMPLES
+========
+
+In your VCL you could then use this vmod along the following lines::
+
+   import querystring;
+
+   sub vcl_hash {
+      # sort the URL before the request hashing
+      set req.url = querystring.sort(req.url);
+   }
+
+ACKNOWLEDGMENT
+==============
+
+The sort algorithm is a mix of Jason Mooberry's Skwurly and my own QuerySort
+with regards for the Varnish workspace memory model of the worker threads.
+
+COPYRIGHT
+=========
+
+This document is licensed under the same license as the
+libvmod-querystring project. See LICENSE for details.
+
+* Copyright (c) 2012-2014 Dridi Boukelmoune
diff --git a/libvmod-querystring-4.0/autogen.sh b/libvmod-querystring-4.0/autogen.sh
new file mode 100755
index 0000000..9a12ef5
--- /dev/null
+++ b/libvmod-querystring-4.0/autogen.sh
@@ -0,0 +1,44 @@
+#!/bin/sh
+
+warn() {
+	echo "WARNING: $@" 1>&2
+}
+
+case `uname -s` in
+Darwin)
+	LIBTOOLIZE=glibtoolize
+	;;
+FreeBSD)
+	LIBTOOLIZE=libtoolize
+	;;
+Linux)
+	LIBTOOLIZE=libtoolize
+	;;
+SunOS)
+	LIBTOOLIZE=libtoolize
+	;;
+*)
+	warn "unrecognized platform:" `uname -s`
+	LIBTOOLIZE=libtoolize
+esac
+
+automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
+if [ -z "$automake_version" ] ; then
+	warn "unable to determine automake version"
+else
+	case $automake_version in
+		0.*|1.[0-8]|1.[0-8][.-]*)
+			warn "automake ($automake_version) detected; 1.9 or newer recommended"
+			;;
+		*)
+			;;
+	esac
+fi
+
+set -ex
+
+aclocal -I m4
+$LIBTOOLIZE --copy --force
+autoheader
+automake --add-missing --copy --foreign
+autoconf
diff --git a/libvmod-querystring-4.0/configure.ac b/libvmod-querystring-4.0/configure.ac
new file mode 100644
index 0000000..1a4f396
--- /dev/null
+++ b/libvmod-querystring-4.0/configure.ac
@@ -0,0 +1,158 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+AC_PREREQ(2.59)
+AC_COPYRIGHT([Copyright (c) 2012-2014 Dridi Boukelmoune <dridi.boukelmoune@gmail.com>])
+AC_INIT([libvmod-querystring], [0.2], [https://github.com/dridi/libvmod-querystring/issues])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_SRCDIR(src/vmod_querystring.c)
+AM_CONFIG_HEADER(config.h)
+
+AC_CANONICAL_SYSTEM
+AC_LANG(C)
+
+AM_INIT_AUTOMAKE([foreign])
+
+AC_GNU_SOURCE
+AC_PROG_CC
+AC_PROG_CC_STDC
+if test "x$ac_cv_prog_cc_c99" = xno; then
+	AC_MSG_ERROR([Could not find a C99 compatible compiler])
+fi
+AC_PROG_CPP
+
+AC_PROG_INSTALL
+AC_PROG_LIBTOOL
+AC_PROG_MAKE_SET
+
+# Check for rst utilities
+AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
+if test "x$RST2MAN" = "xno"; then
+	AC_MSG_WARN([rst2man not found - not building man pages])
+fi
+AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
+
+# Check for pkg-config
+PKG_PROG_PKG_CONFIG
+
+# Checks for header files
+AC_HEADER_STDC
+AC_CHECK_HEADERS([sys/stdlib.h])
+
+# Check for functions
+AC_CHECK_FUNCS([mempcpy])
+
+# Check for python
+AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
+
+# Conditional logging
+AC_ARG_ENABLE(
+	[logging],
+	[AS_HELP_STRING(
+		[--disable-logging],
+		[Disable VCL calls and return values logging. @<:@enabled by default@:>@]
+	)],
+	[],
+	[enable_logging=yes]
+)
+
+if test "x$enable_logging" != "xno"; then
+	AC_SUBST([DEFINE_LOGGING], [-DQS_ENABLE_LOGGING])
+fi
+
+# Varnish source tree
+AC_ARG_VAR([VARNISHSRC], [path to Varnish source tree (mandatory)])
+if test "x$VARNISHSRC" = x; then
+	AC_MSG_ERROR([No Varnish source tree specified])
+fi
+
+VARNISHSRC=`cd $VARNISHSRC && pwd`
+Varnish_Version_MAJOR=
+
+# Is it a Varnish 3 or 4 source tree ?
+AC_CHECK_FILE([$VARNISHSRC/lib/libvmod_std/vmod.py], [Varnish_Version_MAJOR=3])
+AC_CHECK_FILE([$VARNISHSRC/lib/libvcc/vmodtool.py],  [Varnish_Version_MAJOR=4])
+
+AC_SUBST([VARNISH_MAJOR], [$Varnish_Version_MAJOR])
+AC_SUBST([DEFINE_MAJOR], [-DVARNISH_MAJOR=$Varnish_Version_MAJOR])
+
+# Can we build a VMOD with VARNISHSRC ?
+AS_CASE(["$Varnish_Version_MAJOR"],
+	[4], [AC_SUBST([VMODTOOL], ['$(VARNISHSRC)/lib/libvcc/vmodtool.py'])],
+	[3], [AC_SUBST([VMODTOOL], ['$(VARNISHSRC)/lib/libvmod_std/vmod.py'])],
+	     [AC_MSG_FAILURE(["$VARNISHSRC" is not a Varnish source directory])]
+)
+
+# Check that varnishtest is built in the varnish source directory
+AC_CHECK_FILE([$VARNISHSRC/bin/varnishtest/varnishtest],
+	[],
+	[AC_MSG_FAILURE([Could not find "$VARNISHSRC/bin/varnishtest/varnishtest". Please build your varnish source directory])]
+)
+
+# Check vanish ABI version
+AC_CHECK_FILE([$VARNISHSRC/include/vmod_abi.h],
+	[
+		AC_MSG_CHECKING([varnish ABI version])
+		[VMOD_ABI_Version=`cut -d ' ' -f 4 "$VARNISHSRC/include/vmod_abi.h"`]
+		AC_MSG_RESULT([$VMOD_ABI_Version])
+	],
+	[
+		[VMOD_ABI_Version=3.0.0]
+		AC_MSG_NOTICE([Could not find "$VARNISHSRC/include/vmod_abi.h". Assuming varnish 3.0.0 ABI version])
+	]
+)
+
+AS_CASE([`cat $VARNISHSRC/include/vmod_abi.h 2>/dev/null`],
+	[*4.0.0*], [AC_SUBST([DEFINE_ABI], [-DHAVE_VARNISH_4_0_0])],
+	[*3.0.6*], [AC_SUBST([DEFINE_ABI], [-DHAVE_VARNISH_3_0_6])],
+	[*3.0.5*], [AC_SUBST([DEFINE_ABI], [-DHAVE_VARNISH_3_0_5])],
+	[*3.0.4*], [AC_SUBST([DEFINE_ABI], [-DHAVE_VARNISH_3_0_4])],
+	[*3.0.3*], [AC_SUBST([DEFINE_ABI], [-DHAVE_VARNISH_3_0_3])],
+	[*3.0.2*], [AC_SUBST([DEFINE_ABI], [-DHAVE_VARNISH_3_0_2])],
+	[*3.0.1*], [AC_SUBST([DEFINE_ABI], [-DHAVE_VARNISH_3_0_1])],
+	           [AC_SUBST([DEFINE_ABI], [-DHAVE_VARNISH_3_0_0])]
+)
+
+# vmod installation dir
+AC_ARG_VAR([VMODDIR], [vmod installation directory @<:@LIBDIR/varnish/vmods@:>@])
+if test "x$VMODDIR" = x; then
+	VMODDIR=`pkg-config --variable=vmoddir varnishapi`
+	if test "x$VMODDIR" = x; then
+		AC_MSG_FAILURE([Could not determine vmod installation directory])
+	fi
+fi
+
+AC_CONFIG_FILES([
+	Makefile
+	src/Makefile
+])
+
+AC_OUTPUT
+
diff --git a/libvmod-querystring-4.0/src/Makefile.am b/libvmod-querystring-4.0/src/Makefile.am
new file mode 100644
index 0000000..5845f09
--- /dev/null
+++ b/libvmod-querystring-4.0/src/Makefile.am
@@ -0,0 +1,62 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+AM_CFLAGS = @DEFINE_MAJOR@ @DEFINE_ABI@ @DEFINE_LOGGING@
+INCLUDES = -I$(VARNISHSRC)/include -I$(VARNISHSRC)/bin/varnishd -I$(VARNISHSRC)
+
+vmoddir = $(VMODDIR)
+vmod_LTLIBRARIES = libvmod_querystring.la
+
+libvmod_querystring_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
+
+libvmod_querystring_la_SOURCES = \
+	vcc_if.c \
+	vcc_if.h \
+	vmod_querystring.c \
+	vmod_querystring.h
+
+vcc_if.c vcc_if.h vmod_querystring.man.rst: *.vcc ../README.rst
+	cp ../README.rst vmod_querystring.man.rst
+	@PYTHON@ @VMODTOOL@ $(top_srcdir)/src/vmod_querystring@VARNISH_MAJOR@.vcc
+
+VMOD_TESTS = tests/*.vtc
+.PHONY: $(VMOD_TESTS)
+
+tests/*.vtc:
+	$(VARNISHSRC)/bin/varnishtest/varnishtest -Dvarnishd=$(VARNISHSRC)/bin/varnishd/varnishd -Dvmod_topbuild=$(abs_top_builddir) $@
+
+check: $(VMOD_TESTS)
+
+EXTRA_DIST = \
+	vmod_querystring.vcc \
+	$(VMOD_TESTS)
+
+CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h
+
diff --git a/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..e556b46
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
@@ -0,0 +1,65 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test clean without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/?"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
diff --git a/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
new file mode 100644
index 0000000..ce6e5d5
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
@@ -0,0 +1,66 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test clean req.sql in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.clean(req.url);
+	}
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 1
+
diff --git a/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc b/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
new file mode 100644
index 0000000..0cbf891
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
@@ -0,0 +1,74 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test clean empty parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/?query"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.clean(req.url);
+	}
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/?query"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&query"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?query&"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&query&"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 3
+
diff --git a/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc b/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
new file mode 100644
index 0000000..7058ee2
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
@@ -0,0 +1,70 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test clean all params (meaning all are empty)"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.clean(req.url);
+	}
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&&"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
+
diff --git a/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..7c6e1c3
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
@@ -0,0 +1,91 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 4
+varnish v1 -expect cache_miss == 4
+varnish v1 -expect cache_hit == 0
+
diff --git a/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
new file mode 100644
index 0000000..f58cfb2
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
@@ -0,0 +1,91 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.filter(req.url,
+			"utm_source" + querystring.filtersep() +
+			"utm_medium" + querystring.filtersep() +
+			"utm_campaign");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 2
+
diff --git a/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc b/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
new file mode 100644
index 0000000..3ce99ad
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
@@ -0,0 +1,66 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter empty parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.filter(req.url,
+			"utm_source" + querystring.filtersep() +
+			"utm_medium" + querystring.filtersep() +
+			"utm_campaign");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr&utm_source=git&&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2&&"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc b/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
new file mode 100644
index 0000000..84eea65
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
@@ -0,0 +1,66 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter all parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.filter(req.url,
+			"utm_source" + querystring.filtersep() +
+			"utm_medium" + querystring.filtersep() +
+			"utm_campaign");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..752ac7c
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
@@ -0,0 +1,64 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+#
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter_except without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/search?q=query&p=1"
+	txresp
+
+	rxreq
+	expect req.url == "/search?q=query&p=1&_=timestamp"
+	txresp
+} -start
+
+varnish v1 -vcl+backend {} -start
+
+client c1 {
+	txreq -url "/search?q=query&p=1"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/search?q=query&p=1&_=timestamp"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
diff --git a/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
new file mode 100644
index 0000000..f7084ec
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
@@ -0,0 +1,67 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+#
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter_except querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/search?q=query&p=1"
+	txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.filter_except(req.url,
+			                  "p" + querystring.filtersep() + "q");
+	}
+} -start
+
+client c1 {
+	txreq -url "/search?q=query&p=1"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/search?q=query&p=1&_=timestamp"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 1
diff --git a/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
new file mode 100644
index 0000000..16622b0
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
@@ -0,0 +1,88 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "utm_.*");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 2
+
diff --git a/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc b/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
new file mode 100644
index 0000000..d9edbd4
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
@@ -0,0 +1,96 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter with bad regex"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "utm(_.*");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 4
+varnish v1 -expect cache_miss == 4
+varnish v1 -expect cache_hit == 0
+
diff --git a/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc b/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
new file mode 100644
index 0000000..1359229
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
@@ -0,0 +1,63 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter empty parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "utm_.*");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr&utm_source=git&&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2&&"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc b/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
new file mode 100644
index 0000000..76a188c
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
@@ -0,0 +1,63 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter all parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "utm_.*");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc b/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
new file mode 100644
index 0000000..4db3480
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
@@ -0,0 +1,59 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter to allow some params only"
+
+server s1 {
+	rxreq
+	expect req.url == "/?authorized=false&allowed=false"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "^(?!authorized|allowed)");
+	}
+} -start
+
+client c1 {
+	txreq -url "/?authorized=false&allowed=false"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?authorized=false&allowed=false&unknown"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
new file mode 100644
index 0000000..e5dc0b6
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
@@ -0,0 +1,71 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+#
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter_except querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/search?q=query&p=1"
+	txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter_except(req.url, "^(p|q)$");
+	}
+} -start
+
+client c1 {
+	txreq -url "/search?q=query&p=1"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/search?q=query&p=1&_=timestamp"
+	rxresp
+	expect resp.status == 200
+
+	# example given in issue #7
+	txreq -url "/search?q=query&p=1&poof"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
diff --git a/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..f427e8c
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
@@ -0,0 +1,73 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test remove without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/?some=noise"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/?noise=again"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?some=noise"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?noise=again"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 3
+varnish v1 -expect cache_miss == 3
+varnish v1 -expect cache_hit == 0
+
diff --git a/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
new file mode 100644
index 0000000..1bc829f
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
@@ -0,0 +1,70 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test remove querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.remove(req.url);
+	}
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?some=noise"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?noise=again"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
+
diff --git a/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..de71196
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
@@ -0,0 +1,79 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test sort without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/?b&a"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/?a&b"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+} -start
+
+client c1 {
+	txreq -url "/?b&a"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?b&a"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/?a&b"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 1
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 1
+
diff --git a/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
new file mode 100644
index 0000000..23bf111
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
@@ -0,0 +1,80 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test sort req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/?a&b"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.sort(req.url);
+	}
+} -start
+
+client c1 {
+	txreq -url "/?b&a"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?b&a"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/?a&b"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 1
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
+
diff --git a/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc b/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
new file mode 100644
index 0000000..4997bd2
--- /dev/null
+++ b/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
@@ -0,0 +1,66 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test sort req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/?a&b"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.sort(req.url);
+	}
+} -start
+
+client c1 {
+	txreq -url "/?b&a&"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&b&a"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?b&&a"
+	rxresp
+	expect resp.status == 200
+}  -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
+
diff --git a/libvmod-querystring-4.0/src/vmod_querystring.c b/libvmod-querystring-4.0/src/vmod_querystring.c
new file mode 100644
index 0000000..53229c2
--- /dev/null
+++ b/libvmod-querystring-4.0/src/vmod_querystring.c
@@ -0,0 +1,703 @@
+/*
+ * libvmod-querystring - querystring manipulation module for Varnish
+ * 
+ * Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 
+ * 1. Redistributions of source code must retain the above
+ *    copyright notice, this list of conditions and the following
+ *    disclaimer.
+ * 2. Redistributions in binary form must reproduce the above
+ *    copyright notice, this list of conditions and the following
+ *    disclaimer in the documentation and/or other materials
+ *    provided with the distribution.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <stdlib.h>
+#include <string.h>
+#include <stdarg.h>
+#include <stdbool.h>
+
+#include "vrt.h"
+#include "vre.h"
+#include "vmod_querystring.h"
+
+#include "vcc_if.h"
+
+/* End Of Query Parameter */
+#define EOQP(c) (*c == '\0' || *c == '&')
+
+/***********************************************************************/
+
+#ifndef HAVE_MEMPCPY
+
+void *mempcpy(void *dst, const void *src, size_t len)
+{
+	return (void*)(((char*)memcpy(dst, src, len)) + len);
+}
+
+#endif
+
+/***********************************************************************
+ * The static functions below contain the actual implementation of the
+ * module with the least possible coupling to Varnish. This helps keep a
+ * single code base for all Varnish versions.
+ */
+
+static const char *
+truncate_querystring(struct ws *ws, const char *uri, const char *query_string)
+{
+	int query_string_position;
+	char *truncated_uri;
+
+	query_string_position = query_string - uri;
+	truncated_uri = WS_Alloc(ws, query_string_position);
+
+	if (truncated_uri == NULL) {
+		return uri;
+	}
+
+	memcpy(truncated_uri, uri, query_string_position);
+	truncated_uri[query_string_position] = '\0';
+
+	return truncated_uri;
+}
+
+static const char *
+remove_querystring(struct ws *ws, const char *uri)
+{
+	if (uri == NULL) {
+		return NULL;
+	}
+
+	char *query_string = strchr(uri, '?');
+	if (query_string == NULL) {
+		return uri;
+	}
+
+	return truncate_querystring(ws, uri, query_string);
+}
+
+static int
+compare_params(const char* a, const char* b)
+{
+	while (*a == *b) {
+		if (EOQP(a) || EOQP(b)) {
+			return 0;
+		}
+		a++;
+		b++;
+	}
+	return *a - *b;
+}
+
+static const char *
+sort_querystring(struct ws *ws, const char *uri)
+{
+	if (uri == NULL) {
+		return NULL;
+	}
+
+	char *query_string = strchr(uri, '?');
+	if (query_string == NULL) {
+		return uri;
+	}
+
+	if (query_string[1] == '\0') {
+		return truncate_querystring(ws, uri, query_string);
+	}
+
+	/* reserve some memory */
+	char *snapshot = WS_Snapshot(ws);
+	char *sorted_uri = WS_Alloc(ws, strlen(uri) + 1);
+
+	WS_Assert(ws);
+
+	if (sorted_uri == NULL) {
+		WS_Reset(ws, snapshot);
+		return uri;
+	}
+
+	unsigned available = WS_Reserve(ws, 0);
+	struct query_param *params = (struct query_param*) ws->f;
+	struct query_param *end = params + available;
+
+	/* initialize the params array */
+	int head = 10;
+
+	if (&params[head + 1] > end) {
+		head = 0;
+	}
+
+	if (&params[head + 1] > end) {
+		WS_Release(ws, 0);
+		WS_Reset(ws, snapshot);
+		return uri;
+	}
+
+	int tail = head;
+	int last_param = head;
+
+	/* search and sort params */
+	bool sorted = true;
+	char *c = query_string + 1;
+	params[head].value = c;
+
+	for (; *c != '\0' && &params[tail+1] < end; c++) {
+		if (*c != '&') {
+			continue;
+		}
+
+		const char *current_param = c+1;
+		params[last_param].length = c - params[last_param].value;
+
+		if (head > 0 && compare_params(params[head].value, current_param) > -1) {
+			sorted = false;
+			params[--head].value = current_param;
+			last_param = head;
+			continue;
+		}
+
+		if (compare_params(params[tail].value, current_param) < 1) {
+			params[++tail].value = current_param;
+			last_param = tail;
+			continue;
+		}
+
+		sorted = false;
+
+		int i = tail++;
+		params[tail] = params[i];
+
+		int previous = i-1;
+		while (i > head && compare_params(params[previous].value, current_param) > -1) {
+			params[i--] = params[previous--];
+		}
+
+		params[i].value = current_param;
+		last_param = i;
+	}
+
+	if (sorted == true || &params[tail+1] >= end || tail - head < 1) {
+		WS_Release(ws, 0);
+		WS_Reset(ws, snapshot);
+		return uri;
+	}
+
+	params[last_param].length = c - params[last_param].value;
+
+	/* copy the url parts */
+	char *position = mempcpy(sorted_uri, uri, query_string - uri + 1);
+	int count = tail-head;
+
+	for (;count > 0; count--, ++head) {
+		if (params[head].length > 0) {
+			position = mempcpy(position, params[head].value, params[head].length);
+			*position++ = '&';
+		}
+	}
+
+	if (params[head].length > 0) {
+		position = mempcpy(position, params[head].value, params[head].length);
+	}
+	else {
+		position--;
+	}
+
+	*position = '\0';
+
+	WS_Release(ws, 0);
+	return sorted_uri;
+}
+
+static void
+append_string(char **begin, const char *end, const char *string, int length)
+{
+	if (*begin + length < end) {
+		memcpy(*begin, string, length);
+	}
+	*begin += length;
+}
+
+static bool
+is_param_cleaned(const char *param, int length, struct filter_context *context)
+{
+	return length == 0;
+}
+
+static bool
+is_param_filtered(const char *param, int length, struct filter_context *context)
+{
+	va_list aq;
+	if (length == 0) {
+		return true;
+	}
+
+	const char *p = context->params.filter.params;
+
+	va_copy(aq, context->params.filter.ap);
+	while (p != vrt_magic_string_end) {
+		if (p != NULL && strlen(p) == length && strncmp(param, p, length) == 0) {
+			return true ^ context->is_kept;
+		}
+		p = va_arg(aq, const char*);
+	}
+	va_end(aq);
+
+	return false ^ context->is_kept;
+}
+
+static bool
+is_param_regfiltered(const char *param, int length, struct filter_context *context)
+{
+	if (length == 0) {
+		return true;
+	}
+
+	char p[length + 1];
+
+	memcpy(p, param, length);
+	p[length] = '\0';
+
+	bool match;
+#ifdef QS_NEED_RE_CTX
+	match = (bool) VRT_re_match(context->params.regfilter.re_ctx, p,
+	                            context->params.regfilter.re);
+#else
+	match = (bool) VRT_re_match(p, context->params.regfilter.re);
+#endif
+	return match ^ context->is_kept;
+}
+
+static void *
+compile_regex(const char *regex)
+{
+	void *re;
+	const char *error;
+	int error_offset;
+
+	re = VRE_compile(regex, 0, &error, &error_offset);
+	return re;
+}
+
+static const char*
+apply_filter(struct filter_context *context)
+{
+	unsigned available = WS_Reserve(context->ws, 0);
+	char *begin = context->ws->f;
+	char *end = &begin[available];
+	const char *cursor = context->query_string;
+
+	append_string(&begin, end, context->uri, cursor - context->uri + 1);
+
+	while (*cursor != '\0' && begin < end) {
+		const char *param_position = ++cursor;
+		const char *equal_position = NULL;
+
+		while (*cursor != '\0' && *cursor != '&') {
+			if (equal_position == NULL && *cursor == '=') {
+				equal_position = cursor;
+			}
+			cursor++;
+		}
+
+		int param_name_length =
+			(equal_position ? equal_position : cursor) - param_position;
+
+		if ( ! context->is_filtered(param_position, param_name_length, context) ) {
+			append_string(&begin, end, param_position, cursor - param_position);
+			if (*cursor == '&') {
+				*begin = '&';
+				begin++;
+			}
+		}
+	}
+
+	if (begin < end) {
+		begin -= (begin[-1] == '&');
+		begin -= (begin[-1] == '?');
+		*begin = '\0';
+	}
+
+	begin++;
+
+	if (begin > end) {
+		WS_Release(context->ws, 0);
+		return context->uri;
+	}
+
+	end = begin;
+	begin = context->ws->f;
+	WS_Release(context->ws, end - begin);
+	return begin;
+}
+
+static const char *
+filter_querystring(struct filter_context *context)
+{
+	const char *uri = context->uri;
+	const char *query_string;
+	const char *filtered_uri;
+
+	if (uri == NULL) {
+		return NULL;
+	}
+
+	query_string = strchr(uri, '?');
+
+	if (query_string == NULL) {
+		return uri;
+	}
+
+	if (query_string[1] == '\0') {
+		return truncate_querystring(context->ws, uri, query_string);
+	}
+
+	if (context->type == regfilter) {
+		void *re = compile_regex(context->params.regfilter.regex);
+		if (re == NULL) {
+			return uri;
+		}
+		context->params.regfilter.re = re;
+	}
+
+	context->query_string = query_string;
+	filtered_uri = apply_filter(context);
+
+	if (context->type == regfilter) {
+		VRT_re_fini(context->params.regfilter.re);
+	}
+
+	return filtered_uri;
+}
+
+/***********************************************************************
+ * Below are the functions that will actually be linked by Varnish.
+ */
+
+#if VARNISH_MAJOR == 3
+
+const char *
+vmod_clean(struct sess *sp, const char *uri)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\"", uri);
+
+	context.type = clean;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.is_filtered = &is_param_cleaned;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_remove(struct sess *sp, const char *uri)
+{
+	const char *cleaned_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\"", uri);
+
+	cleaned_uri = remove_querystring(sp->ws, uri);
+
+	QS_LOG_RETURN(sp, cleaned_uri);
+	return cleaned_uri;
+}
+
+const char *
+vmod_sort(struct sess *sp, const char *uri)
+{
+	const char *sorted_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\"", uri);
+
+	sorted_uri = sort_querystring(sp->ws, uri);
+
+	QS_LOG_RETURN(sp, sorted_uri);
+	return sorted_uri;
+}
+
+const char *
+vmod_filtersep(struct sess *sp)
+{
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	return NULL;
+}
+
+const char *
+vmod_filter(struct sess *sp, const char *uri, const char *params, ...)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered;
+	context.is_kept = false;
+
+	va_start(context.params.filter.ap, params);
+	filtered_uri = filter_querystring(&context);
+	va_end(context.params.filter.ap);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_filter_except(struct sess *sp, const char *uri, const char *params, ...)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered;
+	context.is_kept = true;
+
+	va_start(context.params.filter.ap, params);
+	filtered_uri = filter_querystring(&context);
+	va_end(context.params.filter.ap);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_regfilter(struct sess *sp, const char *uri, const char *regex)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, regex);
+
+	context.type = regfilter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.regfilter.regex = regex;
+	context.params.regfilter.re_ctx = sp;
+	context.is_filtered = &is_param_regfiltered;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_regfilter_except(struct sess *sp, const char *uri, const char *regex)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, regex);
+
+	context.type = regfilter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.regfilter.regex = regex;
+	context.params.regfilter.re_ctx = sp;
+	context.is_filtered = &is_param_regfiltered;
+	context.is_kept = true;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+#endif
+
+/***********************************************************************/
+
+#if VARNISH_MAJOR == 4
+
+const char *
+vmod_clean(const struct vrt_ctx *ctx, const char *uri)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\"", uri);
+
+	context.type = clean;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.is_filtered = &is_param_cleaned;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_remove(const struct vrt_ctx *ctx, const char *uri)
+{
+	const char *cleaned_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\"", uri);
+
+	cleaned_uri = remove_querystring(ctx->ws, uri);
+
+	QS_LOG_RETURN(ctx, cleaned_uri);
+	return cleaned_uri;
+}
+
+const char *
+vmod_sort(const struct vrt_ctx *ctx, const char *uri)
+{
+	const char *sorted_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\"", uri);
+
+	sorted_uri = sort_querystring(ctx->ws, uri);
+
+	QS_LOG_RETURN(ctx, sorted_uri);
+	return sorted_uri;
+}
+
+const char *
+vmod_filtersep(const struct vrt_ctx *ctx)
+{
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	return NULL;
+}
+
+const char *
+vmod_filter(const struct vrt_ctx *ctx, const char *uri, const char *params, ...)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered;
+	context.is_kept = false;
+
+	va_start(context.params.filter.ap, params);
+	filtered_uri = filter_querystring(&context);
+	va_end(context.params.filter.ap);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_filter_except(const struct vrt_ctx *ctx, const char *uri, const char *params, ...)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered;
+	context.is_kept = true;
+
+	va_start(context.params.filter.ap, params);
+	filtered_uri = filter_querystring(&context);
+	va_end(context.params.filter.ap);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_regfilter(const struct vrt_ctx *ctx, const char *uri, const char *regex)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\"", uri, regex);
+
+	context.type = regfilter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.regfilter.regex = regex;
+	context.params.regfilter.re_ctx = ctx;
+	context.is_filtered = &is_param_regfiltered;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_regfilter_except(const struct vrt_ctx *ctx, const char *uri, const char *regex)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\"", uri, regex);
+
+	context.type = regfilter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.regfilter.regex = regex;
+	context.params.regfilter.re_ctx = ctx;
+	context.is_filtered = &is_param_regfiltered;
+	context.is_kept = true;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+#endif
diff --git a/libvmod-querystring-4.0/src/vmod_querystring.h b/libvmod-querystring-4.0/src/vmod_querystring.h
new file mode 100644
index 0000000..4010bc6
--- /dev/null
+++ b/libvmod-querystring-4.0/src/vmod_querystring.h
@@ -0,0 +1,123 @@
+/*
+ * libvmod-querystring - querystring manipulation module for Varnish
+ * 
+ * Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 
+ * 1. Redistributions of source code must retain the above
+ *    copyright notice, this list of conditions and the following
+ *    disclaimer.
+ * 2. Redistributions in binary form must reproduce the above
+ *    copyright notice, this list of conditions and the following
+ *    disclaimer in the documentation and/or other materials
+ *    provided with the distribution.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *
+ * This file manages API changes in order to cross-compile against
+ * different versions of Varnish:
+ *
+ * * Varnish 4.0.0
+ * - cache.h has been moved
+ * - provides vrt_ctx instead of sess
+ *
+ * * Varnish 3.0.3
+ * - VRT_re_match needs a sess pointer
+ */
+
+#if VARNISH_MAJOR == 3
+
+#include "cache.h"
+
+#if defined HAVE_VARNISH_3_0_3 || defined HAVE_VARNISH_3_0_4 \
+ || defined HAVE_VARNISH_3_0_5 || defined HAVE_VARNISH_3_0_6
+#define QS_NEED_RE_CTX
+#endif
+
+#define QS_LOG_CALL(sp, pattern, ...) \
+	WSP(sp, SLT_VCL_call, "%s(" pattern ")", __func__, __VA_ARGS__);
+
+#define QS_LOG_RETURN(sp, value) WSP(sp, SLT_VCL_return, "\"%s\"", value);
+
+typedef struct sess re_ctx;
+
+#endif // VARNISH_MAJOR == 3
+
+/* ------------------------------------------------------------------- */
+
+#if VARNISH_MAJOR == 4
+
+#include "cache/cache.h"
+
+#define QS_NEED_RE_CTX
+
+#define QS_LOG_CALL(ctx, pattern, ...) \
+	VSLb(ctx->vsl, SLT_VCL_call, "%s(" pattern ")", __func__, __VA_ARGS__);
+
+#define QS_LOG_RETURN(ctx, value) VSLb(ctx->vsl, SLT_VCL_return, "\"%s\"", value);
+
+typedef const struct vrt_ctx re_ctx;
+
+#endif // VARNISH_MAJOR == 4
+
+/* ------------------------------------------------------------------- */
+
+#ifndef QS_ENABLE_LOGGING
+
+#undef QS_LOG_CALL
+#undef QS_LOG_RETURN
+
+#define QS_LOG_CALL
+#define QS_LOG_RETURN
+
+#endif
+
+/* ------------------------------------------------------------------- */
+
+struct query_param {
+	const char *value;
+	short length;
+};
+
+enum filter_type {clean, filter, regfilter};
+
+struct filter_params {
+	const char *params;
+	va_list    ap;
+};
+
+struct regfilter_params {
+	const char *regex;
+	void       *re;
+	re_ctx     *re_ctx;
+};
+
+struct filter_context {
+	enum filter_type type;
+	struct ws        *ws;
+	const char       *uri;
+	const char       *query_string;
+	union {
+		struct filter_params    filter;
+		struct regfilter_params regfilter;
+	} params;
+	bool (*is_filtered) (const char*, int, struct filter_context*);
+	bool   is_kept;
+};
+
diff --git a/libvmod-querystring-4.0/src/vmod_querystring3.vcc b/libvmod-querystring-4.0/src/vmod_querystring3.vcc
new file mode 100644
index 0000000..4c5932c
--- /dev/null
+++ b/libvmod-querystring-4.0/src/vmod_querystring3.vcc
@@ -0,0 +1,13 @@
+Module querystring
+
+Function STRING clean(STRING)
+Function STRING remove(STRING)
+
+Function STRING sort(STRING)
+
+Function STRING filtersep()
+Function STRING filter(STRING, STRING_LIST)
+Function STRING filter_except(STRING, STRING_LIST)
+
+Function STRING regfilter(STRING, STRING)
+Function STRING regfilter_except(STRING, STRING)
diff --git a/libvmod-querystring-4.0/src/vmod_querystring4.vcc b/libvmod-querystring-4.0/src/vmod_querystring4.vcc
new file mode 100644
index 0000000..0bee914
--- /dev/null
+++ b/libvmod-querystring-4.0/src/vmod_querystring4.vcc
@@ -0,0 +1,151 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+$Module querystring Varnish QueryString Module
+
+DESCRIPTION
+===========
+
+Varnish multipurpose vmod for URI query-string manipulation. Can be used to
+normalize for instance request URLs or Location response headers in various
+ways. It is recommended to at least clean incoming request URLs (removing empty
+parameters or query-strings), all other functions do the cleaning.
+
+
+$Function STRING clean(STRING)
+
+Description
+   Returns the given URI without empty parameters. The query-string is removed
+   if empty (either before or after the removal of empty parameters).
+Example
+   .. sourcecode::
+
+      set req.url = querystring.clean(req.url);
+
+
+$Function STRING remove(STRING)
+
+Description
+   Returns the given URI with its query-string removed
+Example
+   .. sourcecode::
+
+      set req.url = querystring.remove(req.url);
+
+
+$Function STRING sort(STRING)
+
+Description
+   Returns the given URI with its query-string sorted
+Example
+   .. sourcecode::
+
+      set req.url = querystring.sort(req.url);
+
+
+$Function STRING filtersep()
+
+Description
+   Returns the separator needed by the filter and filter_except functions
+
+
+$Function STRING filter(STRING, STRING_LIST)
+
+Description
+   Returns the given URI without the listed parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter(req.url,
+        "utm_source" + querystring.filtersep() +
+        "utm_medium" + querystring.filtersep() +
+        "utm_campaign");
+
+
+$Function STRING filter_except(STRING, STRING_LIST)
+
+Description
+   Returns the given URI but only keeps the listed parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter(req.url,
+                                       "q" + querystring.filtersep() + "p");
+
+$Function STRING regfilter(STRING, STRING)
+
+Description
+   Returns the given URI without the parameters matching a regular expression
+Example
+   .. sourcecode::
+
+      set req.url = querystring.regfilter(req.url, "utm\_.*");
+
+
+$Function STRING regfilter_except(STRING, STRING)
+
+Description
+   Returns the given URI but only keeps the parameters matching a regular
+   expression
+Example
+   .. sourcecode::
+
+      set req.url = querystring.regfilter_except(req.url, "^(q|p)$");
+
+
+EXAMPLES
+========
+
+In your VCL you could then use this vmod along the following lines::
+
+   import querystring;
+
+   sub vcl_hash {
+      # sort the URL before the request hashing
+      set req.url = querystring.sort(req.url);
+   }
+
+You can use regfilter to specify a list of arguments that must not be removed
+(everything else will be) with a negative look-ahead expression::
+
+   set req.url = querystring.regfilter(req.url, "^(?!param1|param2)");
+
+
+ACKNOWLEDGMENT
+==============
+
+The sort algorithm is a mix of Jason Mooberry's Skwurly and my own QuerySort
+with regards for the Varnish workspace memory model of the worker threads.
+
+
+SEE ALSO
+========
+
+vcl(7) varnishd(1)
-- 
2.7.4

