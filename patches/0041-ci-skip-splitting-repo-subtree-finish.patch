From d991e3d08f6a9253bc3a96224c5c957333df7468 Mon Sep 17 00:00:00 2001
From: Igor <igor@pbne.mygbiz.com>
Date: Thu, 29 Oct 2015 19:38:35 +0100
Subject: [PATCH 41/63] [ci skip] splitting repo: subtree: finish

---
 debian/changelog                                   | 138 ----
 debian/compat                                      |   1 -
 debian/control                                     |  25 -
 debian/copyright                                   |  29 -
 debian/dirs                                        |   1 -
 debian/revsw-varnish4-modules.postinst             |   8 -
 debian/rules                                       |  57 --
 libvmod-chromelogger-4.0/.gitignore                |  29 -
 libvmod-chromelogger-4.0/COPYING                   |   7 -
 libvmod-chromelogger-4.0/LICENSE                   |  20 -
 libvmod-chromelogger-4.0/Makefile.am               |  18 -
 libvmod-chromelogger-4.0/README.rst                | 123 ----
 libvmod-chromelogger-4.0/autogen.sh                |  44 --
 libvmod-chromelogger-4.0/configure.ac              |  60 --
 libvmod-chromelogger-4.0/src/Makefile.am           |  37 -
 libvmod-chromelogger-4.0/src/tests/test01.vtc      |  26 -
 libvmod-chromelogger-4.0/src/vmod_chromelogger.c   | 323 --------
 libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc |   5 -
 libvmod-cookie-4.0/.gitignore                      |  31 -
 libvmod-cookie-4.0/.travis.yml                     |  23 -
 libvmod-cookie-4.0/COPYING                         |   7 -
 libvmod-cookie-4.0/LICENSE                         |  20 -
 libvmod-cookie-4.0/Makefile.am                     |  22 -
 libvmod-cookie-4.0/README.rst                      | 275 -------
 libvmod-cookie-4.0/autogen.sh                      |  44 --
 libvmod-cookie-4.0/configure.ac                    |  54 --
 libvmod-cookie-4.0/debian/changelog                |   5 -
 libvmod-cookie-4.0/debian/compat                   |   1 -
 libvmod-cookie-4.0/debian/control                  |  12 -
 libvmod-cookie-4.0/debian/copyright                |  29 -
 libvmod-cookie-4.0/debian/dirs                     |   1 -
 libvmod-cookie-4.0/debian/docs                     |   3 -
 libvmod-cookie-4.0/debian/rules                    |  18 -
 libvmod-cookie-4.0/src/Makefile.am                 |  29 -
 .../src/tests/01-set-delete-produce.vtc            |  30 -
 libvmod-cookie-4.0/src/tests/02-clean.vtc          |  33 -
 libvmod-cookie-4.0/src/tests/03-null.vtc           |  36 -
 libvmod-cookie-4.0/src/tests/04-filter.vtc         |  29 -
 libvmod-cookie-4.0/src/tests/05-get.vtc            |  29 -
 .../src/tests/06-concurrent-query.vtc              |  49 --
 libvmod-cookie-4.0/src/tests/07-isset.vtc          |  27 -
 libvmod-cookie-4.0/src/tests/08-overflow.vtc       |  36 -
 libvmod-cookie-4.0/src/tests/10-parser.vtc         |  47 --
 libvmod-cookie-4.0/src/tests/30-format_1123.vtc    |  22 -
 libvmod-cookie-4.0/src/vmod_cookie.c               | 342 ---------
 libvmod-cookie-4.0/src/vmod_cookie.vcc             |  12 -
 libvmod-cookie-4.0/vmod-cookie.spec                |  46 --
 libvmod-header-4.0/.gitignore                      |  34 -
 libvmod-header-4.0/LICENSE                         |  23 -
 libvmod-header-4.0/Makefile.am                     |  21 -
 libvmod-header-4.0/README.rst                      | 176 -----
 libvmod-header-4.0/autogen.sh                      |  44 --
 libvmod-header-4.0/configure.ac                    | 119 ---
 libvmod-header-4.0/debian/changelog                |   5 -
 libvmod-header-4.0/debian/compat                   |   1 -
 libvmod-header-4.0/debian/control                  |  17 -
 libvmod-header-4.0/debian/copyright                |  29 -
 libvmod-header-4.0/debian/dirs                     |   1 -
 libvmod-header-4.0/debian/docs                     |   2 -
 libvmod-header-4.0/debian/rules                    |  12 -
 libvmod-header-4.0/m4/PLACEHOLDER                  |   0
 libvmod-header-4.0/m4/varnish.m4                   | 100 ---
 libvmod-header-4.0/src/Makefile.am                 |  30 -
 libvmod-header-4.0/src/tests/append.vtc            |  40 -
 libvmod-header-4.0/src/tests/copy.vtc              |  45 --
 libvmod-header-4.0/src/tests/get.vtc               |  40 -
 libvmod-header-4.0/src/tests/import.vtc            |  20 -
 libvmod-header-4.0/src/tests/keep-others.vtc       |  48 --
 libvmod-header-4.0/src/tests/remove.vtc            |  96 ---
 libvmod-header-4.0/src/tests/some-data.vtc         |  51 --
 libvmod-header-4.0/src/tests/version.vtc           |  29 -
 libvmod-header-4.0/src/vmod_header.c               | 303 --------
 libvmod-header-4.0/src/vmod_header.vcc             |   7 -
 libvmod-header-4.0/vmod-header.spec                |  43 --
 libvmod-querystring-4.0/CHANGELOG                  |  12 -
 libvmod-querystring-4.0/CONTRIBUTORS               |   4 -
 libvmod-querystring-4.0/INSTALL                    |  69 --
 libvmod-querystring-4.0/LICENSE                    |  30 -
 libvmod-querystring-4.0/Makefile.am                |  54 --
 libvmod-querystring-4.0/README.rst                 | 184 -----
 libvmod-querystring-4.0/autogen.sh                 |  44 --
 libvmod-querystring-4.0/configure.ac               | 112 ---
 libvmod-querystring-4.0/src/Makefile.am            |  61 --
 .../src/tests/clean00_without_querystring_vmod.vtc |  65 --
 .../src/tests/clean01_clean_in_vcl_hash.vtc        |  66 --
 .../src/tests/clean02_clean_empty_params.vtc       |  74 --
 .../src/tests/clean03_clean_all_params.vtc         |  70 --
 .../tests/filter00_without_querystring_vmod.vtc    |  91 ---
 .../src/tests/filter01_filter_in_vcl_hash.vtc      |  91 ---
 .../src/tests/filter02_filter_empty_parameters.vtc |  66 --
 .../src/tests/filter03_filter_all_params.vtc       |  66 --
 .../filter_except00_without_querystring_vmod.vtc   |  64 --
 .../tests/filter_except01_filter_in_vcl_hash.vtc   |  67 --
 .../tests/regfilter01_regfilter_in_vcl_hash.vtc    |  88 ---
 .../tests/regfilter02_regfilter_with_bad_regex.vtc |  96 ---
 .../regfilter03_regfilter_empty_parameters.vtc     |  63 --
 .../src/tests/regfilter04_regfilter_all_params.vtc |  63 --
 .../src/tests/regfilter05_allow_params.vtc         |  59 --
 .../regfilter_except01_regfilter_in_vcl_hash.vtc   |  71 --
 .../tests/remove00_without_querystring_vmod.vtc    |  73 --
 .../src/tests/remove01_remove_in_vcl_hash.vtc      |  70 --
 .../src/tests/sort00_without_querystring_vmod.vtc  |  79 --
 .../src/tests/sort01_sort_in_vcl_hash.vtc          |  80 --
 .../src/tests/sort02_clean_empty_parameters.vtc    |  66 --
 libvmod-querystring-4.0/src/vmod_querystring.c     | 812 ---------------------
 libvmod-querystring-4.0/src/vmod_querystring.h     | 123 ----
 libvmod-querystring-4.0/src/vmod_querystring3.vcc  |  15 -
 libvmod-querystring-4.0/src/vmod_querystring4.vcc  | 171 -----
 libvmod-revvar-4.0/.gitignore                      |  29 -
 libvmod-revvar-4.0/LICENSE                         |  23 -
 libvmod-revvar-4.0/Makefile.am                     |   8 -
 libvmod-revvar-4.0/README                          |  34 -
 libvmod-revvar-4.0/autogen.sh                      |  44 --
 libvmod-revvar-4.0/configure.ac                    |  56 --
 libvmod-revvar-4.0/man/Makefile.am                 |  15 -
 libvmod-revvar-4.0/man/vmod_var.rst                |  91 ---
 libvmod-revvar-4.0/src/Makefile.am                 |  28 -
 libvmod-revvar-4.0/src/tests/test01.vtc            |  39 -
 libvmod-revvar-4.0/src/tests/test02.vtc            |  28 -
 libvmod-revvar-4.0/src/tests/test03.vtc            |  41 --
 libvmod-revvar-4.0/src/vmod_revvar.c               | 285 --------
 libvmod-revvar-4.0/src/vmod_revvar.vcc             |  24 -
 libvmod-timers-4.0/.gitignore                      |  29 -
 libvmod-timers-4.0/COPYING                         |   7 -
 libvmod-timers-4.0/LICENSE                         |  20 -
 libvmod-timers-4.0/Makefile.am                     |  18 -
 libvmod-timers-4.0/README.rst                      | 237 ------
 libvmod-timers-4.0/autogen.sh                      |  44 --
 libvmod-timers-4.0/configure.ac                    |  60 --
 libvmod-timers-4.0/src/Makefile.am                 |  28 -
 libvmod-timers-4.0/src/tests/test01.vtc            | 113 ---
 libvmod-timers-4.0/src/vmod_timers.c               | 243 ------
 libvmod-timers-4.0/src/vmod_timers.vcc             |  14 -
 varnish4-vmods/debian/changelog                    | 138 ++++
 varnish4-vmods/debian/compat                       |   1 +
 varnish4-vmods/debian/control                      |  25 +
 varnish4-vmods/debian/copyright                    |  29 +
 varnish4-vmods/debian/dirs                         |   1 +
 .../debian/revsw-varnish4-modules.postinst         |   8 +
 varnish4-vmods/debian/rules                        |  57 ++
 varnish4-vmods/libvmod-chromelogger-4.0/.gitignore |  29 +
 varnish4-vmods/libvmod-chromelogger-4.0/COPYING    |   7 +
 varnish4-vmods/libvmod-chromelogger-4.0/LICENSE    |  20 +
 .../libvmod-chromelogger-4.0/Makefile.am           |  18 +
 varnish4-vmods/libvmod-chromelogger-4.0/README.rst | 123 ++++
 varnish4-vmods/libvmod-chromelogger-4.0/autogen.sh |  44 ++
 .../libvmod-chromelogger-4.0/configure.ac          |  60 ++
 .../libvmod-chromelogger-4.0/src/Makefile.am       |  37 +
 .../libvmod-chromelogger-4.0/src/tests/test01.vtc  |  26 +
 .../src/vmod_chromelogger.c                        | 323 ++++++++
 .../src/vmod_chromelogger.vcc                      |   5 +
 varnish4-vmods/libvmod-cookie-4.0/.gitignore       |  31 +
 varnish4-vmods/libvmod-cookie-4.0/.travis.yml      |  23 +
 varnish4-vmods/libvmod-cookie-4.0/COPYING          |   7 +
 varnish4-vmods/libvmod-cookie-4.0/LICENSE          |  20 +
 varnish4-vmods/libvmod-cookie-4.0/Makefile.am      |  22 +
 varnish4-vmods/libvmod-cookie-4.0/README.rst       | 275 +++++++
 varnish4-vmods/libvmod-cookie-4.0/autogen.sh       |  44 ++
 varnish4-vmods/libvmod-cookie-4.0/configure.ac     |  54 ++
 varnish4-vmods/libvmod-cookie-4.0/debian/changelog |   5 +
 varnish4-vmods/libvmod-cookie-4.0/debian/compat    |   1 +
 varnish4-vmods/libvmod-cookie-4.0/debian/control   |  12 +
 varnish4-vmods/libvmod-cookie-4.0/debian/copyright |  29 +
 varnish4-vmods/libvmod-cookie-4.0/debian/dirs      |   1 +
 varnish4-vmods/libvmod-cookie-4.0/debian/docs      |   3 +
 varnish4-vmods/libvmod-cookie-4.0/debian/rules     |  18 +
 varnish4-vmods/libvmod-cookie-4.0/src/Makefile.am  |  29 +
 .../src/tests/01-set-delete-produce.vtc            |  30 +
 .../libvmod-cookie-4.0/src/tests/02-clean.vtc      |  33 +
 .../libvmod-cookie-4.0/src/tests/03-null.vtc       |  36 +
 .../libvmod-cookie-4.0/src/tests/04-filter.vtc     |  29 +
 .../libvmod-cookie-4.0/src/tests/05-get.vtc        |  29 +
 .../src/tests/06-concurrent-query.vtc              |  49 ++
 .../libvmod-cookie-4.0/src/tests/07-isset.vtc      |  27 +
 .../libvmod-cookie-4.0/src/tests/08-overflow.vtc   |  36 +
 .../libvmod-cookie-4.0/src/tests/10-parser.vtc     |  47 ++
 .../src/tests/30-format_1123.vtc                   |  22 +
 .../libvmod-cookie-4.0/src/vmod_cookie.c           | 342 +++++++++
 .../libvmod-cookie-4.0/src/vmod_cookie.vcc         |  12 +
 varnish4-vmods/libvmod-cookie-4.0/vmod-cookie.spec |  46 ++
 varnish4-vmods/libvmod-header-4.0/.gitignore       |  34 +
 varnish4-vmods/libvmod-header-4.0/LICENSE          |  23 +
 varnish4-vmods/libvmod-header-4.0/Makefile.am      |  21 +
 varnish4-vmods/libvmod-header-4.0/README.rst       | 176 +++++
 varnish4-vmods/libvmod-header-4.0/autogen.sh       |  44 ++
 varnish4-vmods/libvmod-header-4.0/configure.ac     | 119 +++
 varnish4-vmods/libvmod-header-4.0/debian/changelog |   5 +
 varnish4-vmods/libvmod-header-4.0/debian/compat    |   1 +
 varnish4-vmods/libvmod-header-4.0/debian/control   |  17 +
 varnish4-vmods/libvmod-header-4.0/debian/copyright |  29 +
 varnish4-vmods/libvmod-header-4.0/debian/dirs      |   1 +
 varnish4-vmods/libvmod-header-4.0/debian/docs      |   2 +
 varnish4-vmods/libvmod-header-4.0/debian/rules     |  12 +
 varnish4-vmods/libvmod-header-4.0/m4/PLACEHOLDER   |   0
 varnish4-vmods/libvmod-header-4.0/m4/varnish.m4    | 100 +++
 varnish4-vmods/libvmod-header-4.0/src/Makefile.am  |  30 +
 .../libvmod-header-4.0/src/tests/append.vtc        |  40 +
 .../libvmod-header-4.0/src/tests/copy.vtc          |  45 ++
 .../libvmod-header-4.0/src/tests/get.vtc           |  40 +
 .../libvmod-header-4.0/src/tests/import.vtc        |  20 +
 .../libvmod-header-4.0/src/tests/keep-others.vtc   |  48 ++
 .../libvmod-header-4.0/src/tests/remove.vtc        |  96 +++
 .../libvmod-header-4.0/src/tests/some-data.vtc     |  51 ++
 .../libvmod-header-4.0/src/tests/version.vtc       |  29 +
 .../libvmod-header-4.0/src/vmod_header.c           | 303 ++++++++
 .../libvmod-header-4.0/src/vmod_header.vcc         |   7 +
 varnish4-vmods/libvmod-header-4.0/vmod-header.spec |  43 ++
 varnish4-vmods/libvmod-querystring-4.0/CHANGELOG   |  12 +
 .../libvmod-querystring-4.0/CONTRIBUTORS           |   4 +
 varnish4-vmods/libvmod-querystring-4.0/INSTALL     |  69 ++
 varnish4-vmods/libvmod-querystring-4.0/LICENSE     |  30 +
 varnish4-vmods/libvmod-querystring-4.0/Makefile.am |  54 ++
 varnish4-vmods/libvmod-querystring-4.0/README.rst  | 184 +++++
 varnish4-vmods/libvmod-querystring-4.0/autogen.sh  |  44 ++
 .../libvmod-querystring-4.0/configure.ac           | 112 +++
 .../libvmod-querystring-4.0/src/Makefile.am        |  61 ++
 .../src/tests/clean00_without_querystring_vmod.vtc |  65 ++
 .../src/tests/clean01_clean_in_vcl_hash.vtc        |  66 ++
 .../src/tests/clean02_clean_empty_params.vtc       |  74 ++
 .../src/tests/clean03_clean_all_params.vtc         |  70 ++
 .../tests/filter00_without_querystring_vmod.vtc    |  91 +++
 .../src/tests/filter01_filter_in_vcl_hash.vtc      |  91 +++
 .../src/tests/filter02_filter_empty_parameters.vtc |  66 ++
 .../src/tests/filter03_filter_all_params.vtc       |  66 ++
 .../filter_except00_without_querystring_vmod.vtc   |  64 ++
 .../tests/filter_except01_filter_in_vcl_hash.vtc   |  67 ++
 .../tests/regfilter01_regfilter_in_vcl_hash.vtc    |  88 +++
 .../tests/regfilter02_regfilter_with_bad_regex.vtc |  96 +++
 .../regfilter03_regfilter_empty_parameters.vtc     |  63 ++
 .../src/tests/regfilter04_regfilter_all_params.vtc |  63 ++
 .../src/tests/regfilter05_allow_params.vtc         |  59 ++
 .../regfilter_except01_regfilter_in_vcl_hash.vtc   |  71 ++
 .../tests/remove00_without_querystring_vmod.vtc    |  73 ++
 .../src/tests/remove01_remove_in_vcl_hash.vtc      |  70 ++
 .../src/tests/sort00_without_querystring_vmod.vtc  |  79 ++
 .../src/tests/sort01_sort_in_vcl_hash.vtc          |  80 ++
 .../src/tests/sort02_clean_empty_parameters.vtc    |  66 ++
 .../libvmod-querystring-4.0/src/vmod_querystring.c | 812 +++++++++++++++++++++
 .../libvmod-querystring-4.0/src/vmod_querystring.h | 123 ++++
 .../src/vmod_querystring3.vcc                      |  15 +
 .../src/vmod_querystring4.vcc                      | 171 +++++
 varnish4-vmods/libvmod-revvar-4.0/.gitignore       |  29 +
 varnish4-vmods/libvmod-revvar-4.0/LICENSE          |  23 +
 varnish4-vmods/libvmod-revvar-4.0/Makefile.am      |   8 +
 varnish4-vmods/libvmod-revvar-4.0/README           |  34 +
 varnish4-vmods/libvmod-revvar-4.0/autogen.sh       |  44 ++
 varnish4-vmods/libvmod-revvar-4.0/configure.ac     |  56 ++
 varnish4-vmods/libvmod-revvar-4.0/man/Makefile.am  |  15 +
 varnish4-vmods/libvmod-revvar-4.0/man/vmod_var.rst |  91 +++
 varnish4-vmods/libvmod-revvar-4.0/src/Makefile.am  |  28 +
 .../libvmod-revvar-4.0/src/tests/test01.vtc        |  39 +
 .../libvmod-revvar-4.0/src/tests/test02.vtc        |  28 +
 .../libvmod-revvar-4.0/src/tests/test03.vtc        |  41 ++
 .../libvmod-revvar-4.0/src/vmod_revvar.c           | 285 ++++++++
 .../libvmod-revvar-4.0/src/vmod_revvar.vcc         |  24 +
 varnish4-vmods/libvmod-timers-4.0/.gitignore       |  29 +
 varnish4-vmods/libvmod-timers-4.0/COPYING          |   7 +
 varnish4-vmods/libvmod-timers-4.0/LICENSE          |  20 +
 varnish4-vmods/libvmod-timers-4.0/Makefile.am      |  18 +
 varnish4-vmods/libvmod-timers-4.0/README.rst       | 237 ++++++
 varnish4-vmods/libvmod-timers-4.0/autogen.sh       |  44 ++
 varnish4-vmods/libvmod-timers-4.0/configure.ac     |  60 ++
 varnish4-vmods/libvmod-timers-4.0/src/Makefile.am  |  28 +
 .../libvmod-timers-4.0/src/tests/test01.vtc        | 113 +++
 .../libvmod-timers-4.0/src/vmod_timers.c           | 243 ++++++
 .../libvmod-timers-4.0/src/vmod_timers.vcc         |  14 +
 266 files changed, 8376 insertions(+), 8376 deletions(-)
 delete mode 100644 debian/changelog
 delete mode 100644 debian/compat
 delete mode 100644 debian/control
 delete mode 100644 debian/copyright
 delete mode 100644 debian/dirs
 delete mode 100644 debian/revsw-varnish4-modules.postinst
 delete mode 100755 debian/rules
 delete mode 100644 libvmod-chromelogger-4.0/.gitignore
 delete mode 100644 libvmod-chromelogger-4.0/COPYING
 delete mode 100644 libvmod-chromelogger-4.0/LICENSE
 delete mode 100644 libvmod-chromelogger-4.0/Makefile.am
 delete mode 100644 libvmod-chromelogger-4.0/README.rst
 delete mode 100755 libvmod-chromelogger-4.0/autogen.sh
 delete mode 100644 libvmod-chromelogger-4.0/configure.ac
 delete mode 100644 libvmod-chromelogger-4.0/src/Makefile.am
 delete mode 100644 libvmod-chromelogger-4.0/src/tests/test01.vtc
 delete mode 100644 libvmod-chromelogger-4.0/src/vmod_chromelogger.c
 delete mode 100644 libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc
 delete mode 100644 libvmod-cookie-4.0/.gitignore
 delete mode 100644 libvmod-cookie-4.0/.travis.yml
 delete mode 100644 libvmod-cookie-4.0/COPYING
 delete mode 100644 libvmod-cookie-4.0/LICENSE
 delete mode 100644 libvmod-cookie-4.0/Makefile.am
 delete mode 100644 libvmod-cookie-4.0/README.rst
 delete mode 100755 libvmod-cookie-4.0/autogen.sh
 delete mode 100644 libvmod-cookie-4.0/configure.ac
 delete mode 100644 libvmod-cookie-4.0/debian/changelog
 delete mode 100644 libvmod-cookie-4.0/debian/compat
 delete mode 100644 libvmod-cookie-4.0/debian/control
 delete mode 100644 libvmod-cookie-4.0/debian/copyright
 delete mode 100644 libvmod-cookie-4.0/debian/dirs
 delete mode 100644 libvmod-cookie-4.0/debian/docs
 delete mode 100755 libvmod-cookie-4.0/debian/rules
 delete mode 100644 libvmod-cookie-4.0/src/Makefile.am
 delete mode 100644 libvmod-cookie-4.0/src/tests/01-set-delete-produce.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/02-clean.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/03-null.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/04-filter.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/05-get.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/06-concurrent-query.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/07-isset.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/08-overflow.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/10-parser.vtc
 delete mode 100644 libvmod-cookie-4.0/src/tests/30-format_1123.vtc
 delete mode 100644 libvmod-cookie-4.0/src/vmod_cookie.c
 delete mode 100644 libvmod-cookie-4.0/src/vmod_cookie.vcc
 delete mode 100644 libvmod-cookie-4.0/vmod-cookie.spec
 delete mode 100644 libvmod-header-4.0/.gitignore
 delete mode 100644 libvmod-header-4.0/LICENSE
 delete mode 100644 libvmod-header-4.0/Makefile.am
 delete mode 100644 libvmod-header-4.0/README.rst
 delete mode 100755 libvmod-header-4.0/autogen.sh
 delete mode 100644 libvmod-header-4.0/configure.ac
 delete mode 100644 libvmod-header-4.0/debian/changelog
 delete mode 100644 libvmod-header-4.0/debian/compat
 delete mode 100644 libvmod-header-4.0/debian/control
 delete mode 100644 libvmod-header-4.0/debian/copyright
 delete mode 100644 libvmod-header-4.0/debian/dirs
 delete mode 100644 libvmod-header-4.0/debian/docs
 delete mode 100755 libvmod-header-4.0/debian/rules
 delete mode 100644 libvmod-header-4.0/m4/PLACEHOLDER
 delete mode 100644 libvmod-header-4.0/m4/varnish.m4
 delete mode 100644 libvmod-header-4.0/src/Makefile.am
 delete mode 100644 libvmod-header-4.0/src/tests/append.vtc
 delete mode 100644 libvmod-header-4.0/src/tests/copy.vtc
 delete mode 100644 libvmod-header-4.0/src/tests/get.vtc
 delete mode 100644 libvmod-header-4.0/src/tests/import.vtc
 delete mode 100644 libvmod-header-4.0/src/tests/keep-others.vtc
 delete mode 100644 libvmod-header-4.0/src/tests/remove.vtc
 delete mode 100644 libvmod-header-4.0/src/tests/some-data.vtc
 delete mode 100644 libvmod-header-4.0/src/tests/version.vtc
 delete mode 100644 libvmod-header-4.0/src/vmod_header.c
 delete mode 100644 libvmod-header-4.0/src/vmod_header.vcc
 delete mode 100644 libvmod-header-4.0/vmod-header.spec
 delete mode 100644 libvmod-querystring-4.0/CHANGELOG
 delete mode 100644 libvmod-querystring-4.0/CONTRIBUTORS
 delete mode 100644 libvmod-querystring-4.0/INSTALL
 delete mode 100644 libvmod-querystring-4.0/LICENSE
 delete mode 100644 libvmod-querystring-4.0/Makefile.am
 delete mode 100644 libvmod-querystring-4.0/README.rst
 delete mode 100755 libvmod-querystring-4.0/autogen.sh
 delete mode 100644 libvmod-querystring-4.0/configure.ac
 delete mode 100644 libvmod-querystring-4.0/src/Makefile.am
 delete mode 100644 libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
 delete mode 100644 libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
 delete mode 100644 libvmod-querystring-4.0/src/vmod_querystring.c
 delete mode 100644 libvmod-querystring-4.0/src/vmod_querystring.h
 delete mode 100644 libvmod-querystring-4.0/src/vmod_querystring3.vcc
 delete mode 100644 libvmod-querystring-4.0/src/vmod_querystring4.vcc
 delete mode 100644 libvmod-revvar-4.0/.gitignore
 delete mode 100644 libvmod-revvar-4.0/LICENSE
 delete mode 100644 libvmod-revvar-4.0/Makefile.am
 delete mode 100644 libvmod-revvar-4.0/README
 delete mode 100755 libvmod-revvar-4.0/autogen.sh
 delete mode 100644 libvmod-revvar-4.0/configure.ac
 delete mode 100644 libvmod-revvar-4.0/man/Makefile.am
 delete mode 100644 libvmod-revvar-4.0/man/vmod_var.rst
 delete mode 100644 libvmod-revvar-4.0/src/Makefile.am
 delete mode 100644 libvmod-revvar-4.0/src/tests/test01.vtc
 delete mode 100644 libvmod-revvar-4.0/src/tests/test02.vtc
 delete mode 100644 libvmod-revvar-4.0/src/tests/test03.vtc
 delete mode 100644 libvmod-revvar-4.0/src/vmod_revvar.c
 delete mode 100644 libvmod-revvar-4.0/src/vmod_revvar.vcc
 delete mode 100644 libvmod-timers-4.0/.gitignore
 delete mode 100644 libvmod-timers-4.0/COPYING
 delete mode 100644 libvmod-timers-4.0/LICENSE
 delete mode 100644 libvmod-timers-4.0/Makefile.am
 delete mode 100644 libvmod-timers-4.0/README.rst
 delete mode 100755 libvmod-timers-4.0/autogen.sh
 delete mode 100644 libvmod-timers-4.0/configure.ac
 delete mode 100644 libvmod-timers-4.0/src/Makefile.am
 delete mode 100644 libvmod-timers-4.0/src/tests/test01.vtc
 delete mode 100644 libvmod-timers-4.0/src/vmod_timers.c
 delete mode 100644 libvmod-timers-4.0/src/vmod_timers.vcc
 create mode 100644 varnish4-vmods/debian/changelog
 create mode 100644 varnish4-vmods/debian/compat
 create mode 100644 varnish4-vmods/debian/control
 create mode 100644 varnish4-vmods/debian/copyright
 create mode 100644 varnish4-vmods/debian/dirs
 create mode 100644 varnish4-vmods/debian/revsw-varnish4-modules.postinst
 create mode 100755 varnish4-vmods/debian/rules
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/.gitignore
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/COPYING
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/LICENSE
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/README.rst
 create mode 100755 varnish4-vmods/libvmod-chromelogger-4.0/autogen.sh
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/configure.ac
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/src/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/src/tests/test01.vtc
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/src/vmod_chromelogger.c
 create mode 100644 varnish4-vmods/libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/.gitignore
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/.travis.yml
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/COPYING
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/LICENSE
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/README.rst
 create mode 100755 varnish4-vmods/libvmod-cookie-4.0/autogen.sh
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/configure.ac
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/debian/changelog
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/debian/compat
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/debian/control
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/debian/copyright
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/debian/dirs
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/debian/docs
 create mode 100755 varnish4-vmods/libvmod-cookie-4.0/debian/rules
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/01-set-delete-produce.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/02-clean.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/03-null.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/04-filter.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/05-get.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/06-concurrent-query.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/07-isset.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/08-overflow.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/10-parser.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/tests/30-format_1123.vtc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/vmod_cookie.c
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/src/vmod_cookie.vcc
 create mode 100644 varnish4-vmods/libvmod-cookie-4.0/vmod-cookie.spec
 create mode 100644 varnish4-vmods/libvmod-header-4.0/.gitignore
 create mode 100644 varnish4-vmods/libvmod-header-4.0/LICENSE
 create mode 100644 varnish4-vmods/libvmod-header-4.0/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-header-4.0/README.rst
 create mode 100755 varnish4-vmods/libvmod-header-4.0/autogen.sh
 create mode 100644 varnish4-vmods/libvmod-header-4.0/configure.ac
 create mode 100644 varnish4-vmods/libvmod-header-4.0/debian/changelog
 create mode 100644 varnish4-vmods/libvmod-header-4.0/debian/compat
 create mode 100644 varnish4-vmods/libvmod-header-4.0/debian/control
 create mode 100644 varnish4-vmods/libvmod-header-4.0/debian/copyright
 create mode 100644 varnish4-vmods/libvmod-header-4.0/debian/dirs
 create mode 100644 varnish4-vmods/libvmod-header-4.0/debian/docs
 create mode 100755 varnish4-vmods/libvmod-header-4.0/debian/rules
 create mode 100644 varnish4-vmods/libvmod-header-4.0/m4/PLACEHOLDER
 create mode 100644 varnish4-vmods/libvmod-header-4.0/m4/varnish.m4
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/tests/append.vtc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/tests/copy.vtc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/tests/get.vtc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/tests/import.vtc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/tests/keep-others.vtc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/tests/remove.vtc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/tests/some-data.vtc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/tests/version.vtc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/vmod_header.c
 create mode 100644 varnish4-vmods/libvmod-header-4.0/src/vmod_header.vcc
 create mode 100644 varnish4-vmods/libvmod-header-4.0/vmod-header.spec
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/CHANGELOG
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/CONTRIBUTORS
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/INSTALL
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/LICENSE
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/README.rst
 create mode 100755 varnish4-vmods/libvmod-querystring-4.0/autogen.sh
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/configure.ac
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring.c
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring.h
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring3.vcc
 create mode 100644 varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring4.vcc
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/.gitignore
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/LICENSE
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/README
 create mode 100755 varnish4-vmods/libvmod-revvar-4.0/autogen.sh
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/configure.ac
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/man/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/man/vmod_var.rst
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/src/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/src/tests/test01.vtc
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/src/tests/test02.vtc
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/src/tests/test03.vtc
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/src/vmod_revvar.c
 create mode 100644 varnish4-vmods/libvmod-revvar-4.0/src/vmod_revvar.vcc
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/.gitignore
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/COPYING
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/LICENSE
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/README.rst
 create mode 100755 varnish4-vmods/libvmod-timers-4.0/autogen.sh
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/configure.ac
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/src/Makefile.am
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/src/tests/test01.vtc
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/src/vmod_timers.c
 create mode 100644 varnish4-vmods/libvmod-timers-4.0/src/vmod_timers.vcc

diff --git a/debian/changelog b/debian/changelog
deleted file mode 100644
index 70446d3..0000000
--- a/debian/changelog
+++ /dev/null
@@ -1,138 +0,0 @@
-revsw-varnish4-modules (0.5-8) unstable; urgency=medium
-
-  * Updated Varnish to 4.0.3.
-
- -- Sorin Otescu <sorin@revsw.com>  Mon, 25 May 2015 19:19:51 +0300
-
-revsw-varnish4-modules (0.5-7) unstable; urgency=medium
-
-  * Added 'req_processing_time_real' to 'timers' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Wed, 08 Apr 2015 20:12:32 +0300
-
-revsw-varnish4-modules (0.5-6) unstable; urgency=medium
-
-  * Different way of computing time in 'timers' VMOD.
-  * Added 'req_processing_time' function to 'timers' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Tue, 27 Jan 2015 18:29:47 +0200
-
-revsw-varnish4-modules (0.5-5) unstable; urgency=medium
-
-  * Added 'filter_csv' and 'filter_except_csv' to 'querystring' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Thu, 22 Jan 2015 20:41:39 +0200
-
-revsw-varnish4-modules (0.5-4) unstable; urgency=medium
-
-  * Added 'querystring' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Mon, 19 Jan 2015 16:53:52 +0200
-
-revsw-varnish4-modules (0.5-3) unstable; urgency=medium
-
-  * Fixed NULL string accesses causing SEGFAULT.
-
- -- Sorin Otescu <sorin@revsw.com>  Wed, 31 Dec 2014 10:17:52 +0200
-
-revsw-varnish4-modules (0.5-2) unstable; urgency=medium
-
-  * Updated 'cookie' VMOD from original repo.
-  * Fixed 'chromelogger' VMOD for multithreaded use.
-  * Added 'collect_partial' funtion to 'chromelogger' VMOD, to allow
-    logging from 'vcl_backend_response'.
-  * Removed empty 'revvar' VMOD init function.
-
- -- Sorin Otescu <sorin@revsw.com>  Tue, 30 Dec 2014 18:11:12 +0200
-
-revsw-varnish4-modules (0.5-1) unstable; urgency=medium
-
-  * Fixed allocation for 'chromelogger' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Mon, 29 Dec 2014 07:20:53 +0200
-
-revsw-varnish4-modules (0.5) unstable; urgency=medium
-
-  * Varnish 4 VMODs.
-
- -- Sorin Otescu <sorin@revsw.com>  Sat, 27 Dec 2014 12:18:02 +0200
-
-revsw-varnish4-modules (0.4-1) unstable; urgency=medium
-
-  * Added global version for get/set int, bool, real and duration.
-
- -- Sorin Otescu <sorin@revsw.com>  Wed, 08 Oct 2014 17:56:02 +0300
-
-revsw-varnish4-modules (0.4) unstable; urgency=medium
-
-  * Added 'chromelogger' and 'query' VMODs.
-  * Added debug package.
-
- -- Sorin Otescu <sorin@revsw.com>  Tue, 30 Sep 2014 21:03:23 +0300
-
-revsw-varnish4-modules (0.3-6) unstable; urgency=medium
-
-  * Fixed crash in 'var' VMOD.
-  * Added 'set_string_allow_null' to 'var' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Thu, 28 Aug 2014 20:30:51 +0300
-
-revsw-varnish4-modules (0.3-5) unstable; urgency=medium
-
-  * Functions using BOOL now really use BOOL (not INT).
-
- -- Sorin Otescu <sorin@revsw.com>  Mon, 25 Aug 2014 12:44:16 +0300
-
-revsw-varnish4-modules (0.3-4) unstable; urgency=medium
-
-  * Added 'header' VMOD.
-  * Added 'unset', 'set_string_literal' and 'string_set_is_empty'
-    functions to 'var' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Thu, 21 Aug 2014 15:07:36 +0300
-
-revsw-varnish4-modules (0.3-3) unstable; urgency=medium
-
-  * Switched to Varnish-based allocator, allocating memory from 
-    session allocator.
-
- -- Sorin Otescu <sorin@revsw.com>  Wed, 20 Aug 2014 15:48:04 +0300
-
-revsw-varnish4-modules (0.3-2) unstable; urgency=medium
-
-  * Added 'new_string_set', 'add_to_string_set', 'del_from_string_set'
-    and 'get_string_set_as_csv' to 'var' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Wed, 13 Aug 2014 16:27:55 +0300
-
-revsw-varnish4-modules (0.3-1) unstable; urgency=medium
-
-  * Added 'set_bool' 'get_bool', 'and_or_set_bool' and 'or_or_set_bool' 
-    to 'var' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Tue, 12 Aug 2014 11:40:51 +0300
-
-revsw-varnish4-modules (0.3) unstable; urgency=medium
-
-  * Added 'var' VMOD.
-
- -- Sorin Otescu <sorin@revsw.com>  Fri, 08 Aug 2014 12:26:34 -0700
-
-revsw-varnish4-modules (0.2-1) unstable; urgency=medium
-
-  * Build-depend on python-docutils.
-
- -- Sorin Otescu <sorin@revsw.com>  Mon, 18 Aug 2014 18:53:45 +0300
-
-revsw-varnish4-modules (0.2) unstable; urgency=low
-
-  * Added 'filter_only' to 'cookies' module.
-
- -- Sorin Otescu <sorin@revsw.com>  Thu, 07 Aug 2014 16:52:01 -0700
-
-revsw-varnish4-modules (0.1) unstable; urgency=low
-
-  * First version
-
- -- Sorin Otescu <sorin@revsw.com>  Thu, 07 Aug 2014 13:20:20 -0700
-
diff --git a/debian/compat b/debian/compat
deleted file mode 100644
index 7f8f011..0000000
--- a/debian/compat
+++ /dev/null
@@ -1 +0,0 @@
-7
diff --git a/debian/control b/debian/control
deleted file mode 100644
index 96b5898..0000000
--- a/debian/control
+++ /dev/null
@@ -1,25 +0,0 @@
-Source: revsw-varnish4-modules
-Section: web
-Priority: extra
-Maintainer: Sorin Otescu <sorin@revsw.com>
-Build-Depends: debhelper (>= 7), build-essential, python-docutils,
- revsw-libvarnish4api-dev (>= 4.0.3)
-Built-Using: revsw-varnish4 (= 4.0.3)
-Standards-Version: 3.8.1
-
-Package: revsw-varnish4-modules
-Architecture: any
-Depends: revsw-varnish4 (>= 4.0.3), ${Varnish:ABI}, ${misc:Depends}
-Conflicts: revsw-varnish-modules
-Replaces: revsw-varnish-modules
-Description: Various VMODs for Varnish
- Includes: Cookie, Timers, ChromeLogger, Header, Var
-
-Package: revsw-varnish4-modules-dbg
-Architecture: any
-Depends: revsw-varnish4-modules (= ${binary:Version}),
-         ${misc:Depends}
-Conflicts: revsw-varnish-modules-dbg
-Replaces: revsw-varnish-modules-dbg
-Description: Various VMODs for Varnish (debug symbols)
- Includes: Cookie, Timers, ChromeLogger, Header, Var
diff --git a/debian/copyright b/debian/copyright
deleted file mode 100644
index 265b447..0000000
--- a/debian/copyright
+++ /dev/null
@@ -1,29 +0,0 @@
-Copyright:
-
-    Copyright 2009-2011 Varnish Software AS
-
-License:
-
-Copyright (c) 2010-2011 Varnish Software AS
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions
-are met:
-1. Redistributions of source code must retain the above copyright
-   notice, this list of conditions and the following disclaimer.
-2. Redistributions in binary form must reproduce the above copyright
-   notice, this list of conditions and the following disclaimer in the
-   documentation and/or other materials provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-SUCH DAMAGE.
diff --git a/debian/dirs b/debian/dirs
deleted file mode 100644
index e827921..0000000
--- a/debian/dirs
+++ /dev/null
@@ -1 +0,0 @@
-usr/share/doc/revsw-varnish-modules
diff --git a/debian/revsw-varnish4-modules.postinst b/debian/revsw-varnish4-modules.postinst
deleted file mode 100644
index b9b6aef..0000000
--- a/debian/revsw-varnish4-modules.postinst
+++ /dev/null
@@ -1,8 +0,0 @@
-# dh_installdeb will replace this with shell code automatically
-# generated by other debhelper scripts.
-#DEBHELPER#
-
-# Restart listener service if it exists and it is running
-if service revsw-varnish4 status >/dev/null 2>&1 ; then
-    service revsw-varnish4 restart
-fi
\ No newline at end of file
diff --git a/debian/rules b/debian/rules
deleted file mode 100755
index f36b4d8..0000000
--- a/debian/rules
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/make -f
-export DH_VERBOSE=1
-
-VARNISHSRC := $(shell readlink -f ../varnish-4.0.3)
-VMODDIR := /usr/lib/varnish/vmods
-VMOD_ABI := $(shell printf '\#include "vmod_abi.h"\nVMOD_ABI_Version' | cpp - -I$(VARNISHSRC)/include | sed '/^\#/D;s/"//g;s/\([A-Z]\)/\L\1/g;s/[^a-z0-9.]/-/g;s/varnish/varnishabi/')
-
-LOCAL_CFLAGS := -g3
-#LOCAL_CFLAGS := -O0 -g3
-LOCAL_LDFLAGS := -g3
-
-override_dh_auto_configure:
-	cd libvmod-querystring-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
-	cd libvmod-chromelogger-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
-	cd libvmod-cookie-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
-	cd libvmod-revvar-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
-	cd libvmod-header-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
-	cd libvmod-timers-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
-
-override_dh_gencontrol:
-	echo "Varnish:ABI=$(VMOD_ABI)" >> debian/substvars
-
-	if [ -n "$$DEBIAN_OVERRIDE_BINARY_VERSION" ]; then \
-		dh_gencontrol -- -Tdebian/substvars -v$$DEBIAN_OVERRIDE_BINARY_VERSION; \
-	else \
-		dh_gencontrol -- -Tdebian/substvars; \
-	fi
-
-override_dh_auto_build:
-	$(MAKE) -C libvmod-querystring-4.0
-	$(MAKE) -C libvmod-chromelogger-4.0
-	$(MAKE) -C libvmod-cookie-4.0
-	$(MAKE) -C libvmod-revvar-4.0
-	$(MAKE) -C libvmod-header-4.0
-	$(MAKE) -C libvmod-timers-4.0
-
-override_dh_auto_install:
-	$(MAKE) -C libvmod-querystring-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
-	$(MAKE) -C libvmod-chromelogger-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
-	$(MAKE) -C libvmod-cookie-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
-	$(MAKE) -C libvmod-revvar-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
-	$(MAKE) -C libvmod-header-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
-	$(MAKE) -C libvmod-timers-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
-
-override_dh_auto_clean:
-	$(MAKE) -C libvmod-querystring-4.0 distclean || true
-	$(MAKE) -C libvmod-chromelogger-4.0 distclean || true
-	$(MAKE) -C libvmod-cookie-4.0 distclean || true
-	$(MAKE) -C libvmod-revvar-4.0 distclean || true
-	$(MAKE) -C libvmod-header-4.0 distclean || true
-	$(MAKE) -C libvmod-timers-4.0 distclean || true
-
-override_dh_strip:
-	dh_strip --dbg-package=revsw-varnish4-modules-dbg
-
-%:
-	dh $@
diff --git a/libvmod-chromelogger-4.0/.gitignore b/libvmod-chromelogger-4.0/.gitignore
deleted file mode 100644
index 12120ba..0000000
--- a/libvmod-chromelogger-4.0/.gitignore
+++ /dev/null
@@ -1,29 +0,0 @@
-Makefile
-Makefile.in
-.deps/
-.libs/
-*.o
-*.lo
-*.la
-*~
-
-/aclocal.m4
-/autom4te.cache/
-/compile
-/config.guess
-/config.h
-/config.h.in
-/config.log
-/config.status
-/config.sub
-/configure
-/depcomp
-/install-sh
-/libtool
-/ltmain.sh
-/missing
-/stamp-h1
-/m4/
-
-/src/vcc_if.c
-/src/vcc_if.h
diff --git a/libvmod-chromelogger-4.0/COPYING b/libvmod-chromelogger-4.0/COPYING
deleted file mode 100644
index f792696..0000000
--- a/libvmod-chromelogger-4.0/COPYING
+++ /dev/null
@@ -1,7 +0,0 @@
-Copyright (c) 2011 Varnish Software AS
-...
-See LICENSE for details.
-
-You're free to use and distribute this under terms in the
-LICENSE. Please add your relevant copyright statements.
-
diff --git a/libvmod-chromelogger-4.0/LICENSE b/libvmod-chromelogger-4.0/LICENSE
deleted file mode 100644
index 264d421..0000000
--- a/libvmod-chromelogger-4.0/LICENSE
+++ /dev/null
@@ -1,20 +0,0 @@
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions
-are met:
-1. Redistributions of source code must retain the above copyright
-   notice, this list of conditions and the following disclaimer.
-2. Redistributions in binary form must reproduce the above copyright
-   notice, this list of conditions and the following disclaimer in the
-   documentation and/or other materials provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-SUCH DAMAGE.
diff --git a/libvmod-chromelogger-4.0/Makefile.am b/libvmod-chromelogger-4.0/Makefile.am
deleted file mode 100644
index a348b23..0000000
--- a/libvmod-chromelogger-4.0/Makefile.am
+++ /dev/null
@@ -1,18 +0,0 @@
-ACLOCAL_AMFLAGS = -I m4
-
-SUBDIRS = src
-
-EXTRA_DIST = README.rst
-
-dist_man_MANS = vmod_chromelogger.3
-MAINTAINERCLEANFILES = $(dist_man_MANS)
-
-vmod_chromelogger.3: README.rst
-if HAVE_RST2MAN
-	${RST2MAN} README.rst $@
-else
-	@echo "========================================"
-	@echo "You need rst2man installed to make dist"
-	@echo "========================================"
-	@false
-endif
diff --git a/libvmod-chromelogger-4.0/README.rst b/libvmod-chromelogger-4.0/README.rst
deleted file mode 100644
index fea606a..0000000
--- a/libvmod-chromelogger-4.0/README.rst
+++ /dev/null
@@ -1,123 +0,0 @@
-=================
-vmod_chromelogger
-=================
-
---------------------------------
-Varnish Module for Chrome Logger
---------------------------------
-
-:Author: Lorenz Schori
-:Date: 2013-09-21
-:Version: 0.1
-:Manual section: 3
-
-SYNOPSIS
-========
-
-                import chromelogger;
-
-                sub vcl_recv {
-                    chromelogger.log("So long, and thanks for all the fish");
-                }
-
-                sub vcl_backend_response {
-                    ### Collect backend-related entries into a temporary header
-                    set resp.http.X-ChromeLogger-BEData = chromelogger.collect_partial();
-                }
-
-                sub vcl_deliver {
-                    ### Collect and encode all log entries
-                    set resp.http.X-ChromeLogger-Data = chromelogger.collect(resp.http.X-ChromeLogger-BEData);
-                    unset resp.http.X-ChromeLogger-BEData;
-                }
-
-
-DESCRIPTION
-===========
-
-Varnish Module (vmod) for sending log entries to chrome logger
-
-
-FUNCTIONS
-=========
-
-log
----
-
-Prototype::
-
-                log(STRING S)
-
-Return value
-	NONE
-Description
-    Record a log message and store it internally.
-
-Example::
-
-                chromelogger.log("So long, and thanks for all the fish");
-
-collect
--------
-
-Prototype::
-
-                collect();
-
-Return value
-	REAL
-
-Description
-    Return all log entries and encode them for delivery to the chrome logger
-    client.
-
-Example::
-
-                ### Collect and encode all log entries
-                set resp.http.X-ChromeLogger-Data = chromelogger.collect();
-
-
-
-INSTALLATION
-============
-
-If you received this packge without a pre-generated configure script, you must
-have the GNU Autotools installed, and can then run the 'autogen.sh' script. If
-you received this package with a configure script, skip to the second
-command-line under Usage to configure.
-
-Usage::
-
- # Generate configure script
- ./autogen.sh
-
- # Execute configure script
- ./configure VARNISHSRC=DIR [VMODDIR=DIR]
-
-`VARNISHSRC` is the directory of the Varnish source tree for which to
-compile your vmod. Both the `VARNISHSRC` and `VARNISHSRC/include`
-will be added to the include search paths for your module.
-
-Optionally you can also set the vmod install directory by adding
-`VMODDIR=DIR` (defaults to the pkg-config discovered directory from your
-Varnish installation).
-
-Make targets:
-
-* make - builds the vmod
-* make install - installs your vmod in `VMODDIR`
-* make check - runs the unit tests in ``src/tests/*.vtc``
-
-
-SEE ALSO
-========
-
-* http://craig.is/writing/chrome-logger
-
-COPYRIGHT
-=========
-
-This document is licensed under the same license as the
-libvmod-chromelogger project. See LICENSE for details.
-
-* Copyright (c) 2013 Lorenz Schori
diff --git a/libvmod-chromelogger-4.0/autogen.sh b/libvmod-chromelogger-4.0/autogen.sh
deleted file mode 100755
index 9a12ef5..0000000
--- a/libvmod-chromelogger-4.0/autogen.sh
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/bin/sh
-
-warn() {
-	echo "WARNING: $@" 1>&2
-}
-
-case `uname -s` in
-Darwin)
-	LIBTOOLIZE=glibtoolize
-	;;
-FreeBSD)
-	LIBTOOLIZE=libtoolize
-	;;
-Linux)
-	LIBTOOLIZE=libtoolize
-	;;
-SunOS)
-	LIBTOOLIZE=libtoolize
-	;;
-*)
-	warn "unrecognized platform:" `uname -s`
-	LIBTOOLIZE=libtoolize
-esac
-
-automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
-if [ -z "$automake_version" ] ; then
-	warn "unable to determine automake version"
-else
-	case $automake_version in
-		0.*|1.[0-8]|1.[0-8][.-]*)
-			warn "automake ($automake_version) detected; 1.9 or newer recommended"
-			;;
-		*)
-			;;
-	esac
-fi
-
-set -ex
-
-aclocal -I m4
-$LIBTOOLIZE --copy --force
-autoheader
-automake --add-missing --copy --foreign
-autoconf
diff --git a/libvmod-chromelogger-4.0/configure.ac b/libvmod-chromelogger-4.0/configure.ac
deleted file mode 100644
index 3a2e6fc..0000000
--- a/libvmod-chromelogger-4.0/configure.ac
+++ /dev/null
@@ -1,60 +0,0 @@
-AC_PREREQ(2.59)
-AC_COPYRIGHT([Copyright (c) 2011 Varnish Software AS])
-AC_INIT([libvmod-chromelogger], [trunk])
-AC_CONFIG_MACRO_DIR([m4])
-AC_CONFIG_SRCDIR(src/vmod_chromelogger.vcc)
-AM_CONFIG_HEADER(config.h)
-
-AC_CANONICAL_SYSTEM
-AC_LANG(C)
-
-AM_INIT_AUTOMAKE([foreign])
-
-AC_GNU_SOURCE
-AC_PROG_CC
-AC_PROG_CC_STDC
-if test "x$ac_cv_prog_cc_c99" = xno; then
-	AC_MSG_ERROR([Could not find a C99 compatible compiler])
-fi
-AC_PROG_CPP
-
-AC_PROG_INSTALL
-AC_PROG_LIBTOOL
-AC_PROG_MAKE_SET
-
-# Check for rst utilities
-AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
-if test "x$RST2MAN" = "xno"; then
-	AC_MSG_WARN([rst2man not found - not building man pages])
-fi
-AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
-
-
-#Check for pkg-config
-PKG_PROG_PKG_CONFIG
-
-
-AC_HEADER_STDC
-AC_CHECK_HEADERS([sys/stdlib.h])
-
-
-
-# Check for python
-AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
-
-
-# Varnish include files tree
-VARNISH_VMOD_INCLUDES
-VARNISH_VMOD_DIR
-VARNISH_VMODTOOL
-
-# Check that varnishtest is built in the varnish source directory
-AC_PATH_PROG([VARNISHTEST], [varnishtest])
-AC_PATH_PROG([VARNISHD], [varnishd])
-
-AC_CONFIG_FILES([
-    Makefile
-    src/Makefile
-])
-AC_OUTPUT
-                                  
diff --git a/libvmod-chromelogger-4.0/src/Makefile.am b/libvmod-chromelogger-4.0/src/Makefile.am
deleted file mode 100644
index 78fd4c6..0000000
--- a/libvmod-chromelogger-4.0/src/Makefile.am
+++ /dev/null
@@ -1,37 +0,0 @@
-# if VARNISHSRC is defined on the command-line, use that. Otherwise, build
-# this the same as the modules that come with varnish (i.e. we're building
-# within the varnish src dir itself, and $(top_srcdir) is the varnish source).
-#
-
-AM_CPPFLAGS = @VMOD_INCLUDES@
-
-#vmoddir = /usr/local/lib/varnish/vmods
-vmoddir = @VMOD_DIR@
-
-vmod_LTLIBRARIES = libvmod_chromelogger.la
-
-libvmod_chromelogger_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
-
-libvmod_chromelogger_la_SOURCES = \
-	vcc_if.c \
-	vcc_if.h \
-	vmod_chromelogger.c
-
-
-vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_chromelogger.vcc
-	@VMODTOOL@ $(top_srcdir)/src/vmod_chromelogger.vcc
-
-VMOD_TESTS = tests/*.vtc
-.PHONY: $(VMOD_TESTS)
-
-tests/*.vtc:
-	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
-
-check: $(VMOD_TESTS)
-
-EXTRA_DIST = \
-	vmod_chromelogger.vcc \
-	$(VMOD_TESTS)
-
-CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h 
-
diff --git a/libvmod-chromelogger-4.0/src/tests/test01.vtc b/libvmod-chromelogger-4.0/src/tests/test01.vtc
deleted file mode 100644
index 7d2dbf9..0000000
--- a/libvmod-chromelogger-4.0/src/tests/test01.vtc
+++ /dev/null
@@ -1,26 +0,0 @@
-varnishtest "Test chromelogger vmod"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-    import chromelogger from "${vmod_topbuild}/src/.libs/libvmod_chromelogger.so";
-
-    sub vcl_deliver {
-        chromelogger.log("So long, and thanks for all the fish");
-        set resp.http.X-ChromeLogger-Data = chromelogger.collect();
-    }
-
-} -start
-
-client c1 {
-    txreq -url "/"
-    rxresp
-
-    ### utility functions
-    expect resp.http.X-ChromeLogger-Data == eyJ2ZXJzaW9uIjogIjAuMiIsImNvbHVtbnMiOiBbImxvZyIsICJiYWNrdHJhY2UiLCAidHlwZSJdLCJyb3dzIjogW1tbIlNvIGxvbmcsIGFuZCB0aGFua3MgZm9yIGFsbCB0aGUgZmlzaCJdLCJGSVhNRSIsImxvZyJdXX0=
-}
-
-client c1 -run
diff --git a/libvmod-chromelogger-4.0/src/vmod_chromelogger.c b/libvmod-chromelogger-4.0/src/vmod_chromelogger.c
deleted file mode 100644
index 6dde937..0000000
--- a/libvmod-chromelogger-4.0/src/vmod_chromelogger.c
+++ /dev/null
@@ -1,323 +0,0 @@
-#include <stdlib.h>
-#include <string.h>
-#include <stdio.h>
-#include <ctype.h>
-
-#include "vrt.h"
-#include "cache/cache.h"
-
-#include "vcc_if.h"
-
-#define DEBUG 1
-
-#ifdef DEBUG                    // To print diagnostics to the error log
-#define _DEBUG 1                // enable through gcc -DDEBUG
-#else
-#define _DEBUG 0
-#endif
-
-#define MAX_DATA 1024
-#define MAX_BT 256
-
-const char * const typeNames[] = {
-    "log",
-    "warn",
-    "error",
-    "info",
-    "group",
-    "groupEnd",
-    "groupCollapsed",
-    "table"
-};
-
-enum type_e {
-    LOG,
-    WARN,
-    ERROR,
-    INFO,
-    GROUP,
-    GROUPEND,
-    GROUPCOLLAPSED,
-    TABLE
-};
-
-struct entry {
-	char data[MAX_DATA];
-    char backtrace[MAX_BT];
-    enum type_e type;
-	VTAILQ_ENTRY(entry) list;
-};
-
-struct vmod_chromelogger {
-	unsigned magic;
-#define VMOD_CHROMELOGGER_MAGIC 0x4EF1FC23
-	unsigned xid;
-	VTAILQ_HEAD(, entry) logentries;
-};
-
-static pthread_key_t key;
-static pthread_once_t key_is_initialized = PTHREAD_ONCE_INIT;
-
-static void vmod_VSB_quote_real(struct vsb *s, const char *p);
-static void vmod_VSB_base64_encode(struct vsb *s, const char *p, ssize_t len);
-
-static void
-mkkey(void) {
-	AZ(pthread_key_create(&key, free));
-}
-
-int
-init_function(struct vmod_priv *priv, const struct VCL_conf *conf) {
-	pthread_once(&key_is_initialized, mkkey);
-	return (0);
-}
-
-static void
-clobj_clear(struct vmod_chromelogger *c) {
-	c->magic = VMOD_CHROMELOGGER_MAGIC;
-	VTAILQ_INIT(&c->logentries);
-	c->xid = 0;
-}
-
-static unsigned
-get_xid(const struct vrt_ctx *ctx) {
-    /*
-     * SORIN: don't use req->sp->vxid because it's not reliable (repeated values).
-     * Use the log wid instead (the "2" in "*   << Request  >> 2" in varnishlog).
-     */
-    if (ctx->req)
-        return ctx->req->vsl[0].wid;
-
-    AN(ctx->bo);
-    return ctx->bo->vsl->wid;
-}
-
-static struct vmod_chromelogger *
-clobj_get(const struct vrt_ctx *ctx) {
-	struct vmod_chromelogger *vcp = pthread_getspecific(key);
-
-	if (!vcp) {
-		vcp = malloc(sizeof *vcp);
-		AN(vcp);
-		clobj_clear(vcp);
-		vcp->xid = get_xid(ctx);
-		AZ(pthread_setspecific(key, vcp));
-	}
-
-	CHECK_OBJ_NOTNULL(vcp, VMOD_CHROMELOGGER_MAGIC);
-
-	if (vcp->xid != get_xid(ctx)) {
-		// Reuse previously allocated storage
-		clobj_clear(vcp);
-		vcp->xid = get_xid(ctx);
-	}
-
-	return (vcp);
-}
-
-/**
- * Add a new log message.
- */
-void
-vmod_log(const struct vrt_ctx *ctx, const char *s) {
-    struct vmod_chromelogger *vcp = clobj_get(ctx);
-    int c;
-    struct entry *newentry;
-
-    CHECK_OBJ_NOTNULL(vcp, VMOD_CHROMELOGGER_MAGIC);
-
-        // Ignore empty lines
-	if (strlen(s) == 0)
-		return;
-
-    newentry = (struct entry*)WS_Alloc(ctx->ws, sizeof(struct entry));
-	AN(newentry);
-
-    strncpy(newentry->data, s, MAX_DATA);
-    newentry->data[MAX_DATA-1] = '\0';
-    strcpy(newentry->backtrace, "FIXME");
-    newentry->type = LOG;
-
-	VTAILQ_INSERT_TAIL(&vcp->logentries, newentry, list);
-}
-
-static void
-get_json_entries(struct vmod_chromelogger *vcp, struct vsb *json) {
-    struct entry *e;
-    struct entry *e2;
-
-    VTAILQ_FOREACH_SAFE(e, &vcp->logentries, list, e2) {
-        VSB_cat(json, "[[");
-        vmod_VSB_quote_real(json, e->data);
-        VSB_cat(json, "],");
-        vmod_VSB_quote_real(json, e->backtrace);
-        VSB_cat(json, ",\"");
-        VSB_cat(json, typeNames[e->type]);
-        VSB_cat(json, "\"],");
-        VTAILQ_REMOVE(&vcp->logentries, e, list);
-    }
-
-    // Remove last comma
-    json->s_len--;
-}
-
-const char * __match_proto__()
-vmod_collect(const struct vrt_ctx *ctx, VCL_STRING extra_json) {
-    struct vmod_chromelogger *vcp = clobj_get(ctx);
-	struct vsb *json;
-	struct vsb *output;
-	unsigned v, u;
-	char *p;
-
-    CHECK_OBJ_NOTNULL(vcp, VMOD_CHROMELOGGER_MAGIC);
-
-    if (VTAILQ_EMPTY(&vcp->logentries))
-        return NULL;
-
-	u = WS_Reserve(ctx->ws, 0);
-	p = ctx->ws->f;
-
-	json = VSB_new_auto();
-	AN(json);
-
-	VSB_cpy(json, "{\"version\": \"0.2\",\"columns\": [\"log\", \"backtrace\", \"type\"],\"rows\": [");
-
-    get_json_entries(vcp, json);
-
-    if (extra_json && *extra_json) {
-        VSB_cat(json, ",");
-        VSB_cat(json, extra_json);
-    }
-
-	VSB_cat(json, "]}");
-	VSB_finish(json);
-
-    // Base64 encode
-	output = VSB_new_auto();
-	AN(output);
-
-    vmod_VSB_base64_encode(output, VSB_data(json), VSB_len(json));
-	VSB_finish(output);
-
-	v = VSB_len(output) + 1;
-    if (v > u) {
-        /* Too big; roll back */
-        v = 0;
-        p = NULL;
-    }
-    else
-        strcpy(p, VSB_data(output));
-
-	VSB_delete(output);
-	VSB_delete(json);
-
-	WS_Release(ctx->ws, v);
-	return (p);
-}
-
-const char * __match_proto__()
-vmod_collect_partial(const struct vrt_ctx *ctx) {
-    struct vmod_chromelogger *vcp = clobj_get(ctx);
-	struct vsb *json;
-	unsigned v, u;
-	char *p;
-
-    CHECK_OBJ_NOTNULL(vcp, VMOD_CHROMELOGGER_MAGIC);
-
-    if (VTAILQ_EMPTY(&vcp->logentries))
-        return NULL;
-
-	u = WS_Reserve(ctx->ws, 0);
-	p = ctx->ws->f;
-
-	json = VSB_new_auto();
-	AN(json);
-
-    get_json_entries(vcp, json);
-	VSB_finish(json);
-
-	v = VSB_len(json) + 1;
-    if (v > u) {
-        /* Too big; roll back */
-        v = 0;
-        p = NULL;
-    }
-    else
-        strcpy(p, VSB_data(json));
-
-	VSB_delete(json);
-
-	WS_Release(ctx->ws, v);
-	return (p);
-}
-
-/*
- * Quote a string
- */
-static void
-vmod_VSB_quote_real(struct vsb *s, const char *p)
-{
-	const char *q;
-        int len = strlen(p);
-
-	(void)VSB_putc(s, '"');
-	for (q = p; q < p + len; q++) {
-		switch (*q) {
-		case ' ':
-			(void)VSB_putc(s, *q);
-			break;
-		case '\\':
-		case '"':
-			(void)VSB_putc(s, '\\');
-			(void)VSB_putc(s, *q);
-			break;
-		case '\n':
-			(void)VSB_cat(s, "\\n");
-			break;
-		case '\r':
-			(void)VSB_cat(s, "\\r");
-			break;
-		case '\t':
-			(void)VSB_cat(s, "\\t");
-			break;
-		default:
-			if (isgraph(*q))
-				(void)VSB_putc(s, *q);
-			else
-				(void)VSB_printf(s, "\\%o", *q & 0xff);
-			break;
-		}
-	}
-	(void)VSB_putc(s, '"');
-}
-
-static void
-vmod_VSB_base64_encode(struct vsb *s, const char *p, ssize_t len) {
-    const static char* b64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
-    ssize_t i;
-
-    if (len == -1) {
-        len = strlen(p);
-    }
-
-    for (i = 0; i < len - 2; i += 3) {
-        VSB_putc(s, b64[p[i] >> 2]);
-        VSB_putc(s, b64[((0x3 & p[i]) << 4) + (p[i+1] >> 4)]);
-        VSB_putc(s, b64[((0xf & p[i+1]) << 2) + (p[i+2] >> 6)]);
-        VSB_putc(s, b64[0x3f & p[i+2]]);
-    }
-
-    if (len % 3 == 2) {
-        VSB_putc(s, b64[p[i] >> 2]);
-        VSB_putc(s, b64[((0x3 & p[i]) << 4) + (p[i+1] >> 4)]);
-        VSB_putc(s, b64[((0xf & p[i+1]) << 2)]);
-        VSB_putc(s, '=');
-    }
-
-    if (len % 3 == 1) {
-        VSB_putc(s, b64[p[i] >> 2]);
-        VSB_putc(s, b64[((0x3 & p[i]) << 4)]);
-        VSB_putc(s, '=');
-        VSB_putc(s, '=');
-    }
-}
diff --git a/libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc b/libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc
deleted file mode 100644
index 0da047e..0000000
--- a/libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc
+++ /dev/null
@@ -1,5 +0,0 @@
-$Module chromelogger 3 Varnish chromelogger Module
-$Init init_function
-$Function VOID log(STRING)
-$Function STRING collect(STRING)
-$Function STRING collect_partial()
diff --git a/libvmod-cookie-4.0/.gitignore b/libvmod-cookie-4.0/.gitignore
deleted file mode 100644
index 6df314e..0000000
--- a/libvmod-cookie-4.0/.gitignore
+++ /dev/null
@@ -1,31 +0,0 @@
-Makefile
-Makefile.in
-.deps/
-.libs/
-*.o
-*.lo
-*.la
-*~
-*.[1-9]
-
-/aclocal.m4
-/autom4te.cache/
-/compile
-/config.guess
-/config.h
-/config.h.in
-/config.log
-/config.status
-/config.sub
-/configure
-/depcomp
-/install-sh
-/libtool
-/ltmain.sh
-/missing
-/stamp-h1
-/m4/
-
-/src/vcc_if.c
-/src/vcc_if.h
-/src/*rst
diff --git a/libvmod-cookie-4.0/.travis.yml b/libvmod-cookie-4.0/.travis.yml
deleted file mode 100644
index 41a8eca..0000000
--- a/libvmod-cookie-4.0/.travis.yml
+++ /dev/null
@@ -1,23 +0,0 @@
-language: c
-
-before_install:
-  - sudo apt-get update -q
-  - sudo apt-get install -qq apt-transport-https python-docutils
-  - curl https://repo.varnish-cache.org/debian/GPG-key.txt | sudo apt-key add -
-  - echo "deb https://repo.varnish-cache.org/ubuntu/ precise varnish-4.0" | sudo tee /etc/apt/sources.list.d/varnish-cache.list
-  - sudo apt-get -q update
-  - sudo apt-get install varnish libvarnishapi-dev
-
-
-before_script:
-  - ./autogen.sh
-  - ./configure --prefix=/usr
-  - make -j4
-
-script:
-  - make check -j4
-
-compiler:
-  - clang
-  - gcc
-
diff --git a/libvmod-cookie-4.0/COPYING b/libvmod-cookie-4.0/COPYING
deleted file mode 100644
index f792696..0000000
--- a/libvmod-cookie-4.0/COPYING
+++ /dev/null
@@ -1,7 +0,0 @@
-Copyright (c) 2011 Varnish Software AS
-...
-See LICENSE for details.
-
-You're free to use and distribute this under terms in the
-LICENSE. Please add your relevant copyright statements.
-
diff --git a/libvmod-cookie-4.0/LICENSE b/libvmod-cookie-4.0/LICENSE
deleted file mode 100644
index 264d421..0000000
--- a/libvmod-cookie-4.0/LICENSE
+++ /dev/null
@@ -1,20 +0,0 @@
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions
-are met:
-1. Redistributions of source code must retain the above copyright
-   notice, this list of conditions and the following disclaimer.
-2. Redistributions in binary form must reproduce the above copyright
-   notice, this list of conditions and the following disclaimer in the
-   documentation and/or other materials provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-SUCH DAMAGE.
diff --git a/libvmod-cookie-4.0/Makefile.am b/libvmod-cookie-4.0/Makefile.am
deleted file mode 100644
index c2473cd..0000000
--- a/libvmod-cookie-4.0/Makefile.am
+++ /dev/null
@@ -1,22 +0,0 @@
-ACLOCAL_AMFLAGS = -I m4
-
-SUBDIRS = src
-
-doc_DATA = README.rst LICENSE
-DISTCHECK_CONFIGURE_FLAGS = \
-	VMOD_DIR='$${libdir}/varnish/vmods'
-
-EXTRA_DIST = README.rst LICENSE vmod-cookie.spec debian
-
-dist_man_MANS = vmod_cookie.3
-MAINTAINERCLEANFILES = $(dist_man_MANS)
-
-%.1 %.2 %.3 %.4 %.5 %.6 %.7 %.8 %.9: README.rst
-if HAVE_RST2MAN
-	${RST2MAN} $< $@
-else
-	@echo "========================================"
-	@echo "You need rst2man installed to make dist"
-	@echo "========================================"
-	@false
-endif
diff --git a/libvmod-cookie-4.0/README.rst b/libvmod-cookie-4.0/README.rst
deleted file mode 100644
index c146afb..0000000
--- a/libvmod-cookie-4.0/README.rst
+++ /dev/null
@@ -1,275 +0,0 @@
-============
-vmod_cookie
-============
-
-----------------------
-Varnish Cookie Module
-----------------------
-
-:Author: Lasse Karstensen
-:Date: 2013-07-12
-:Version: 1.0
-:Manual section: 3
-
-SYNOPSIS
-========
-
-import cookie;
-
-DESCRIPTION
-===========
-
-Functions to handle the content of the Cookie header without complex use of
-regular expressions.
-
-Parses a cookie header into an internal data store, where per-cookie
-get/set/delete functions are available. A filter_except() method removes all
-but a set comma-separated list of cookies.
-
-A convenience function for formatting the Set-Cookie Expires date field
-is also included. It might be needed to use libvmod-header if there might
-be multiple Set-Cookie response headers.
-
-Only within a single VMOD call is the state set by cookie.parse() /
-cookie.set() guaranteed to persist. This VMOD was designed to be used
-for cleaning up a request in vcl_recv, but works outside recv if needed.
-In such a case it is necessary to run cookie.parse() again.
-
-It is currently not safe/tested to call this VMOD in any fetch threads.
-Do the filtering in recv, fix up anything going in in deliver. Running it
-in vcl_backend_fetch and similar is untested and has undefined results.
-
-
-FUNCTIONS
-=========
-
-parse
------
-
-Prototype
-        ::
-
-                parse(STRING S)
-Return value
-	VOID
-Description
-	Parse the cookie string in string S. The parsed values are only guaranteed
-	to exist within a single VCL function. Implicit clean() if run more than once.
-Example
-        ::
-
-		sub vcl_recv {
-			cookie.parse(req.http.Cookie);
-		}
-
-
-clean
------
-
-Prototype
-        ::
-
-                clean()
-Return value
-	VOID
-Description
-	Clean up all previously parse()-d cookies. Probably of limited
-	use. It is not necessary to run clean() in normal operation.
-Example
-        ::
-
-		sub vcl_recv {
-			cookie.clean();
-		}
-
-get
------
-
-Prototype
-        ::
-
-                get(STRING cookiename)
-Return value
-	STRING
-Description
-	Get the value of a cookie, as stored in internal vmod storage. If the cookie name does not exists, an empty string is returned.
-
-Example
-        ::
-
-		import std;
-		sub vcl_recv {
-			cookie.parse("cookie1: value1; cookie2: value2;");
-			std.log("cookie1 value is: " + cookie.get("cookie1"));
-		}
-
-set
-----
-
-Prototype
-        ::
-
-                set(STRING cookiename, STRING cookievalue)
-Return value
-	VOID
-Description
-	Set the internal vmod storage value for a cookie to a value.
-
-Example
-        ::
-
-		sub vcl_recv {
-			cookie.set("cookie1", "value1");
-			std.log("cookie1 value is: " + cookie.get("cookie1"));
-		}
-
-isset
------
-
-Prototype
-        ::
-
-                isset(STRING cookiename)
-Return value
-	BOOL
-Description
-	Check if a given cookie is set in the internal vmod storage.
-
-Example
-        ::
-
-		import std;
-		sub vcl_recv {
-			cookie.parse("cookie1: value1; cookie2: value2;");
-			if (cookie.isset("cookie2")) {
-				std.log("cookie2 is set.");
-			}
-		}
-
-delete
-------
-
-Prototype
-        ::
-
-                delete(STRING cookiename)
-Return value
-	VOID
-Description
-	Delete a cookie from internal vmod storage if it exists.
-
-Example
-        ::
-
-		sub vcl_recv {
-			cookie.parse("cookie1: value1; cookie2: value2;");
-			cookie.delete("cookie2");
-			// get_string() will now yield "cookie1: value1";
-		}
-
-
-filter_except
--------------
-
-Prototype
-        ::
-
-                filter_except(STRING cookienames)
-Return value
-	VOID
-Description
-	Delete all cookies from internal vmod storage that is not in the
-	comma-separated argument cookienames.
-
-Example
-        ::
-
-		sub vcl_recv {
-			cookie.parse("cookie1: value1; cookie2: value2; cookie3: value3");
-			cookie.filter_except("cookie1,cookie2");
-			// get_string() will now yield
-			// "cookie1: value1; cookie2: value2;";
-		}
-
-
-
-get_string
-----------
-
-Prototype
-        ::
-
-                get_string()
-Return value
-	STRING
-Description
-	Get a Cookie string value with all cookies in internal vmod storage.
-Example
-        ::
-
-		sub vcl_recv {
-			cookie.parse(req.http.cookie);
-			cookie.filter_except("SESSIONID,PHPSESSID");
-			set req.http.cookie = cookie.get_string();
-		}
-
-format_rfc1123
---------------
-
-Prototype
-        ::
-
-                format_rfc1123(TIME, DURATION)
-Return value
-	STRING
-Description
-	Get a RFC1123 formatted date string suitable for inclusion in a
-	Set-Cookie response header.
-
-	Care should be taken if the response has multiple Set-Cookie headers.
-	In that case the header vmod should be used.
-
-Example
-        ::
-
-		sub vcl_deliver {
-			# Set a userid cookie on the client that lives for 5 minutes.
-			set resp.http.Set-Cookie = "userid=" + req.http.userid + "; Expires=" + cookie.format_rfc1123(now, 5m) + "; httpOnly";
-		}
-
-
-INSTALLATION
-============
-
-The source tree is based on autotools to configure the building, and
-does also have the necessary bits in place to do functional unit tests
-using the varnishtest tool.
-
-Usage::
-
- ./configure --prefix=/usr
-
-Make targets:
-
-* make - builds the vmod
-* make install - installs the vmod.
-* make check - runs the unit tests in ``src/tests/*.vtc``
-
-In your VCL you could then use this vmod along the following lines::
-
-	import cookie;
-	sub vcl_recv {
-		cookie.parse(req.http.cookie);
-		cookie.filter_except("SESSIONID,PHPSESSID");
-		set req.http.cookie = cookie.get_string();
-	}
-
-
-COPYRIGHT
-=========
-
-This document is licensed under the same license as the
-libvmod-example project. See LICENSE for details.
-
-* Copyright (c) 2011-2013 Varnish Software
-* Copyright (c) 2013-2014 Lasse Karstensen
diff --git a/libvmod-cookie-4.0/autogen.sh b/libvmod-cookie-4.0/autogen.sh
deleted file mode 100755
index 9a12ef5..0000000
--- a/libvmod-cookie-4.0/autogen.sh
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/bin/sh
-
-warn() {
-	echo "WARNING: $@" 1>&2
-}
-
-case `uname -s` in
-Darwin)
-	LIBTOOLIZE=glibtoolize
-	;;
-FreeBSD)
-	LIBTOOLIZE=libtoolize
-	;;
-Linux)
-	LIBTOOLIZE=libtoolize
-	;;
-SunOS)
-	LIBTOOLIZE=libtoolize
-	;;
-*)
-	warn "unrecognized platform:" `uname -s`
-	LIBTOOLIZE=libtoolize
-esac
-
-automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
-if [ -z "$automake_version" ] ; then
-	warn "unable to determine automake version"
-else
-	case $automake_version in
-		0.*|1.[0-8]|1.[0-8][.-]*)
-			warn "automake ($automake_version) detected; 1.9 or newer recommended"
-			;;
-		*)
-			;;
-	esac
-fi
-
-set -ex
-
-aclocal -I m4
-$LIBTOOLIZE --copy --force
-autoheader
-automake --add-missing --copy --foreign
-autoconf
diff --git a/libvmod-cookie-4.0/configure.ac b/libvmod-cookie-4.0/configure.ac
deleted file mode 100644
index 0f18b39..0000000
--- a/libvmod-cookie-4.0/configure.ac
+++ /dev/null
@@ -1,54 +0,0 @@
-AC_PREREQ(2.64)
-AC_COPYRIGHT([Copyright (c) 2011-2014 Varnish Software AS])
-AC_INIT([libvmod-cookie], [trunk])
-AC_CONFIG_MACRO_DIR([m4])
-AC_CONFIG_SRCDIR(src/vmod_cookie.vcc)
-AM_CONFIG_HEADER(config.h)
-
-AC_CANONICAL_SYSTEM
-AC_LANG(C)
-
-AM_INIT_AUTOMAKE([foreign])
-
-AC_GNU_SOURCE
-AC_PROG_CC
-AC_PROG_CC_STDC
-if test "x$ac_cv_prog_cc_c99" = xno; then
-	AC_MSG_ERROR([Could not find a C99 compatible compiler])
-fi
-AC_PROG_CPP
-
-AC_PROG_INSTALL
-AC_PROG_LIBTOOL
-AC_PROG_MAKE_SET
-
-# Check for rst utilities
-AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
-if test "x$RST2MAN" = "xno"; then
-	AC_MSG_WARN([rst2man not found - not building man pages])
-fi
-AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
-
-# Checks for header files.
-AC_HEADER_STDC
-AC_CHECK_HEADERS([sys/stdlib.h])
-
-# Check for python
-AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
-
-PKG_CHECK_MODULES([libvarnishapi], [varnishapi])
-
-# Varnish include files tree
-VARNISH_VMOD_INCLUDES
-VARNISH_VMOD_DIR
-VARNISH_VMODTOOL
-
-AC_PATH_PROG([VARNISHTEST], [varnishtest])
-AC_PATH_PROG([VARNISHD], [varnishd], [],
-    [$PATH:$PATH:`pkg-config varnishapi --variable=sbindir`])
-
-AC_CONFIG_FILES([
-	Makefile
-	src/Makefile
-])
-AC_OUTPUT
diff --git a/libvmod-cookie-4.0/debian/changelog b/libvmod-cookie-4.0/debian/changelog
deleted file mode 100644
index 3d33ad5..0000000
--- a/libvmod-cookie-4.0/debian/changelog
+++ /dev/null
@@ -1,5 +0,0 @@
-libvmod-cookie (0.1) unstable; urgency=low
-
-  * First version
-
- -- Lasse Karstensen <lasse@varnish-software.com>  Wed, 19 Sep 2012 15:03:00 +0200
diff --git a/libvmod-cookie-4.0/debian/compat b/libvmod-cookie-4.0/debian/compat
deleted file mode 100644
index 7f8f011..0000000
--- a/libvmod-cookie-4.0/debian/compat
+++ /dev/null
@@ -1 +0,0 @@
-7
diff --git a/libvmod-cookie-4.0/debian/control b/libvmod-cookie-4.0/debian/control
deleted file mode 100644
index 942daa1..0000000
--- a/libvmod-cookie-4.0/debian/control
+++ /dev/null
@@ -1,12 +0,0 @@
-Source: libvmod-cookie
-Section: web
-Priority: extra
-Maintainer: Lasse Karstensen <lasse@varnish-software.com>
-Build-Depends: debhelper (>= 7), build-essential, python-docutils
-Standards-Version: 3.8.1
-Vcs-Git: git://github.com/lkarsten/libvmod-cookie.git
-
-Package: libvmod-cookie
-Architecture: any
-Depends: varnish, ${misc:Depends}
-Description: Cookie vmod for Varnish
diff --git a/libvmod-cookie-4.0/debian/copyright b/libvmod-cookie-4.0/debian/copyright
deleted file mode 100644
index 265b447..0000000
--- a/libvmod-cookie-4.0/debian/copyright
+++ /dev/null
@@ -1,29 +0,0 @@
-Copyright:
-
-    Copyright 2009-2011 Varnish Software AS
-
-License:
-
-Copyright (c) 2010-2011 Varnish Software AS
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions
-are met:
-1. Redistributions of source code must retain the above copyright
-   notice, this list of conditions and the following disclaimer.
-2. Redistributions in binary form must reproduce the above copyright
-   notice, this list of conditions and the following disclaimer in the
-   documentation and/or other materials provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-SUCH DAMAGE.
diff --git a/libvmod-cookie-4.0/debian/dirs b/libvmod-cookie-4.0/debian/dirs
deleted file mode 100644
index 17e6fe7..0000000
--- a/libvmod-cookie-4.0/debian/dirs
+++ /dev/null
@@ -1 +0,0 @@
-usr/share/doc/libvmod-example
diff --git a/libvmod-cookie-4.0/debian/docs b/libvmod-cookie-4.0/debian/docs
deleted file mode 100644
index e4f6e81..0000000
--- a/libvmod-cookie-4.0/debian/docs
+++ /dev/null
@@ -1,3 +0,0 @@
-README.rst
-LICENSE
-COPYING
diff --git a/libvmod-cookie-4.0/debian/rules b/libvmod-cookie-4.0/debian/rules
deleted file mode 100755
index 82ac88f..0000000
--- a/libvmod-cookie-4.0/debian/rules
+++ /dev/null
@@ -1,18 +0,0 @@
-#!/usr/bin/make -f
-export DH_VERBOSE=1
-
-VARNISHSRC = $(DEBIAN_VARNISH_SRC)
-VMODDIR = $(shell PKG_CONFIG_PATH="$(VARNISHSRC)" pkg-config --variable=vmoddir varnishapi)
-
-override_dh_auto_configure:
-	dh_auto_configure -- VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
-
-override_dh_gencontrol:
-	if [ -n "$$DEBIAN_OVERRIDE_BINARY_VERSION" ]; then \
-		dh_gencontrol -- -v$$DEBIAN_OVERRIDE_BINARY_VERSION; \
-	else \
-		dh_gencontrol ; \
-	fi
-
-%:
-	dh $@
diff --git a/libvmod-cookie-4.0/src/Makefile.am b/libvmod-cookie-4.0/src/Makefile.am
deleted file mode 100644
index 4d4eb97..0000000
--- a/libvmod-cookie-4.0/src/Makefile.am
+++ /dev/null
@@ -1,29 +0,0 @@
-AM_CPPFLAGS = @VMOD_INCLUDES@
-
-vmoddir = @VMOD_DIR@
-vmod_LTLIBRARIES = libvmod_cookie.la
-
-libvmod_cookie_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
-
-libvmod_cookie_la_SOURCES = \
-	vcc_if.c \
-	vcc_if.h \
-	vmod_cookie.c
-
-vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_cookie.vcc
-	@VMODTOOL@ $(top_srcdir)/src/vmod_cookie.vcc
-
-VMOD_TESTS = $(top_srcdir)/src/tests/*.vtc
-.PHONY: $(VMOD_TESTS)
-
-$(top_srcdir)/src/tests/*.vtc:
-	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
-
-check: $(VMOD_TESTS)
-
-EXTRA_DIST = vmod_cookie.vcc $(VMOD_TESTS)
-
-CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h \
-	$(builddir)/vmod_cookie.man.rst \
-	$(builddir)/vmod_cookie.rst
-
diff --git a/libvmod-cookie-4.0/src/tests/01-set-delete-produce.vtc b/libvmod-cookie-4.0/src/tests/01-set-delete-produce.vtc
deleted file mode 100644
index 227aaf8..0000000
--- a/libvmod-cookie-4.0/src/tests/01-set-delete-produce.vtc
+++ /dev/null
@@ -1,30 +0,0 @@
-varnishtest "Test cookie vmod"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_recv {
-		cookie.set("cookie1", "cookie1BAD");
-		cookie.set("cookie2", "cookie2value");
-		cookie.set("cookie3", "cookie3value");
-		cookie.set("cookie4", "cookie4value");
-		cookie.set("cookie1", "cookie1value");
-		cookie.delete("cookie2");
-	}
-	sub vcl_deliver {
-		set resp.http.X-foo = cookie.get_string();
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.http.X-foo == "cookie1=cookie1value; cookie3=cookie3value; cookie4=cookie4value;"
-}
-
-client c1 -run
diff --git a/libvmod-cookie-4.0/src/tests/02-clean.vtc b/libvmod-cookie-4.0/src/tests/02-clean.vtc
deleted file mode 100644
index 4334dc5..0000000
--- a/libvmod-cookie-4.0/src/tests/02-clean.vtc
+++ /dev/null
@@ -1,33 +0,0 @@
-varnishtest "Test cookie parser"
-
-server s1 {
-       rxreq
-       txresp
-
-       rxreq
-       txresp
-
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_recv {
-		cookie.set("cookie1", "cookie1BAD");
-	}
-	sub vcl_deliver {
-		set resp.http.X-foo = cookie.get_string();
-		cookie.clean();
-		set resp.http.X-bar = cookie.get_string();
-	}
-
-} -start
-
-client c1 {
-	txreq
-	rxresp
-	expect resp.http.X-foo == "cookie1=cookie1BAD;"
-	expect resp.http.X-bar == ""
-} -run
diff --git a/libvmod-cookie-4.0/src/tests/03-null.vtc b/libvmod-cookie-4.0/src/tests/03-null.vtc
deleted file mode 100644
index 755ebdb..0000000
--- a/libvmod-cookie-4.0/src/tests/03-null.vtc
+++ /dev/null
@@ -1,36 +0,0 @@
-varnishtest "NULL/empty value checks"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_recv {
-		// nothing in here at this point.
-		set req.http.x-foo = cookie.get_string();
-
-		// empty name
-		cookie.set("", "foo");
-
-		// empty value
-		cookie.set("cookie1", "");
-
-		// double delete
-		cookie.delete("cookie2");
-		cookie.delete("cookie2");
-	}
-	sub vcl_deliver {
-		set resp.http.x-foo = cookie.get_string();
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.http.X-foo == ""
-}
-
-client c1 -run
diff --git a/libvmod-cookie-4.0/src/tests/04-filter.vtc b/libvmod-cookie-4.0/src/tests/04-filter.vtc
deleted file mode 100644
index 26c86ed..0000000
--- a/libvmod-cookie-4.0/src/tests/04-filter.vtc
+++ /dev/null
@@ -1,29 +0,0 @@
-varnishtest "Test cookie vmod"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_recv {
-		cookie.set("cookie1", "cookie1value");
-		cookie.set("cookie2", "cookie2value");
-		cookie.set("cookie3", "cookie3value");
-		cookie.set("cookie4", "cookie4value");
-		cookie.filter_except("cookie2,cookie4,baz");
-	}
-	sub vcl_deliver {
-		set resp.http.X-foo = cookie.get_string();
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.http.X-foo == "cookie2=cookie2value; cookie4=cookie4value;"
-}
-
-client c1 -run
diff --git a/libvmod-cookie-4.0/src/tests/05-get.vtc b/libvmod-cookie-4.0/src/tests/05-get.vtc
deleted file mode 100644
index 4c32ea1..0000000
--- a/libvmod-cookie-4.0/src/tests/05-get.vtc
+++ /dev/null
@@ -1,29 +0,0 @@
-varnishtest "Test cookie vmod"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_recv {
-		cookie.set("cookie1", "cookie1value");
-		cookie.set("cookie2", "cookie2value");
-	}
-	sub vcl_deliver {
-		set resp.http.X-foo = cookie.get("cookie2");
-		# Make sure we handle this gracefully.
-		set resp.http.X-bar = "" + cookie.get("non-existing");
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.http.X-foo == "cookie2value"
-	expect resp.http.X-bar == ""
-}
-
-client c1 -run
diff --git a/libvmod-cookie-4.0/src/tests/06-concurrent-query.vtc b/libvmod-cookie-4.0/src/tests/06-concurrent-query.vtc
deleted file mode 100644
index e4555b1..0000000
--- a/libvmod-cookie-4.0/src/tests/06-concurrent-query.vtc
+++ /dev/null
@@ -1,49 +0,0 @@
-varnishtest "Test cookie vmod concurrency"
-
-server s1 {
-       rxreq
-       sema r1 sync 2
-       expect req.url == "/s1"
-       sema r2 sync 2
-       txresp
-} -start
-
-server s2 {
-       rxreq
-       expect req.url == "/s2"
-       sema r2 sync 2
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_recv {
-		cookie.parse(req.http.cookie);
-
-		if (req.url == "/s1") {
-			set req.backend_hint = s1;
-		}
-		else {
-			set req.backend_hint = s2;
-		}
-	}
-	sub vcl_deliver {
-		set resp.http.x-val = cookie.get("a");
-	}
-} -start
-
-client c1 {
-	txreq -url "/s1" -hdr "Cookie: a=bar"
-	rxresp
-	expect resp.http.x-val == "bar"
-} -start
-
-client c2 {
-       sema r1 sync 2
-       txreq -url "/s2" -hdr "Cookie: a=foo"
-       rxresp
-       expect resp.http.x-val == "foo"
-} -run
-
-
diff --git a/libvmod-cookie-4.0/src/tests/07-isset.vtc b/libvmod-cookie-4.0/src/tests/07-isset.vtc
deleted file mode 100644
index c81792b..0000000
--- a/libvmod-cookie-4.0/src/tests/07-isset.vtc
+++ /dev/null
@@ -1,27 +0,0 @@
-varnishtest "Test cookie.isset()"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_recv {
-		cookie.set("cookie1", "cookie1value");
-	}
-	sub vcl_deliver {
-		set resp.http.does = cookie.isset("cookie1");
-		set resp.http.does-not = cookie.isset("non-existent");
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.http.does == "true"
-	expect resp.http.does-not == "false"
-}
-
-client c1 -run
diff --git a/libvmod-cookie-4.0/src/tests/08-overflow.vtc b/libvmod-cookie-4.0/src/tests/08-overflow.vtc
deleted file mode 100644
index edcc8c7..0000000
--- a/libvmod-cookie-4.0/src/tests/08-overflow.vtc
+++ /dev/null
@@ -1,36 +0,0 @@
-varnishtest "Test cookie vmod"
-
-server s1 {
-       rxreq
-       txresp
-
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_recv {
-	}
-	sub vcl_deliver {
-		cookie.parse(req.http.cookie);
-		set resp.http.cookiestring = cookie.get_string();
-		set resp.http.cookie1 = cookie.isset("cookie1");
-	}
-} -start
-
-client c1 {
-	# Insanely long cookie name. Should be ignored.
-	txreq -url "/" -hdr "Cookie: phohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1j=cookievalue"
-	rxresp
-	expect resp.http.cookiestring == ""
-
-	# Insane 6KB cookie value.
-	txreq -url "/" -hdr "Cookie: cookie1=foobarbazfoobarbazphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1j;"
-	rxresp
-	# should not be set, since the cookie is overflowing 4KB.
-	expect resp.http.cookie1 == "false"
-}
-
-client c1 -run
diff --git a/libvmod-cookie-4.0/src/tests/10-parser.vtc b/libvmod-cookie-4.0/src/tests/10-parser.vtc
deleted file mode 100644
index e7fc954..0000000
--- a/libvmod-cookie-4.0/src/tests/10-parser.vtc
+++ /dev/null
@@ -1,47 +0,0 @@
-varnishtest "Test cookie parser"
-
-server s1 -repeat 5 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-	sub vcl_deliver {
- 		cookie.parse(req.http.cookie);
-		set resp.http.X-foo = cookie.get_string();
-	}
-
-} -start
-
-client c1 {
-	txreq -hdr "Cookie: csrftoken=0e0c3616e41a6bd561b72b7f5fc1128f; sessionid=a707505310ddf259bb290d3ca63fc560"
-	rxresp
-	expect resp.http.X-foo == "csrftoken=0e0c3616e41a6bd561b72b7f5fc1128f; sessionid=a707505310ddf259bb290d3ca63fc560;"
-} -run
-
-client c2 {
-	txreq -hdr "Cookie: __utmc=253898641; __utma=253898641.654622101.1372224466.1372224466.1372224466.1; __utmb=253898641.44.10.1372224466; __utmz=253898641.1372224466.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=index%2Bof%2Bccnp%2Bpdf"
-	rxresp
-	expect resp.http.X-foo == "__utmc=253898641; __utma=253898641.654622101.1372224466.1372224466.1372224466.1; __utmb=253898641.44.10.1372224466; __utmz=253898641.1372224466.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=index%2Bof%2Bccnp%2Bpdf;"
-} -run
-
-client c3 {
-	txreq -hdr "Cookie: "
-	rxresp
-	expect resp.http.X-foo == ""
-} -run
-
-# An empty cookie is a non-existing cookie for us.
-client c4 {
-	txreq -hdr "Cookie: emptycookie="
-	rxresp
-	expect resp.http.X-foo == ""
-} -run
-
-# A single cookie should also work.
-client c5 {
-	txreq -hdr "Cookie: cookie1=foobarbaz"
-	rxresp
-	expect resp.http.X-foo == "cookie1=foobarbaz;"
-} -run
diff --git a/libvmod-cookie-4.0/src/tests/30-format_1123.vtc b/libvmod-cookie-4.0/src/tests/30-format_1123.vtc
deleted file mode 100644
index b3f52d0..0000000
--- a/libvmod-cookie-4.0/src/tests/30-format_1123.vtc
+++ /dev/null
@@ -1,22 +0,0 @@
-varnishtest "Test rfc1123 string formatting function"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-
-varnish v1 -vcl+backend {
-	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
-
-	sub vcl_deliver {
-		set resp.http.x-date = cookie.format_rfc1123(now, 1d);
-	}
-} -start
-
-
-client c1 {
-       txreq -url "/"
-       rxresp
-       expect resp.http.date != <undef>
-} -run
diff --git a/libvmod-cookie-4.0/src/vmod_cookie.c b/libvmod-cookie-4.0/src/vmod_cookie.c
deleted file mode 100644
index 61ea7f9..0000000
--- a/libvmod-cookie-4.0/src/vmod_cookie.c
+++ /dev/null
@@ -1,342 +0,0 @@
-/*
-Cookie VMOD for Varnish.
-
-Simplifies handling of the Cookie request header.
-
-Author: Lasse Karstensen <lasse@varnish-software.com>, July 2012.
-*/
-
-#include <stdlib.h>
-#include <stdio.h>
-
-#include "vrt.h"
-#include "vqueue.h"
-#include "cache/cache.h"
-
-#include "vcc_if.h"
-
-#define MAX_COOKIE_NAME 1024   /* name maxsize */
-#define MAX_COOKIE_STRING 4096 /* cookie string maxlength */
-
-struct cookie {
-	char *name;
-	char *value;
-	VTAILQ_ENTRY(cookie) list;
-};
-
-struct whitelist {
-	char name[MAX_COOKIE_NAME];
-	VTAILQ_ENTRY(whitelist) list;
-};
-
-struct vmod_cookie {
-	unsigned magic;
-#define VMOD_COOKIE_MAGIC 0x4EE5FB2E
-	unsigned xid;
-	VTAILQ_HEAD(, cookie) cookielist;
-};
-
-static pthread_key_t key;
-static pthread_once_t key_is_initialized = PTHREAD_ONCE_INIT;
-
-static void
-mkkey(void) {
-	AZ(pthread_key_create(&key, free));
-}
-
-int
-init_function(struct vmod_priv *priv, const struct VCL_conf *conf) {
-	pthread_once(&key_is_initialized, mkkey);
-	return (0);
-}
-
-static void
-cobj_clear(struct vmod_cookie *c) {
-	c->magic = VMOD_COOKIE_MAGIC;
-	VTAILQ_INIT(&c->cookielist);
-	c->xid = 0;
-}
-
-static struct vmod_cookie *
-cobj_get(const struct vrt_ctx *ctx) {
-	struct vmod_cookie *vcp = pthread_getspecific(key);
-
-    /*
-     * SORIN: don't use req->sp->vxid because it's not reliable (repeated values).
-     * Use the log wid instead (the "2" in "*   << Request  >> 2" in varnishlog).
-     */
-
-    if (!vcp) {
-		vcp = malloc(sizeof *vcp);
-		AN(vcp);
-		cobj_clear(vcp);
-		vcp->xid = ctx->req->vsl[0].wid;
-		AZ(pthread_setspecific(key, vcp));
-        //VSLb(ctx->vsl, SLT_Debug, "cookie: new XID %u", vcp->xid);
-	}
-
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	if (vcp->xid != ctx->req->vsl[0].wid) {
-        //VSLb(ctx->vsl, SLT_Debug, "cookie: reusing entry for XID %u; new XID %u",
-        //     vcp->xid, ctx->req->vsl[0].wid);
-		// Reuse previously allocated storage
-		cobj_clear(vcp);
-		vcp->xid = ctx->req->vsl[0].wid;
-	}
-
-	return (vcp);
-}
-
-VCL_VOID
-vmod_parse(const struct vrt_ctx *ctx, VCL_STRING cookieheader) {
-	struct vmod_cookie *vcp = cobj_get(ctx);
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	char tokendata[MAX_COOKIE_STRING];
-	char *token, *tokstate, *value, *sepindex, *dataptr;
-
-	int i = 0;
-
-    //VSLb(ctx->vsl, SLT_Debug, "cookie: parse for XID %u", ctx->req->vsl[0].wid);
-    //VSL_Flush(ctx->vsl, 0);
-
-    /* If called twice during the same request, clean out old state */
-	vmod_clean(ctx);
-
-	VSLb(ctx->vsl, SLT_Debug, "cookie: cookie string is %lu bytes.",
-         cookieheader ? strlen(cookieheader) : 0);
-
-	if (cookieheader == NULL || strlen(cookieheader) == 0) {
-		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: nothing to parse");
-		return;
-	}
-
-	if (strlen(cookieheader) >= MAX_COOKIE_STRING) {
-		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: cookie string overflowed, abort");
-		return;
-	}
-
-	/* strtok modifies source, fewer surprises. */
-	strncpy(tokendata, cookieheader, sizeof(tokendata));
-	dataptr = tokendata;
-
-	while (1) {
-		token = strtok_r(dataptr, ";", &tokstate);
-		dataptr = NULL; /* strtok() wants NULL on subsequent calls. */
-
-		if (token == NULL)
-		    break;
-
-		while (token[0] == ' ')
-		    token++;
-
-		sepindex = strchr(token, '=');
-		if (sepindex == NULL) {
-			/* No delimiter, this cookie is invalid. Next! */
-			continue;
-		}
-		value = sepindex + 1;
-		*sepindex = '\0';
-
-		VSLb(ctx->vsl, SLT_Debug, "value length is %lu.", strlen(value));
-		vmod_set(ctx, token, value);
-		i++;
-	}
-	VSLb(ctx->vsl, SLT_VCL_Log, "cookie: parsed %i cookies.", i);
-}
-
-
-VCL_VOID
-vmod_set(const struct vrt_ctx *ctx, VCL_STRING name, VCL_STRING value) {
-	struct vmod_cookie *vcp = cobj_get(ctx);
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	AN(name);
-	AN(value);
-
-	/* Empty cookies should be ignored. */
-	if (strlen(name) == 0 || strlen(value) == 0) {
-		return;
-	}
-
-	if (strlen(name) + 1 >= MAX_COOKIE_NAME) {
-		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: cookie string overflowed");
-		return;
-	}
-
-	struct cookie *cookie;
-	VTAILQ_FOREACH(cookie, &vcp->cookielist, list) {
-		if (strcmp(cookie->name, name) == 0) {
-			cookie->value = WS_Printf(ctx->ws, "%s", value);
-			return;
-		}
-	}
-
-	struct cookie *newcookie = (struct cookie *)WS_Alloc(ctx->ws, sizeof(struct cookie));
-	if (newcookie == NULL) {
-		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: unable to get storage for cookie");
-		return;
-	}
-	newcookie->name = WS_Printf(ctx->ws, "%s", name);
-	newcookie->value = WS_Printf(ctx->ws, "%s", value);
-
-	VTAILQ_INSERT_TAIL(&vcp->cookielist, newcookie, list);
-}
-
-VCL_BOOL
-vmod_isset(const struct vrt_ctx *ctx, const char *name) {
-	struct vmod_cookie *vcp = cobj_get(ctx);
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	struct cookie *cookie;
-	VTAILQ_FOREACH(cookie, &vcp->cookielist, list) {
-		if (strcmp(cookie->name, name) == 0) {
-			return 1;
-		}
-	}
-	return 0;
-}
-
-VCL_STRING
-vmod_get(const struct vrt_ctx *ctx, VCL_STRING name) {
-	struct vmod_cookie *vcp = cobj_get(ctx);
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	struct cookie *cookie;
-	VTAILQ_FOREACH(cookie, &vcp->cookielist, list) {
-		if (strcmp(cookie->name, name) == 0) {
-			return (cookie->value);
-		}
-	}
-	return (NULL);
-}
-
-
-VCL_VOID
-vmod_delete(const struct vrt_ctx *ctx, VCL_STRING name) {
-	struct vmod_cookie *vcp = cobj_get(ctx);
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	struct cookie *cookie;
-	VTAILQ_FOREACH(cookie, &vcp->cookielist, list) {
-		if (strcmp(cookie->name, name) == 0) {
-			VTAILQ_REMOVE(&vcp->cookielist, cookie, list);
-			/* No way to clean up storage, let ws reclaim do it. */
-			break;
-		}
-	}
-}
-
-VCL_VOID
-vmod_clean(const struct vrt_ctx *ctx) {
-	struct vmod_cookie *vcp = cobj_get(ctx);
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	struct cookie *cookie, *c_safe;
-	VTAILQ_FOREACH_SAFE(cookie, &vcp->cookielist, list, c_safe) {
-		VTAILQ_REMOVE(&vcp->cookielist, cookie, list);
-	}
-}
-
-static VCL_VOID
-_filter_except_or_only(const struct vrt_ctx *ctx, VCL_STRING whitelist_s, VCL_BOOL except) {
-	char buf[MAX_COOKIE_STRING];
-	struct cookie *cookieptr;
-	char *tokptr, *saveptr;
-	int whitelisted = 0;
-	struct vmod_cookie *vcp = cobj_get(ctx);
-	struct whitelist *whentry;
-
-	VTAILQ_HEAD(, whitelist) whitelist_head;
-	VTAILQ_INIT(&whitelist_head);
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	strcpy(buf, whitelist_s);
-	tokptr = strtok_r(buf, ",", &saveptr);
-	if (!tokptr) return;
-
-	/* Parse the supplied whitelist. */
-	while (1) {
-		whentry = malloc(sizeof(struct whitelist));
-		AN(whentry);
-		strcpy(whentry->name, tokptr);
-		VTAILQ_INSERT_TAIL(&whitelist_head, whentry, list);
-		tokptr = strtok_r(NULL, ",", &saveptr);
-		if (!tokptr) break;
-	}
-
-	/* Filter existing cookies that isn't in the whitelist. */
-	VTAILQ_FOREACH(cookieptr, &vcp->cookielist, list) {
-		whitelisted = 0;
-		VTAILQ_FOREACH(whentry, &whitelist_head, list) {
-			if (strlen(cookieptr->name) == strlen(whentry->name) &&
-			    strcmp(cookieptr->name, whentry->name) == 0) {
-				whitelisted = 1;
-				break;
-			}
-		}
-		if (except ^ whitelisted) {
-			VTAILQ_REMOVE(&vcp->cookielist, cookieptr, list);
-		}
-	}
-
-	VTAILQ_FOREACH(whentry, &whitelist_head, list) {
-		VTAILQ_REMOVE(&whitelist_head, whentry, list);
-		free(whentry);
-	}
-}
-
-
-VCL_VOID
-vmod_filter_except(const struct vrt_ctx *ctx, VCL_STRING whitelist_s) {
-    _filter_except_or_only(ctx, whitelist_s, 1);
-}
-
-
-VCL_VOID
-vmod_filter_only(const struct vrt_ctx *ctx, VCL_STRING whitelist_s) {
-    _filter_except_or_only(ctx, whitelist_s, 0);
-}
-
-
-VCL_STRING
-vmod_get_string(const struct vrt_ctx *ctx) {
-	struct cookie *curr;
-	struct vsb *output;
-	unsigned v, u;
-	char *p;
-	struct vmod_cookie *vcp = cobj_get(ctx);
-	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
-
-	output = VSB_new_auto();
-	AN(output);
-
-	VTAILQ_FOREACH(curr, &vcp->cookielist, list) {
-		VSB_printf(output, "%s=%s; ", curr->name, curr->value);
-	}
-	VSB_trim(output);
-	VSB_finish(output);
-	v = 1 + VSB_len(output);
-
-	u = WS_Reserve(ctx->ws, 0);
-	p = ctx->ws->f;
-	strcpy(p, VSB_data(output));
-
-	VSB_delete(output);
-
-	if (v > u) {
-		WS_Release(ctx->ws, 0);
-		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: Workspace overflowed");
-		return (NULL);
-	}
-	WS_Release(ctx->ws, v);
-	return (p);
-}
-
-
-VCL_STRING
-vmod_format_rfc1123(const struct vrt_ctx *ctx, VCL_TIME ts, VCL_DURATION duration) {
-        return VRT_TIME_string(ctx, ts + duration);
-}
-
diff --git a/libvmod-cookie-4.0/src/vmod_cookie.vcc b/libvmod-cookie-4.0/src/vmod_cookie.vcc
deleted file mode 100644
index 567647c..0000000
--- a/libvmod-cookie-4.0/src/vmod_cookie.vcc
+++ /dev/null
@@ -1,12 +0,0 @@
-$Module cookie 3 Varnish Cookie Module
-$Init init_function
-$Function VOID parse(STRING)
-$Function VOID clean()
-$Function VOID set(STRING, STRING)
-$Function STRING get(STRING)
-$Function BOOL isset(STRING)
-$Function VOID delete(STRING)
-$Function VOID filter_except(STRING)
-$Function VOID filter_only(STRING)
-$Function STRING get_string()
-$Function STRING format_rfc1123(TIME, DURATION)
diff --git a/libvmod-cookie-4.0/vmod-cookie.spec b/libvmod-cookie-4.0/vmod-cookie.spec
deleted file mode 100644
index 76a2c00..0000000
--- a/libvmod-cookie-4.0/vmod-cookie.spec
+++ /dev/null
@@ -1,46 +0,0 @@
-Summary: Cookie VMOD for Varnish
-Name: vmod-cookie
-Version: 0.1
-Release: 2%{?dist}
-License: BSD
-Group: System Environment/Daemons
-Source0: libvmod-cookie.tar.gz
-BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
-Requires: varnish >= 4.0.2
-BuildRequires: make
-BuildRequires: python-docutils
-BuildRequires: varnish >= 4.0.2
-BuildRequires: varnish-libs-devel >= 4.0.2
-
-
-%description
-Cookie VMOD for Varnish.
-
-%prep
-%setup -n libvmod-cookie-trunk
-
-%build
-%configure --prefix=/usr
-make
-make check
-
-%install
-make install DESTDIR=%{buildroot}
-mv %{buildroot}/usr/share/doc/lib%{name} %{buildroot}/usr/share/doc/%{name}
-
-%clean
-rm -rf %{buildroot}
-
-%files
-%defattr(-,root,root,-)
-%{_libdir}/varnis*/vmods/
-%doc /usr/share/doc/%{name}/*
-%{_mandir}/man?/*
-
-%changelog
-* Wed Mar  5 2014 Lasse Karstensen <lkarsten@varnish-software.com> - 0.1-0.20140305
-- Updated description to work better with Redhat Satellite.
-
-* Tue Nov 14 2012 Lasse Karstensen <lasse@varnish-software.com> - 0.1-0.20121114
-- Initial version.
-
diff --git a/libvmod-header-4.0/.gitignore b/libvmod-header-4.0/.gitignore
deleted file mode 100644
index 721478a..0000000
--- a/libvmod-header-4.0/.gitignore
+++ /dev/null
@@ -1,34 +0,0 @@
-Makefile
-Makefile.in
-aclocal.m4
-autom4te.cache/
-config.guess
-config.h
-config.h.in
-config.log
-config.status
-config.sub
-configure
-depcomp
-install-sh
-libtool
-ltmain.sh
-m4/libtool.m4
-m4/ltoptions.m4
-m4/ltsugar.m4
-m4/ltversion.m4
-m4/lt~obsolete.m4
-missing
-src/.deps/
-src/.libs/
-src/Makefile
-src/Makefile.in
-src/libvmod_header.la
-src/vcc_if.c
-src/vcc_if.h
-src/vcc_if.lo
-src/vcc_if.o
-src/vmod_header.lo
-src/vmod_header.o
-stamp-h1
-vmod_header.3
diff --git a/libvmod-header-4.0/LICENSE b/libvmod-header-4.0/LICENSE
deleted file mode 100644
index 56cb50b..0000000
--- a/libvmod-header-4.0/LICENSE
+++ /dev/null
@@ -1,23 +0,0 @@
-Copyright (c) 2011 Varnish Software AS
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions
-are met:
-1. Redistributions of source code must retain the above copyright
-   notice, this list of conditions and the following disclaimer.
-2. Redistributions in binary form must reproduce the above copyright
-   notice, this list of conditions and the following disclaimer in the
-   documentation and/or other materials provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-SUCH DAMAGE.
diff --git a/libvmod-header-4.0/Makefile.am b/libvmod-header-4.0/Makefile.am
deleted file mode 100644
index 5387394..0000000
--- a/libvmod-header-4.0/Makefile.am
+++ /dev/null
@@ -1,21 +0,0 @@
-ACLOCAL_AMFLAGS = -I m4
-
-SUBDIRS = src
-
-dist_man_MANS = vmod_header.3
-DISTCHECK_CONFIGURE_FLAGS = \
-	VMOD_DIR='$${libdir}/varnish/vmods'
-
-EXTRA_DIST = README.rst LICENSE vmod-header.spec debian
-
-MAINTAINERCLEANFILES = $(dist_man_MANS)
-
-vmod_header.3: README.rst
-if HAVE_RST2MAN
-	${RST2MAN} README.rst $@
-else
-	@echo "========================================"
-	@echo "You need rst2man installed to make dist"
-	@echo "========================================"
-	@false
-endif
diff --git a/libvmod-header-4.0/README.rst b/libvmod-header-4.0/README.rst
deleted file mode 100644
index 1e3cf94..0000000
--- a/libvmod-header-4.0/README.rst
+++ /dev/null
@@ -1,176 +0,0 @@
-===========
-vmod_header
-===========
-
----------------------
-Varnish Header Module
----------------------
-
-:Manual section: 3
-:Author: Kristian Lyngstøl
-:Date: 2011-08-12
-:Version: 0.3
-
-SYNOPSIS
-========
-
-::
-
-        import header;
-
-        header.append(<header>, <content>)
-        header.get(<header>, <regular expression>)
-        header.remove(<header>, <regular expression>)
-        header.copy(<source header>, <destination header>)
-        header.version()
-
-DESCRIPTION
-===========
-
-Varnish Module (vmod) for manipulation of duplicated headers (for instance
-multiple set-cookie headers).
-
-FUNCTIONS
-=========
-
-Example VCL::
-
-	backend foo { ... };
-
-	import header;
-
-	sub vcl_fetch {
-		header.append(beresp.http.Set-Cookie,"foo=bar");
-                header.remove(beresp.http.Set-Cookie,"dontneedthiscookie");
-	}
-
-
-append
-------
-
-Prototype
-        header.append(<header>, <content>)
-Returns
-        void
-Description
-        Append lets you add an extra occurrence of an existing header.
-Example
-        ``header.append(beresp.http.Set-Cookie,"foo=bar")``
-
-get
----
-
-Prototype
-        header.get(<header>, <regular expression>)
-Returns
-        String
-Description
-        Get fetches the value of the first `header` that matches the given
-        regular expression.
-Example
-        ``set beresp.http.xusr = header.get(beresp.http.set-cookie,"user=");``
-
-remove
-------
-
-Prototype
-        header.remove(<header>, <regular expression>)
-Returns
-        void
-Description
-        remove() removes all occurences of `header` that matches the given
-        regular expression. The example is a white-list of "funcookie=".
-Example
-        ``header.remove(beresp.http.set-cookie,"^(?!(funcookie=))");``
-
-copy
-----
-
-Prototype
-        header.copy(<source header>, <destination header>)
-Returns
-        void
-Description
-        Copies all of the source headers to a new header.
-Example
-        ``header.copy(beresp.http.set-cookie, beresp.http.x-old-cookie);``
-
-version
--------
-
-Prototype
-        header.version()
-Returns
-        string
-Description
-        Returns the string constant version-number of the header vmod.
-Example
-        ``set resp.http.X-header-version = header.version();``
-
-
-INSTALLATION
-============
-
-Installation requires the Varnish source tree (only the source matching the
-binary installation).
-
-1. `./autogen.sh`  (for git-installation)
-2. `./configure VARNISHSRC=/path/to/your/varnish/source/varnish-cache`
-3. `make`
-4. `make install` (may require root: sudo make install)
-5. `make check` (Optional for regression tests)
-
-VARNISHSRC is the directory of the Varnish source tree for which to
-compile your vmod. Both the VARNISHSRC and VARNISHSRC/include
-will be added to the include search paths for your module.
-
-Optionally you can also set the vmod install dir by adding VMODDIR=DIR
-(defaults to the pkg-config discovered directory from your Varnish
-installation).
-
-
-ACKNOWLEDGEMENTS
-================
-
-The development of this plugin was made possible by the sponsorship of
-Softonic, http://en.softonic.com/ .
-
-Author: Kristian Lyngstøl <kristian@varnish-software.com>, Varnish Software AS
-Skeleton by Martin Blix Grydeland <martin@varnish-software.com>, vmods are
-part of Varnish Cache 3.0 and beyond.
-
-Also thanks to: Imo Klabun and Anders Nordby for bug reports.
-
-HISTORY
-=======
-
-Version 0.1: Initial version, somewhat ambiguous where it starts and ends.
-
-Version 0.2: Bug fixes for string removal
-
-Version 0.3: Bug fixes for get/remove, add version()
-
-BUGS
-====
-
-You can't use dynamic regular expressions, which also holds true for normal
-regular expressions in regsub(), but VCL isn't able to warn you about this
-when it comes to vmods yet.
-
-Some overlap with varnishd exists, this will be mended as Varnish 3.0
-evolves.
-
-SEE ALSO
-========
-
-* varnishd(1)
-* vcl(7)
-* https://github.com/varnish/libvmod-header
-
-COPYRIGHT
-=========
-
-This document is licensed under the same license as the
-libvmod-header project. See LICENSE for details.
-
-* Copyright (c) 2011-2013 Varnish Software
diff --git a/libvmod-header-4.0/autogen.sh b/libvmod-header-4.0/autogen.sh
deleted file mode 100755
index 2e1fb89..0000000
--- a/libvmod-header-4.0/autogen.sh
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/bin/sh
-
-warn() {
-	echo "WARNING: $@" 1>&2
-}
-
-case `uname -s` in
-Darwin)
-	LIBTOOLIZE=glibtoolize
-	;;
-FreeBSD)
-	LIBTOOLIZE=libtoolize
-	;;
-Linux)
-	LIBTOOLIZE=libtoolize
-	;;
-SunOS)
-	LIBTOOLIZE=libtoolize
-	;;
-*)
-	warn "unrecognized platform:" `uname -s`
-	LIBTOOLIZE=libtoolize
-esac
-
-automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
-if [ -z "$automake_version" ] ; then
-	warn "unable to determine automake version"
-else
-	case $automake_version in
-		0.*|1.[0-8]|1.[0-8][.-]*)
-			warn "automake ($automake_version) detected; 1.9 or newer recommended"
-			;;
-		*)
-			;;
-	esac
-fi
-
-set -ex
-
-$LIBTOOLIZE --copy --force
-aclocal -I m4
-autoheader
-automake --add-missing --copy --foreign
-autoconf
diff --git a/libvmod-header-4.0/configure.ac b/libvmod-header-4.0/configure.ac
deleted file mode 100644
index a365212..0000000
--- a/libvmod-header-4.0/configure.ac
+++ /dev/null
@@ -1,119 +0,0 @@
-AC_PREREQ(2.64)
-AC_COPYRIGHT([Copyright (c) 2011-2014 Varnish Software AS])
-AC_INIT([libvmod-header], [0.3])
-AC_CONFIG_MACRO_DIR([m4])
-AC_CONFIG_SRCDIR(src/vmod_header.vcc)
-AC_CONFIG_HEADERS(config.h)
-
-AC_CANONICAL_SYSTEM
-AC_LANG(C)
-
-AM_INIT_AUTOMAKE([foreign])
-
-AC_GNU_SOURCE
-AC_PROG_CC
-AC_PROG_CC_STDC
-if test "x$ac_cv_prog_cc_c99" = xno; then
-	AC_MSG_ERROR([Could not find a C99 compatible compiler])
-fi
-AC_PROG_CPP
-
-AC_PROG_INSTALL
-AC_PROG_LIBTOOL
-AC_PROG_MAKE_SET
-
-# Check for rst utilities
-AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
-if test "x$RST2MAN" = "xno"; then
-	AC_MSG_WARN([rst2man not found - not building man pages])
-fi
-AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
-
-# Check for pkg-config
-PKG_PROG_PKG_CONFIG
-
-# Checks for header files.
-AC_HEADER_STDC
-AC_CHECK_HEADERS([sys/stdlib.h])
-
-# Check for python
-AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
-
-# Varnish include files tree
-VARNISH_VMOD_INCLUDES
-VARNISH_VMOD_DIR
-VARNISH_VMODTOOL
-
-AC_PATH_PROG([VARNISHTEST], [varnishtest])
-AC_PATH_PROG([VARNISHD], [varnishd], [],
-    [$PATH:$PATH:`pkg-config varnishapi --variable=sbindir`])
-
-# This corresponds to FreeBSD's WARNS level 6
-DEVELOPER_CFLAGS="-Wall -Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wshadow -Wcast-align -Wchar-subscripts -Winline -Wnested-externs -Wredundant-decls -Wformat"
-
-# Additional flags for GCC 4
-EXTRA_DEVELOPER_CFLAGS="-Wextra -Wno-missing-field-initializers -Wno-sign-compare"
-
-# --enable-developer-warnings
-AC_ARG_ENABLE(developer-warnings,
-	AS_HELP_STRING([--enable-developer-warnings],[enable strict warnings (default is NO)]),
-	CFLAGS="${CFLAGS} ${DEVELOPER_CFLAGS}")
-
-# --enable-debugging-symbols
-AC_ARG_ENABLE(debugging-symbols,
-	AS_HELP_STRING([--enable-debugging-symbols],[enable debugging symbols (default is NO)]),
-	CFLAGS="${CFLAGS} -O0 -g -fno-inline")
-
-# --enable-diagnostics
-AC_ARG_ENABLE(diagnostics,
-	AS_HELP_STRING([--enable-diagnostics],[enable run-time diagnostics (default is NO)]),
-	CFLAGS="${CFLAGS} -DDIAGNOSTICS")
-
-# --enable-extra-developer-warnings
-AC_ARG_ENABLE(extra-developer-warnings,
-	AS_HELP_STRING([--enable-extra-developer-warnings],[enable even stricter warnings (default is NO)]),
-	[],
-	[enable_extra_developer_warnings=no])
-
-if test "x$enable_stack_protector" != "xno"; then
-	save_CFLAGS="$CFLAGS"
-	CFLAGS="${CFLAGS} ${EXTRA_DEVELOPER_CFLAGS}"
-	AC_COMPILE_IFELSE(
-		[AC_LANG_PROGRAM([],[],[])],
-		[],
-		[AC_MSG_WARN([All of ${EXTRA_DEVELOPER_CFLAGS} not supported, disabling])
-		    CFLAGS="$save_CFLAGS"])
-fi
-
-# --enable-stack-protector
-AC_ARG_ENABLE(stack-protector,
-	AS_HELP_STRING([--enable-stack-protector],[enable stack protector (default is NO)]),
-	[],
-	[enable_stack_protector=no])
-
-if test "x$enable_stack_protector" != "xno"; then
-	save_CFLAGS="$CFLAGS"
-	CFLAGS="${CFLAGS} -fstack-protector-all"
-	AC_COMPILE_IFELSE(
-		[AC_LANG_PROGRAM([],[],[])],
-		[],
-		[AC_MSG_WARN([-fstack-protector not supported, disabling])
-		    CFLAGS="$save_CFLAGS"])
-fi
-
-# --enable-tests
-AC_ARG_ENABLE(tests,
-	AS_HELP_STRING([--enable-tests],[build test programs (default is NO)]))
-AM_CONDITIONAL([ENABLE_TESTS], [test x$enable_tests = xyes])
-
-# --enable-werror
-AC_ARG_ENABLE(werror,
-	AS_HELP_STRING([--enable-werror],[use -Werror (default is NO)]),
-	CFLAGS="${CFLAGS} -Werror")
-
-
-AC_CONFIG_FILES([
-	Makefile
-	src/Makefile
-])
-AC_OUTPUT
diff --git a/libvmod-header-4.0/debian/changelog b/libvmod-header-4.0/debian/changelog
deleted file mode 100644
index 4fbfc17..0000000
--- a/libvmod-header-4.0/debian/changelog
+++ /dev/null
@@ -1,5 +0,0 @@
-libvmod-header (0.3) unstable; urgency=low
-
-  * First version
-
- -- Lasse Karstensen <lasse@varnish-software.com>  Wed, 19 Sep 2012 15:03:00 +0200
diff --git a/libvmod-header-4.0/debian/compat b/libvmod-header-4.0/debian/compat
deleted file mode 100644
index 7f8f011..0000000
--- a/libvmod-header-4.0/debian/compat
+++ /dev/null
@@ -1 +0,0 @@
-7
diff --git a/libvmod-header-4.0/debian/control b/libvmod-header-4.0/debian/control
deleted file mode 100644
index a5c947e..0000000
--- a/libvmod-header-4.0/debian/control
+++ /dev/null
@@ -1,17 +0,0 @@
-Source: libvmod-header
-Section: web
-Priority: extra
-Maintainer: Varnish Software <support@varnish-software.com>
-Build-Depends: debhelper (>= 7),
- build-essential,
- pkg-config,
- python-docutils,
- varnish (>= 4.0.2),
- libvarnishapi-dev (>= 4.0.2)
-Standards-Version: 3.8.1
-Vcs-Git: git://github.com/varnish/libvmod-header.git
-
-Package: libvmod-header
-Architecture: any
-Depends: varnish (>= 4.0.2), ${misc:Depends}
-Description: header vmod for Varnish
diff --git a/libvmod-header-4.0/debian/copyright b/libvmod-header-4.0/debian/copyright
deleted file mode 100644
index 12ff29a..0000000
--- a/libvmod-header-4.0/debian/copyright
+++ /dev/null
@@ -1,29 +0,0 @@
-Copyright:
-
-    Copyright 2009-2014 Varnish Software AS
-
-License:
-
-Copyright (c) 2010-2014 Varnish Software AS
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions
-are met:
-1. Redistributions of source code must retain the above copyright
-   notice, this list of conditions and the following disclaimer.
-2. Redistributions in binary form must reproduce the above copyright
-   notice, this list of conditions and the following disclaimer in the
-   documentation and/or other materials provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-SUCH DAMAGE.
diff --git a/libvmod-header-4.0/debian/dirs b/libvmod-header-4.0/debian/dirs
deleted file mode 100644
index be2e66d..0000000
--- a/libvmod-header-4.0/debian/dirs
+++ /dev/null
@@ -1 +0,0 @@
-usr/share/doc/libvmod-header
diff --git a/libvmod-header-4.0/debian/docs b/libvmod-header-4.0/debian/docs
deleted file mode 100644
index 92bab46..0000000
--- a/libvmod-header-4.0/debian/docs
+++ /dev/null
@@ -1,2 +0,0 @@
-README.rst
-LICENSE
diff --git a/libvmod-header-4.0/debian/rules b/libvmod-header-4.0/debian/rules
deleted file mode 100755
index af8f2d0..0000000
--- a/libvmod-header-4.0/debian/rules
+++ /dev/null
@@ -1,12 +0,0 @@
-#!/usr/bin/make -f
-export DH_VERBOSE=1
-
-override_dh_gencontrol:
-	if [ -n "$$DEBIAN_OVERRIDE_BINARY_VERSION" ]; then \
-		dh_gencontrol -- -v$$DEBIAN_OVERRIDE_BINARY_VERSION; \
-	else \
-		dh_gencontrol ; \
-	fi
-
-%:
-	dh $@
diff --git a/libvmod-header-4.0/m4/PLACEHOLDER b/libvmod-header-4.0/m4/PLACEHOLDER
deleted file mode 100644
index e69de29..0000000
diff --git a/libvmod-header-4.0/m4/varnish.m4 b/libvmod-header-4.0/m4/varnish.m4
deleted file mode 100644
index 8339cb0..0000000
--- a/libvmod-header-4.0/m4/varnish.m4
+++ /dev/null
@@ -1,100 +0,0 @@
-# varnish.m4 - Macros to locate Varnish header files.            -*- Autoconf -*-
-# serial 3 (varnish-4.0)
-
-# Copyright (c) 2013-2015 Varnish Software AS
-# All rights reserved.
-#
-# Author: Tollef Fog Heen <tfheen@varnish-software.com>
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 1. Redistributions of source code must retain the above copyright
-#    notice, this list of conditions and the following disclaimer.
-# 2. Redistributions in binary form must reproduce the above copyright
-#    notice, this list of conditions and the following disclaimer in the
-#    documentation and/or other materials provided with the distribution.
-#
-# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
-# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-# SUCH DAMAGE.
-#
-
-# For compatibility with autoconf < 2.63b
-m4_ifndef([AS_VAR_COPY],
-  [m4_define([AS_VAR_COPY],
-     [AS_LITERAL_IF([$1[]$2], [$1=$$2], [eval $1=\$$2])])]) 
-
-# VARNISH_VMOD_INCLUDE_DIR([])
-# ----------------------------
-
-AC_DEFUN([VARNISH_VMOD_INCLUDES],
-[
-m4_pattern_forbid([^_?VARNISH[A-Z_]+$])
-m4_pattern_allow([^VARNISH_VMOD(_INCLUDE_DIR|TOOL)$])
-# Check for pkg-config
-PKG_CHECK_EXISTS([varnishapi],[],[
-	if test -n "$PKG_CONFIG"; then
-		AC_MSG_FAILURE(
-[The pkg-config script could not be found or is too old.  Make sure it
-is in your PATH or set the PKG_CONFIG environment variable to the full
-path to pkg-config.
-
-To get pkg-config, see <http://pkg-config.freedesktop.org/>.])
-	else
-		AC_MSG_FAILURE(
-[pkg-config was unable to locate the varnishapi configuration data.
-
-Please check config.log or adjust the PKG_CONFIG_PATH environment
-variable if you installed software in a non-standard prefix.])
-	fi
-])
-
-VARNISH_PKG_GET_VAR([VAPI_INCLUDE_DIR], [pkgincludedir])
-_CPPFLAGS="$CPPFLAGS"
-VMOD_INCLUDES="-I$VAPI_INCLUDE_DIR"
-CPPFLAGS="$VMOD_INCLUDES $CPPFLAGS"
-AC_CHECK_HEADERS([vsha256.h cache/cache.h])
-CPPFLAGS="$_CPPFLAGS"
-AC_SUBST([VMOD_INCLUDES])
-])# VARNISH_VMOD_INCLUDE_DIR
-
-# VARNISH_VMOD_DIR([])
-# --------------------
-
-AC_DEFUN([VARNISH_VMOD_DIR],
-[
-VARNISH_PKG_GET_VAR([VMOD_DIR], [vmoddir])
-AC_SUBST([VMOD_DIR])
-])
-
-# VARNISH_VMODTOOL([])
-# --------------------
-
-AC_DEFUN([VARNISH_VMODTOOL],
-[
-VARNISH_PKG_GET_VAR([VMODTOOL], [vmodtool])
-AC_SUBST([VMODTOOL])
-])
-
-# VARNISH_PKG_GET_VAR([VARIABLE, PC_VAR_NAME])
-# -------------------------------
-
-AC_DEFUN([VARNISH_PKG_GET_VAR],
-[
-# Uses internal function for now..
-pkg_failed=no
-_PKG_CONFIG([$1], [variable=][$2], [varnishapi])
-if test "$pkg_failed" = "yes"; then
-   AC_MSG_FAILURE([$2][ not defined, too old Varnish?])
-fi
-AS_VAR_COPY([$1], [pkg_cv_][$1])
-])
diff --git a/libvmod-header-4.0/src/Makefile.am b/libvmod-header-4.0/src/Makefile.am
deleted file mode 100644
index dc31ebc..0000000
--- a/libvmod-header-4.0/src/Makefile.am
+++ /dev/null
@@ -1,30 +0,0 @@
-AM_CPPFLAGS = @VMOD_INCLUDES@
-
-vmoddir = @VMOD_DIR@
-vmod_LTLIBRARIES = libvmod_header.la
-
-libvmod_header_la_LDFLAGS = -module -export-dynamic -avoid-version
-
-libvmod_header_la_SOURCES = \
-	vcc_if.c \
-	vcc_if.h \
-	vmod_header.c
-
-vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_header.vcc
-	@VMODTOOL@ $(top_srcdir)/src/vmod_header.vcc
-
-VMOD_TESTS = $(top_srcdir)/src/tests/*.vtc
-.PHONY: $(VMOD_TESTS)
-
-$(top_srcdir)/src/tests/*.vtc:
-	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
-
-check: $(VMOD_TESTS)
-
-EXTRA_DIST = \
-	vmod_header.vcc \
-	$(VMOD_TESTS)
-
-CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h \
-	$(builddir)/vmod_header.man.rst \
-	$(builddir)/vmod_header.rst
diff --git a/libvmod-header-4.0/src/tests/append.vtc b/libvmod-header-4.0/src/tests/append.vtc
deleted file mode 100644
index 667d272..0000000
--- a/libvmod-header-4.0/src/tests/append.vtc
+++ /dev/null
@@ -1,40 +0,0 @@
-varnishtest "Header-vmod: Test appending"
-
-server s1 {
-	timeout 10
-
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "foo: 1" -hdr "foo: 2"
-	rxreq
-	expect req.url == "/bar"
-	txresp -status 200 -hdr "foo: 1" -hdr "foo: 2"
-} -start
-
-varnish v1 -vcl+backend {
-	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
-
-	sub vcl_backend_response {
-		if (bereq.url == "/foo") {
-			set beresp.http.foo = "null";
-		} elsif ( bereq.url == "/bar") {
-			header.append(beresp.http.foo, "blatti");
-		}
-		return(deliver);
-	}
-} -start
-
-client c1 {
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "null"
-} -run
-
-client c2 {
-	txreq -url "/bar"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == 1
-} -run
-
diff --git a/libvmod-header-4.0/src/tests/copy.vtc b/libvmod-header-4.0/src/tests/copy.vtc
deleted file mode 100644
index 64a6809..0000000
--- a/libvmod-header-4.0/src/tests/copy.vtc
+++ /dev/null
@@ -1,45 +0,0 @@
-
-# This assumes that:
-#  1. Append works
-#  2. The first header is the only tested in varnishtest when multiple
-#     copies are present
-
-varnishtest "Header-vmod: Test copying"
-
-server s1 {
-	timeout 10
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3"
-} -start
-
-varnish v1 -vcl+backend {
-	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
-
-	sub vcl_backend_response {
-		if (bereq.url == "/foo") {
-			header.copy(beresp.http.foo,beresp.http.bar);
-			set beresp.http.x-one = header.get(beresp.http.bar,"one");
-			set beresp.http.x-two = header.get(beresp.http.bar,"two");
-			set beresp.http.x-three = header.get(beresp.http.bar,"three");
-			set beresp.http.y-one = header.get(beresp.http.foo,"one");
-			set beresp.http.y-two = header.get(beresp.http.foo,"two");
-			set beresp.http.y-three = header.get(beresp.http.foo,"three");
-		}
-		return(deliver);
-	}
-} -start
-
-client c1 {
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.bar == "one=1"
-	expect resp.http.foo == "one=1"
-	expect resp.http.x-one == "one=1"
-	expect resp.http.x-two == "two=2"
-	expect resp.http.x-three == "three=3"
-	expect resp.http.y-one == "one=1"
-	expect resp.http.y-two == "two=2"
-	expect resp.http.y-three == "three=3"
-} -run
diff --git a/libvmod-header-4.0/src/tests/get.vtc b/libvmod-header-4.0/src/tests/get.vtc
deleted file mode 100644
index 1348036..0000000
--- a/libvmod-header-4.0/src/tests/get.vtc
+++ /dev/null
@@ -1,40 +0,0 @@
-
-varnishtest "Header-vmod: Test fetching"
-
-server s1 {
-	timeout 10
-
-	rxreq
-	expect req.url == "/"
-	txresp -status 200 -hdr "foo: sillycookie=blah" -hdr "foo: realcookie=YAI"
-	rxreq
-	expect req.url == "/two"
-	txresp -status 200 -hdr "foo: sillycookie=blah" -hdr "foo: realcookie=YAI"
-} -start
-
-varnish v1 -vcl+backend {
-	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
-
-	sub vcl_backend_response {
-		if (bereq.url == "/") {
-			set beresp.http.xusr = header.get(beresp.http.foo,"realcookie=");
-		} elsif (bereq.url == "/two") {
-			set beresp.http.xusr = header.get(beresp.http.foo,"^realcookie=");
-		}
-		return(deliver);
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.xusr == "realcookie=YAI"
-
-	txreq -url "/two"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.xusr == "realcookie=YAI"
-} -run
-
-
diff --git a/libvmod-header-4.0/src/tests/import.vtc b/libvmod-header-4.0/src/tests/import.vtc
deleted file mode 100644
index 0371be2..0000000
--- a/libvmod-header-4.0/src/tests/import.vtc
+++ /dev/null
@@ -1,20 +0,0 @@
-varnishtest "Header-vmod: Test basic import"
-
-server s1 {
-	timeout 10
-	rxreq
-	expect req.url == "/"
-	txresp -status 200 -hdr "foo: 1"
-} -start
-
-varnish v1 -vcl+backend {
-	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == 1
-} -run
-
diff --git a/libvmod-header-4.0/src/tests/keep-others.vtc b/libvmod-header-4.0/src/tests/keep-others.vtc
deleted file mode 100644
index 48a854a..0000000
--- a/libvmod-header-4.0/src/tests/keep-others.vtc
+++ /dev/null
@@ -1,48 +0,0 @@
-# Bug #1 !
-# The remove-function was removing somewhat vigorously.
-# This check ensures that other headers are kept intact.
-
-varnishtest "Header-vmod: Ensure other headers remain untouched"
-
-server s1 {
-	timeout 10
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "bar: xxx=y" -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3"
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "Content-Type: text/html" -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3"
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3" -hdr "Content-Type: text/html"
-} -start
-
-varnish v1 -vcl+backend {
-	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
-
-	sub vcl_backend_response {
-		if (bereq.url == "/foo") {
-			header.remove(beresp.http.foo,"one=1");
-		}
-
-		set beresp.uncacheable = true;
-	}
-} -start
-
-client c1 {
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "two=2"
-	expect resp.http.bar == "xxx=y"
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "two=2"
-	expect resp.http.Content-Type == "text/html"
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "two=2"
-	expect resp.http.Content-Type == "text/html"
-} -run
diff --git a/libvmod-header-4.0/src/tests/remove.vtc b/libvmod-header-4.0/src/tests/remove.vtc
deleted file mode 100644
index 66a386d..0000000
--- a/libvmod-header-4.0/src/tests/remove.vtc
+++ /dev/null
@@ -1,96 +0,0 @@
-
-varnishtest "Header-vmod: Test removing"
-
-server s1 {
-	timeout 10
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "foo: notok=1" -hdr "foo: ok2k" -hdr "foo: notok=2"
-	rxreq
-	expect req.url == "/bar"
-	txresp -status 200 -hdr "foo: notok=1" -hdr "foo: ok2k" -hdr "foo: notok=2"
-	rxreq
-	expect req.url == "/nothing"
-	txresp -status 200 -hdr "foo: notok=1" -hdr "foo: ok2k" -hdr "foo: notok=2"
-	rxreq
-	expect req.url == "/blatti1"
-	txresp -status 200 -hdr "foo: notok=1" -hdr "foo:notok=3" -hdr "foo: ok2k" -hdr "foo: notok=2"
-	rxreq
-	expect req.url == "/blatti2"
-	txresp -status 200 -hdr "foo: notok=1" -hdr "foo: ok2k" -hdr "foo:notok=3" -hdr "foo: notok=2"
-	rxreq
-	expect req.url == "/blatti3"
-	txresp -status 200 -hdr "set-cookie: analytics=1" -hdr "set-cookie: funcookie=ok2k" -hdr "set-cookie: uglycookie=3" -hdr "set-cookie: notok=2"
-	
-} -start
-
-varnish v1 -vcl+backend {
-	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
-
-	sub vcl_backend_response {
-		if (bereq.url == "/foo") {
-			header.remove(beresp.http.foo,"notok");
-		}
-		if (bereq.url == "/nothing") {
-			header.remove(beresp.http.foo,".");
-		}
-		if (bereq.url == "/blatti1") {
-			header.remove(beresp.http.foo,"^ no.ok=.$");
-		}
-		if (bereq.url == "/blatti2") {
-			header.remove(beresp.http.foo,"^no.ok=.$");
-		}
-		if (bereq.url == "/blatti3") {
-			header.remove(beresp.http.set-cookie,"^(?!(funcookie=))");
-		}
-		if (beresp.http.foo) {
-			set beresp.http.foo-exists = "yes";
-		} else {
-			set beresp.http.foo-exists = "no";
-		}
-
-		return(deliver);
-	}
-} -start
-
-client c1 {
-	# Remove one, "notok". Assumes ok2k (second in line) is tested next
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "ok2k"
-
-	# Remove nothing
-	txreq -url "/bar"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "notok=1"
-
-	# Remove everything (confusing names, huh?)
-	txreq -url "/nothing"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo-exists == "no"
-
-	# Remove with regex - fail due to whitespace in the regex
-	txreq -url "/blatti1"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo-exists == "yes"
-	expect resp.http.foo == "notok=1"
-
-	# Remove with regex - work (remove leading whitespace)
-	txreq -url "/blatti2"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo-exists == "yes"
-	expect resp.http.foo == "ok2k"
-	
-	# Remove everything except fun-cookie
-	txreq -url "/blatti3"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo-exists == "no"
-	expect resp.http.set-cookie == "funcookie=ok2k"
-} -run
-
diff --git a/libvmod-header-4.0/src/tests/some-data.vtc b/libvmod-header-4.0/src/tests/some-data.vtc
deleted file mode 100644
index 8b5fbbd..0000000
--- a/libvmod-header-4.0/src/tests/some-data.vtc
+++ /dev/null
@@ -1,51 +0,0 @@
-# Got reports of no data being sent in return after 3.0.1, this test-case
-# tries to do some simple verification, though it fails to detect the
-# problem.
-
-
-varnishtest "Header-vmod: Send some data too"
-
-server s1 {
-	timeout 10
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "bar: xxx=y" -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3" -body "Hello"
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "Content-Type: text/html" -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3" -body "Hello"
-	rxreq
-	expect req.url == "/foo"
-	txresp -status 200 -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3" -hdr "Content-Type: text/html" -body "Hello"
-} -start
-
-varnish v1 -vcl+backend {
-	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
-
-	sub vcl_backend_response {
-		if (bereq.url == "/foo") {
-			header.remove(beresp.http.foo,"one=1");
-		}
-		set beresp.uncacheable = true;
-	}
-} -start
-
-client c1 {
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "two=2"
-	expect resp.http.bar == "xxx=y"
-	expect resp.bodylen == 5
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "two=2"
-	expect resp.http.Content-Type == "text/html"
-	expect resp.bodylen == 5
-	txreq -url "/foo"
-	rxresp
-	expect resp.status == 200
-	expect resp.http.foo == "two=2"
-	expect resp.http.Content-Type == "text/html"
-	expect resp.bodylen == 5
-} -run
diff --git a/libvmod-header-4.0/src/tests/version.vtc b/libvmod-header-4.0/src/tests/version.vtc
deleted file mode 100644
index 3246604..0000000
--- a/libvmod-header-4.0/src/tests/version.vtc
+++ /dev/null
@@ -1,29 +0,0 @@
-# Somewhat oversimplified, but at least it ensures that SOMETHING works
-# (The alternative would be to automakeify this test or manually update it
-# every time there's a new version, which defeats the purpose somewhat).
-
-varnishtest "Header-vmod: Test version string"
-
-server s1 {
-	rxreq
-	expect req.url == "/"
-	txresp -status 200
-} -start
-
-varnish v1 -vcl+backend {
-	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
-
-	sub vcl_backend_response {
-		set beresp.http.x-version = header.version();
-		if (!beresp.http.x-version) {
-			set beresp.status = 500;
-		}
-		return(deliver);
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-} -run
diff --git a/libvmod-header-4.0/src/vmod_header.c b/libvmod-header-4.0/src/vmod_header.c
deleted file mode 100644
index 7ec88dd..0000000
--- a/libvmod-header-4.0/src/vmod_header.c
+++ /dev/null
@@ -1,303 +0,0 @@
-/*-
- * Copyright (c) 2011-2013 Varnish Software AS
- * All rights reserved.
- *
- * Author: Kristian Lyngstol <kristian@bohemians.org>
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-#include <stdlib.h>
-#include <pthread.h>
-
-#include "vrt.h"
-#include "cache/cache.h"
-
-#include "vcc_if.h"
-#include "config.h"
-
-/*
- * This mutex is used to avoid having two threads that initializes the same
- * regex at the same time. While it means that there's a single, global
- * lock for all libvmod-header actions dealing with regular expressions,
- * the contention only applies on the first request that calls that
- * specific function.
- */
-pthread_mutex_t header_mutex;
-
-/*
- * Initialize the regex *s on priv, if it hasn't already been done.
- * XXX: We have to recheck the condition after grabbing the lock to avoid a
- * XXX: race condition.
- */
-static void
-header_init_re(struct vmod_priv *priv, const char *s)
-{
-	if (priv->priv == NULL) {
-		assert(pthread_mutex_lock(&header_mutex) == 0);
-		if (priv->priv == NULL) {
-			VRT_re_init(&priv->priv, s);
-			priv->free = VRT_re_fini;
-		}
-		pthread_mutex_unlock(&header_mutex);
-	}
-}
-
-/*
- * Returns the right struct http * to use for a given type of header.
- *
- * FIXME: Stolen bluntly from cache_vrt.c
- */
-static struct http *
-header_vrt_selecthttp(const struct vrt_ctx *ctx, enum gethdr_e where)
-{
-	struct http *hp;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	switch (where) {
-	case HDR_REQ:
-		hp = ctx->http_req;
-		break;
-	case HDR_BEREQ:
-		hp = ctx->http_bereq;
-		break;
-	case HDR_BERESP:
-		hp = ctx->http_beresp;
-		break;
-	case HDR_RESP:
-		hp = ctx->http_resp;
-		break;
-	case HDR_OBJ:
-		hp = ctx->http_obj;
-		break;
-	default:
-		WRONG("vrt_selecthttp 'where' invalid");
-	}
-	return (hp);
-}
-
-/*
- * Returns true if the *hdr header is the one pointed to by *hh.
- *
- * FIXME: duplication from varnishd.
- */
-static int
-header_http_IsHdr(const txt *hh, const char *hdr)
-{
-	unsigned l;
-
-	Tcheck(*hh);
-	AN(hdr);
-	l = hdr[0];
-	assert(l == strlen(hdr + 1));
-	assert(hdr[l] == ':');
-	hdr++;
-	return (!strncasecmp(hdr, hh->b, l));
-}
-
-/*
- * Return true if the hp->hd[u] header matches *hdr and the regex *re
- * matches the content.
- *
- * If re is NULL, content is not tested and as long as it's the right
- * header, a match is returned.
- */
-static int
-header_http_match(const struct vrt_ctx *ctx, const struct http *hp, unsigned u, void *re, const char *hdr)
-{
-	char *start;
-	unsigned l;
-
-	assert(hdr);
-	assert(hp);
-
-	Tcheck(hp->hd[u]);
-	if (hp->hd[u].b == NULL)
-		return 0;
-
-	l = hdr[0];
-
-	if (!header_http_IsHdr(&hp->hd[u], hdr))
-		return 0;
-
-	if (re == NULL)
-		return 1;
-
-	start = hp->hd[u].b + l;
-	while (*start != '\0' && *start == ' ')
-		start++;
-
-	if (!*start)
-		return 0;
-	if (VRT_re_match(ctx, start, re))
-		return 1;
-
-	return 0;
-}
-
-/*
- * Returns the (first) header named as *hdr that also matches the regular
- * expression *re.
- */
-static unsigned
-header_http_findhdr(const struct vrt_ctx *ctx, const struct http *hp, const char *hdr, void *re)
-{
-        unsigned u;
-
-        for (u = HTTP_HDR_FIRST; u < hp->nhd; u++) {
-		if (header_http_match(ctx, hp, u, re, hdr))
-			return (u);
-        }
-        return (0);
-}
-
-/*
- * Removes all copies of the header that matches *hdr with content that
- * matches *re. Same as http_Unset(), plus regex.
- */
-static void
-header_http_Unset(const struct vrt_ctx *ctx, struct http *hp, const char *hdr, void *re)
-{
-	unsigned u, v;
-
-	for (v = u = HTTP_HDR_FIRST; u < hp->nhd; u++) {
-		if (hp->hd[u].b == NULL)
-			continue;
-		if (header_http_match(ctx, hp, u, re, hdr))
-			continue;
-		if (v != u) {
-			memcpy(&hp->hd[v], &hp->hd[u], sizeof *hp->hd);
-			memcpy(&hp->hdf[v], &hp->hdf[u], sizeof *hp->hdf);
-		}
-		v++;
-	}
-	hp->nhd = v;
-}
-
-/*
- * Copies all occurrences of *hdr to a destination header *dst_h. Uses
- * vmod_header_append(), so all copies are kept intact.
- *
- * XXX: Not sure I like the idea of iterating a list of headers while
- * XXX: adding to it. It may be correct now, but perhaps not so much in
- * XXX: the future.
- */
-static void
-header_http_cphdr(const struct vrt_ctx *ctx,
-		  const struct http *hp,
-		  const char *hdr,
-		  VCL_HEADER dst)
-{
-        unsigned u;
-	char *p;
-
-        for (u = HTTP_HDR_FIRST; u < hp->nhd; u++) {
-		if (!header_http_match(ctx, hp, u, NULL, hdr))
-			continue;
-
-		p = hp->hd[u].b + hdr[0];
-		while (*p == ' ' || *p == '\t')
-			p++;
-                vmod_append(ctx, dst, p, vrt_magic_string_end);
-        }
-}
-
-/*
- * vmod entrypoint. Sets up the header mutex.
- */
-int
-init_function(struct vmod_priv *priv __attribute__((unused)),
-	      const struct VCL_conf *conf __attribute__((unused)))
-{
-	assert(pthread_mutex_init(&header_mutex, NULL) == 0);
-	return (0);
-}
-
-VCL_VOID __match_proto__()
-vmod_append(const struct vrt_ctx *ctx, VCL_HEADER hdr, const char *fmt, ...)
-{
-	va_list ap;
-	struct http *hp;
-	const char *b;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	assert(fmt != NULL);
-	
-	hp = header_vrt_selecthttp(ctx, hdr->where);
-	va_start(ap, fmt);
-	b = VRT_String(hp->ws, hdr->what + 1, fmt, ap);
-	if (b == NULL)
-		VSLb(ctx->vsl, SLT_LostHeader, "vmod_header: %s", hdr->what + 1);
-	else
- 		http_SetHeader(hp, b);
-	va_end(ap);
-}
-
-VCL_STRING __match_proto__()
-vmod_get(const struct vrt_ctx *ctx, struct vmod_priv *priv, VCL_HEADER hdr, VCL_STRING s)
-{
-	struct http *hp;
-	unsigned u;
-	char *p;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	header_init_re(priv, s);
-	
-	hp = header_vrt_selecthttp(ctx, hdr->where);
-	u = header_http_findhdr(ctx, hp, hdr->what, priv->priv);
-	if (u == 0) {
-		return NULL;
-	}
-	p = hp->hd[u].b + hdr->what[0];
-	while (*p == ' ' || *p == '\t')
-		p++;
-	return p;
-}
-
-VCL_VOID  __match_proto__()
-vmod_copy(const struct vrt_ctx *ctx, VCL_HEADER src, VCL_HEADER dst)
-{
-	struct http *src_hp;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	
-	src_hp = header_vrt_selecthttp(ctx, src->where);
-	header_http_cphdr(ctx, src_hp, src->what, dst);
-}
-
-VCL_VOID  __match_proto__()
-vmod_remove(const struct vrt_ctx *ctx, struct vmod_priv *priv, VCL_HEADER hdr, VCL_STRING s)
-{
-	struct http *hp;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	header_init_re(priv, s);
-	
-	hp = header_vrt_selecthttp(ctx, hdr->where);
-	header_http_Unset(ctx, hp, hdr->what, priv->priv);
-}
-
-VCL_STRING __match_proto__()
-vmod_version(const struct vrt_ctx *ctx __attribute__((unused)))
-{
-	return VERSION;
-}
diff --git a/libvmod-header-4.0/src/vmod_header.vcc b/libvmod-header-4.0/src/vmod_header.vcc
deleted file mode 100644
index e9e6054..0000000
--- a/libvmod-header-4.0/src/vmod_header.vcc
+++ /dev/null
@@ -1,7 +0,0 @@
-$Module header 3 Header VMOD for Varnish
-$Init init_function
-$Function VOID append(HEADER,STRING_LIST)
-$Function VOID remove(PRIV_CALL,HEADER,STRING)
-$Function STRING get(PRIV_CALL,HEADER,STRING)
-$Function VOID copy(HEADER,HEADER)
-$Function STRING version()
diff --git a/libvmod-header-4.0/vmod-header.spec b/libvmod-header-4.0/vmod-header.spec
deleted file mode 100644
index 3ad1fa6..0000000
--- a/libvmod-header-4.0/vmod-header.spec
+++ /dev/null
@@ -1,43 +0,0 @@
-Summary: Header VMOD for Varnish VCL
-Name: vmod-header
-Version: 0.3
-Release: 1%{?dist}
-License: BSD
-Group: System Environment/Daemons
-Source0: ./libvmod-header.tar.gz
-BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
-Requires: varnish >= 4.0.2
-BuildRequires: make
-BuildRequires: python-docutils
-BuildRequires: varnish >= 4.0.2
-BuildRequires: varnish-libs-devel >= 4.0.2
-
-%description
-libvmod-header
-
-%prep
-%setup -n libvmod-header-%{version}
-
-%build
-%configure --prefix=/usr/
-make
-make check
-
-%install
-make install DESTDIR=%{buildroot}
-mkdir -p %{buildroot}/usr/share/doc/%{name}/
-cp README.rst %{buildroot}/usr/share/doc/%{name}/
-cp LICENSE %{buildroot}/usr/share/doc/%{name}/
-
-%clean
-rm -rf %{buildroot}
-
-%files
-%defattr(-,root,root,-)
-%{_libdir}/varnis*/vmods/
-%doc /usr/share/doc/%{name}/*
-%{_mandir}/man?/*
-
-%changelog
-* Wed Oct 03 2012 Lasse Karstensen <lasse@varnish-software.com> - 0.1-0.20120918
-- Initial version.
diff --git a/libvmod-querystring-4.0/CHANGELOG b/libvmod-querystring-4.0/CHANGELOG
deleted file mode 100644
index fe001c5..0000000
--- a/libvmod-querystring-4.0/CHANGELOG
+++ /dev/null
@@ -1,12 +0,0 @@
-libvmod-querystring changelog
-=============================
-
-Changes in version 0.2 (2013-07-23)
------------------------------------
-
-* Improved documentation
-* Builds in FreeBSD thanks to Wesley Overdijk (#4)
-* Varnish 3.0.4 support
-* Varnish 4 "trunk" support
-* Conditional logging of functions calls and returns
-* RPM packaging
diff --git a/libvmod-querystring-4.0/CONTRIBUTORS b/libvmod-querystring-4.0/CONTRIBUTORS
deleted file mode 100644
index 11916a7..0000000
--- a/libvmod-querystring-4.0/CONTRIBUTORS
+++ /dev/null
@@ -1,4 +0,0 @@
-Steven Engelhardt <steven.engelhardt@morningstar.com> (through querysort)
-Lasse Karstensen <lasse@varnish-software.com>
-Wesley Overdijk <r.w.overdijk@gmail.com>
-Tobias Jakobsson <tobias@fotobias.se>
diff --git a/libvmod-querystring-4.0/INSTALL b/libvmod-querystring-4.0/INSTALL
deleted file mode 100644
index f4f183d..0000000
--- a/libvmod-querystring-4.0/INSTALL
+++ /dev/null
@@ -1,69 +0,0 @@
-Installation Instructions
-=========================
-
-Varnish
--------
-
-The source tree is based on autotools to configure the building, and does also
-have the necessary bits in place to do functional unit tests using the
-varnishtest tool.
-
-You need to download Varnish source code and build it locally. It is needed for
-varnishtest invocation. Download the appropriate Varnish 3 source tarball
-(http://repo.varnish-cache.org/source/) and extract it somewhere on your disk
-(eg. /usr/src/).
-
-Build Varnish:
-
-cd /usr/src/varnish-3.0.x/
-./autogen.sh
-./configure
-make
-
-libvmod-querystring
--------------------
-
-Once you have a Varnish build, the libvmod-querystring module can then be built:
-
-cd /path/to/git/repository
-./autogen.sh
-./configure VARNISHSRC=/usr/src/varnish-3.0.x/ [VMODDIR=`DIR`] [--disable-logging]
-make
-sudo make install
-
-`VARNISHSRC` is the directory of the Varnish source tree for which to
-compile your vmod. Both the `VARNISHSRC` and `VARNISHSRC/include`
-will be added to the include search paths for your module.
-
-Optionally you can also set the vmod install directory by adding
-`VMODDIR=DIR` (defaults to the pkg-config discovered directory from your
-Varnish installation).
-
-It is also possible to disable logging for the module, this is enabled by
-default. The module logs function calls (with arguments) and return values.
-Those logs are very valuable when following the code path of a request in the
-VCL, you could even spot unexpected result (a wrong regex for regfilter ?).
-This might be sensible for production environments since each request would
-add to overall logging load. When in doubt, you can disable it at build time.
-
-Make targets:
-
-* make - builds the vmod
-* make install - installs your vmod in `VMODDIR`
-* make check - runs the tests in `src/tests/*.vtc`
-
-RPM packages
-------------
-
-Instead of a manual installation, you can build RPM packages from the source.
-You need two source tarballs in your rpmbuild `SOURCES` directory. Download the
-appropriate Varnish 3 source tarball (http://repo.varnish-cache.org/source/) and
-put it with the libvmod-querystring tarball in the `SOURCES` directory. Since
-the 0.2 release, it is possible to make the tarball from the git repository:
-
-cd /path/to/git/repository
-./dist.sh 0.2
-mv v0.2.tar.gz /path/to/rpmbuild/SOURCES/
-cp rpm/*.patch /path/to/rpmbuild/SOURCES/
-rpmbuild -bb --define 'VARNISHVER 3.0.x' rpm/varnish-vmod-querystring.spec
-
diff --git a/libvmod-querystring-4.0/LICENSE b/libvmod-querystring-4.0/LICENSE
deleted file mode 100644
index 6d5582c..0000000
--- a/libvmod-querystring-4.0/LICENSE
+++ /dev/null
@@ -1,30 +0,0 @@
-libvmod-querystring - querystring manipulation module for Varnish
-
-Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions
-are met:
-
-1. Redistributions of source code must retain the above
-   copyright notice, this list of conditions and the following
-   disclaimer.
-2. Redistributions in binary form must reproduce the above
-   copyright notice, this list of conditions and the following
-   disclaimer in the documentation and/or other materials
-   provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-OF THE POSSIBILITY OF SUCH DAMAGE.
-
diff --git a/libvmod-querystring-4.0/Makefile.am b/libvmod-querystring-4.0/Makefile.am
deleted file mode 100644
index ed0f641..0000000
--- a/libvmod-querystring-4.0/Makefile.am
+++ /dev/null
@@ -1,54 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-ACLOCAL_AMFLAGS = -I m4
-
-SUBDIRS = src
-
-EXTRA_DIST = README.rst
-
-dist_doc_DATA = LICENSE CONTRIBUTORS CHANGELOG
-dist_man_MANS = vmod_querystring.3
-MAINTAINERCLEANFILES = $(dist_man_MANS)
-
-vmod_querystring.3: src/vmod_querystring.man.rst
-
-%.1 %.2 %.3 %.4 %.5 %.6 %.7 %.8 %.9:
-if HAVE_RST2MAN
-	${RST2MAN} $< $@
-else
-	@echo "========================================"
-	@echo "You need rst2man installed to make dist"
-	@echo "========================================"
-	@false
-endif
-
-src-dist:
-	@git archive -o $(PACKAGE)-$(VERSION)-src.tar.gz --prefix=$(PACKAGE)-$(VERSION)/ HEAD
diff --git a/libvmod-querystring-4.0/README.rst b/libvmod-querystring-4.0/README.rst
deleted file mode 100644
index 3c874de..0000000
--- a/libvmod-querystring-4.0/README.rst
+++ /dev/null
@@ -1,184 +0,0 @@
-.. libvmod-querystring - querystring manipulation module for Varnish
-
-   libvmod-querystring - querystring manipulation module for Varnish
-   
-   Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-   All rights reserved.
-   
-   Redistribution and use in source and binary forms, with or without
-   modification, are permitted provided that the following conditions
-   are met:
-   
-   1. Redistributions of source code must retain the above
-      copyright notice, this list of conditions and the following
-      disclaimer.
-   2. Redistributions in binary form must reproduce the above
-      copyright notice, this list of conditions and the following
-      disclaimer in the documentation and/or other materials
-      provided with the distribution.
-   
-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-   COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-   OF THE POSSIBILITY OF SUCH DAMAGE.
-
-================
-vmod_querystring
-================
-
---------------------------
-Varnish QueryString Module
---------------------------
-
-:Author: Dridi Boukelmoune
-:Date: 2012-06-18
-:Version: 0.2
-:Manual section: 3
-
-SYNOPSIS
-========
-
-import querystring;
-
-DESCRIPTION
-===========
-
-Varnish multipurpose vmod for URI query-string manipulation. Can be used to
-normalize for instance request URLs or Location response headers in various
-ways. It is recommended to at least clean incoming request URLs (removing empty
-parameters or query-strings), all other functions do the cleaning.
-
-FUNCTIONS
-=========
-
-clean
-------
-
-Prototype
-   STRING clean(STRING url)
-Description
-   Returns the given URI without empty parameters. The query-string is removed
-   if empty (either before or after the removal of empty parameters).
-Example
-   .. sourcecode::
-
-      set req.url = querystring.clean(req.url);
-
-remove
-------
-
-Prototype
-   STRING remove(STRING url)
-Description
-   Returns the given URI with its query-string removed
-Example
-   .. sourcecode::
-
-      set req.url = querystring.remove(req.url);
-
-sort
-----
-
-Prototype
-   STRING sort(STRING url)
-Description
-   Returns the given URI with its query-string sorted
-Example
-   .. sourcecode::
-
-      set req.url = querystring.sort(req.url);
-
-filtersep
----------
-
-Prototype
-   STRING filtersep()
-Description
-   Returns the separator needed by the filter and filter_except functions
-
-filter
-------
-
-Prototype
-   STRING filter(STRING url, STRING_LIST parameter_names)
-Description
-   Returns the given URI without the listed parameters
-Example
-   .. sourcecode::
-
-      set req.url = querystring.filter(req.url,
-        "utm_source" + querystring.filtersep() +
-        "utm_medium" + querystring.filtersep() +
-        "utm_campaign");
-
-filter_except
--------------
-
-Prototype
-   STRING filter_except(STRING url, STRING_LIST parameter_names)
-Description
-   Returns the given URI but only keeps the listed parameters
-Example
-   .. sourcecode::
-
-      set req.url = querystring.filter(req.url,
-                                       "q" + querystring.filtersep() + "p");
-
-regfilter
----------
-
-Prototype
-   STRING regfilter(STRING url, STRING parameter_names_regex)
-Description
-   Returns the given URI without the parameters matching a regular expression
-Example
-   .. sourcecode::
-
-      set req.url = querystring.regfilter(req.url, "utm\_.*");
-
-regfilter_except
-----------------
-
-Prototype
-   STRING regfilter_except(STRING url, STRING parameter_names_regex)
-Description
-   Returns the given URI but only keeps the parameters matching a regular
-   expression
-Example
-   .. sourcecode::
-
-      set req.url = querystring.regfilter_except(req.url, "^(q|p)$");
-
-EXAMPLES
-========
-
-In your VCL you could then use this vmod along the following lines::
-
-   import querystring;
-
-   sub vcl_hash {
-      # sort the URL before the request hashing
-      set req.url = querystring.sort(req.url);
-   }
-
-ACKNOWLEDGMENT
-==============
-
-The sort algorithm is a mix of Jason Mooberry's Skwurly and my own QuerySort
-with regards for the Varnish workspace memory model of the worker threads.
-
-COPYRIGHT
-=========
-
-This document is licensed under the same license as the
-libvmod-querystring project. See LICENSE for details.
-
-* Copyright (c) 2012-2014 Dridi Boukelmoune
diff --git a/libvmod-querystring-4.0/autogen.sh b/libvmod-querystring-4.0/autogen.sh
deleted file mode 100755
index 9a12ef5..0000000
--- a/libvmod-querystring-4.0/autogen.sh
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/bin/sh
-
-warn() {
-	echo "WARNING: $@" 1>&2
-}
-
-case `uname -s` in
-Darwin)
-	LIBTOOLIZE=glibtoolize
-	;;
-FreeBSD)
-	LIBTOOLIZE=libtoolize
-	;;
-Linux)
-	LIBTOOLIZE=libtoolize
-	;;
-SunOS)
-	LIBTOOLIZE=libtoolize
-	;;
-*)
-	warn "unrecognized platform:" `uname -s`
-	LIBTOOLIZE=libtoolize
-esac
-
-automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
-if [ -z "$automake_version" ] ; then
-	warn "unable to determine automake version"
-else
-	case $automake_version in
-		0.*|1.[0-8]|1.[0-8][.-]*)
-			warn "automake ($automake_version) detected; 1.9 or newer recommended"
-			;;
-		*)
-			;;
-	esac
-fi
-
-set -ex
-
-aclocal -I m4
-$LIBTOOLIZE --copy --force
-autoheader
-automake --add-missing --copy --foreign
-autoconf
diff --git a/libvmod-querystring-4.0/configure.ac b/libvmod-querystring-4.0/configure.ac
deleted file mode 100644
index d646273..0000000
--- a/libvmod-querystring-4.0/configure.ac
+++ /dev/null
@@ -1,112 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-AC_PREREQ(2.59)
-AC_COPYRIGHT([Copyright (c) 2012-2014 Dridi Boukelmoune <dridi.boukelmoune@gmail.com>])
-AC_INIT([libvmod-querystring], [0.2], [https://github.com/dridi/libvmod-querystring/issues])
-AC_CONFIG_MACRO_DIR([m4])
-AC_CONFIG_SRCDIR(src/vmod_querystring.c)
-AM_CONFIG_HEADER(config.h)
-
-AC_CANONICAL_SYSTEM
-AC_LANG(C)
-
-AM_INIT_AUTOMAKE([foreign])
-
-AC_GNU_SOURCE
-AC_PROG_CC
-AC_PROG_CC_STDC
-if test "x$ac_cv_prog_cc_c99" = xno; then
-	AC_MSG_ERROR([Could not find a C99 compatible compiler])
-fi
-AC_PROG_CPP
-
-AC_PROG_INSTALL
-AC_PROG_LIBTOOL
-AC_PROG_MAKE_SET
-
-# Check for rst utilities
-AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
-if test "x$RST2MAN" = "xno"; then
-	AC_MSG_WARN([rst2man not found - not building man pages])
-fi
-AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
-
-# Check for pkg-config
-PKG_PROG_PKG_CONFIG
-
-# Checks for header files
-AC_HEADER_STDC
-AC_CHECK_HEADERS([sys/stdlib.h])
-
-# Check for functions
-AC_CHECK_FUNCS([mempcpy])
-
-# Check for python
-AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
-
-# Conditional logging
-AC_ARG_ENABLE(
-	[logging],
-	[AS_HELP_STRING(
-		[--disable-logging],
-		[Disable VCL calls and return values logging. @<:@enabled by default@:>@]
-	)],
-	[],
-	[enable_logging=yes]
-)
-
-if test "x$enable_logging" != "xno"; then
-	AC_SUBST([DEFINE_LOGGING], [-DQS_ENABLE_LOGGING])
-fi
-
-PKG_CHECK_MODULES([libvarnishapi], [varnishapi])
-
-# Varnish include files tree
-VARNISH_VMOD_INCLUDES
-VARNISH_VMOD_DIR
-VARNISH_VMODTOOL
-
-AC_PATH_PROG([VARNISHTEST], [varnishtest])
-AC_PATH_PROG([VARNISHD], [varnishd], [],
-    [$PATH:$PATH:`pkg-config varnishapi --variable=sbindir`])
-
-Varnish_Version_MAJOR=4
-
-AC_SUBST([VARNISH_MAJOR], [$Varnish_Version_MAJOR])
-AC_SUBST([DEFINE_MAJOR], [-DVARNISH_MAJOR=$Varnish_Version_MAJOR])
-
-AC_CONFIG_FILES([
-	Makefile
-	src/Makefile
-])
-
-AC_OUTPUT
-
diff --git a/libvmod-querystring-4.0/src/Makefile.am b/libvmod-querystring-4.0/src/Makefile.am
deleted file mode 100644
index 8f3f728..0000000
--- a/libvmod-querystring-4.0/src/Makefile.am
+++ /dev/null
@@ -1,61 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-AM_CPPFLAGS = @VMOD_INCLUDES@ @DEFINE_MAJOR@ @DEFINE_LOGGING@
-
-vmoddir = @VMOD_DIR@
-vmod_LTLIBRARIES = libvmod_querystring.la
-
-libvmod_querystring_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
-
-libvmod_querystring_la_SOURCES = \
-	vcc_if.c \
-	vcc_if.h \
-	vmod_querystring.c \
-	vmod_querystring.h
-
-vcc_if.c vcc_if.h vmod_querystring.man.rst: @VMODTOOL@ $(top_srcdir)/src/vmod_querystring@VARNISH_MAJOR@.vcc ../README.rst
-	cp ../README.rst vmod_querystring.man.rst
-	@VMODTOOL@ $(top_srcdir)/src/vmod_querystring@VARNISH_MAJOR@.vcc
-
-VMOD_TESTS = tests/*.vtc
-.PHONY: $(VMOD_TESTS)
-
-$(top_srcdir)/src/tests/*.vtc:
-	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
-
-check: $(VMOD_TESTS)
-
-EXTRA_DIST = \
-	vmod_querystring.vcc \
-	$(VMOD_TESTS)
-
-CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h $(builddir)/vmod_querystring.man.rst
-
diff --git a/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
deleted file mode 100644
index e556b46..0000000
--- a/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
+++ /dev/null
@@ -1,65 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test clean without querystring vmod"
-
-server s1 {
-	rxreq
-	expect req.url == "/"
-	txresp -body "ABC\n"
-
-	rxreq
-	expect req.url == "/?"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-} -start
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?"
-	rxresp
-	expect resp.status == 200
-} -run
-
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 0
-
diff --git a/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
deleted file mode 100644
index ce6e5d5..0000000
--- a/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
+++ /dev/null
@@ -1,66 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test clean req.sql in vcl_hash"
-
-server s1 {
-	rxreq
-	expect req.url == "/"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.clean(req.url);
-	}
-} -start
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?"
-	rxresp
-	expect resp.status == 200
-} -run
-
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 1
-
diff --git a/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc b/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
deleted file mode 100644
index 0cbf891..0000000
--- a/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
+++ /dev/null
@@ -1,74 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test clean empty parameters"
-
-server s1 {
-	rxreq
-	expect req.url == "/?query"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.clean(req.url);
-	}
-} -start
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 {
-	txreq -url "/?query"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?&query"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?query&"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?&query&"
-	rxresp
-	expect resp.status == 200
-} -run
-
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 3
-
diff --git a/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc b/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
deleted file mode 100644
index 7058ee2..0000000
--- a/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
+++ /dev/null
@@ -1,70 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test clean all params (meaning all are empty)"
-
-server s1 {
-	rxreq
-	expect req.url == "/"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.clean(req.url);
-	}
-} -start
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 {
-	txreq -url "/?"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?&"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?&&"
-	rxresp
-	expect resp.status == 200
-} -run
-
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 2
-
diff --git a/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
deleted file mode 100644
index 7c6e1c3..0000000
--- a/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
+++ /dev/null
@@ -1,91 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test filter without querystring vmod"
-
-server s1 {
-	rxreq
-	expect req.url == "/article?lang=fr"
-	txresp -body "ABC\n"
-
-	rxreq
-	expect req.url == "/article?lang=fr&page=2"
-	txresp -body "DEF\n"
-
-	rxreq
-	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
-	txresp -body "ABC\n"
-
-	rxreq
-	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
-	txresp -body "DEF\n"
-} -start
-
-varnish v1 -vcl+backend {
-} -start
-
-client c1 {
-	txreq -url "/article?lang=fr"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/article?lang=fr&page=2"
-	rxresp
-	expect resp.status == 200
-}
-
-client c2 {
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 0
-
-client c2 -run
-delay .1
-
-varnish v1 -expect n_object == 4
-varnish v1 -expect cache_miss == 4
-varnish v1 -expect cache_hit == 0
-
diff --git a/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
deleted file mode 100644
index f58cfb2..0000000
--- a/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
+++ /dev/null
@@ -1,91 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test filter querystring from req.url in vcl_hash"
-
-server s1 {
-	rxreq
-	expect req.url == "/article?lang=fr"
-	txresp -body "ABC\n"
-
-	rxreq
-	expect req.url == "/article?lang=fr&page=2"
-	txresp -body "DEF\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.filter(req.url,
-			"utm_source" + querystring.filtersep() +
-			"utm_medium" + querystring.filtersep() +
-			"utm_campaign");
-	}
-} -start
-
-client c1 {
-	txreq -url "/article?lang=fr"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/article?lang=fr&page=2"
-	rxresp
-	expect resp.status == 200
-}
-
-client c2 {
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 0
-
-client c2 -run
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 2
-
diff --git a/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc b/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
deleted file mode 100644
index 3ce99ad..0000000
--- a/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
+++ /dev/null
@@ -1,66 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test filter empty parameters"
-
-server s1 {
-	rxreq
-	expect req.url == "/article?lang=fr"
-	txresp -body "ABC\n"
-	
-	rxreq
-	expect req.url == "/article?lang=fr&page=2"
-	txresp -body "DEF\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.filter(req.url,
-			"utm_source" + querystring.filtersep() +
-			"utm_medium" + querystring.filtersep() +
-			"utm_campaign");
-	}
-} -start
-
-client c1 {
-	txreq -url "/article?lang=fr&utm_source=git&&utm_campaign=filter&utm_medium=varnishtest"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2&&"
-	rxresp
-	expect resp.status == 200
-}
-
-client c1 -run
-server s1 -wait
-
diff --git a/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc b/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
deleted file mode 100644
index 84eea65..0000000
--- a/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
+++ /dev/null
@@ -1,66 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test filter all parameters"
-
-server s1 {
-	rxreq
-	expect req.url == "/"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.filter(req.url,
-			"utm_source" + querystring.filtersep() +
-			"utm_medium" + querystring.filtersep() +
-			"utm_campaign");
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/?"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/?utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
-	rxresp
-	expect resp.status == 200
-}
-
-client c1 -run
-server s1 -wait
-
diff --git a/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
deleted file mode 100644
index 752ac7c..0000000
--- a/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
+++ /dev/null
@@ -1,64 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-#
-# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-#
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test filter_except without querystring vmod"
-
-server s1 {
-	rxreq
-	expect req.url == "/search?q=query&p=1"
-	txresp
-
-	rxreq
-	expect req.url == "/search?q=query&p=1&_=timestamp"
-	txresp
-} -start
-
-varnish v1 -vcl+backend {} -start
-
-client c1 {
-	txreq -url "/search?q=query&p=1"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/search?q=query&p=1&_=timestamp"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 0
diff --git a/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
deleted file mode 100644
index f7084ec..0000000
--- a/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
+++ /dev/null
@@ -1,67 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-#
-# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-#
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test filter_except querystring from req.url in vcl_hash"
-
-server s1 {
-	rxreq
-	expect req.url == "/search?q=query&p=1"
-	txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.filter_except(req.url,
-			                  "p" + querystring.filtersep() + "q");
-	}
-} -start
-
-client c1 {
-	txreq -url "/search?q=query&p=1"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/search?q=query&p=1&_=timestamp"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 1
diff --git a/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
deleted file mode 100644
index 16622b0..0000000
--- a/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
+++ /dev/null
@@ -1,88 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test regfilter querystring from req.url in vcl_hash"
-
-server s1 {
-	rxreq
-	expect req.url == "/article?lang=fr"
-	txresp -body "ABC\n"
-	
-	rxreq
-	expect req.url == "/article?lang=fr&page=2"
-	txresp -body "DEF\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.regfilter(req.url, "utm_.*");
-	}
-} -start
-
-client c1 {
-	txreq -url "/article?lang=fr"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/article?lang=fr&page=2"
-	rxresp
-	expect resp.status == 200
-}
-
-client c2 {
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 0
-
-client c2 -run
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 2
-
diff --git a/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc b/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
deleted file mode 100644
index d9edbd4..0000000
--- a/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
+++ /dev/null
@@ -1,96 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test regfilter with bad regex"
-
-server s1 {
-	rxreq
-	expect req.url == "/article?lang=fr"
-	txresp -body "ABC\n"
-	
-	rxreq
-	expect req.url == "/article?lang=fr&page=2"
-	txresp -body "DEF\n"
-	
-	rxreq
-	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
-	txresp -body "ABC\n"
-	
-	rxreq
-	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
-	txresp -body "DEF\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.regfilter(req.url, "utm(_.*");
-	}
-} -start
-
-client c1 {
-	txreq -url "/article?lang=fr"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/article?lang=fr&page=2"
-	rxresp
-	expect resp.status == 200
-}
-
-client c2 {
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 0
-
-client c2 -run
-delay .1
-
-varnish v1 -expect n_object == 4
-varnish v1 -expect cache_miss == 4
-varnish v1 -expect cache_hit == 0
-
diff --git a/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc b/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
deleted file mode 100644
index 1359229..0000000
--- a/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
+++ /dev/null
@@ -1,63 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test regfilter empty parameters"
-
-server s1 {
-	rxreq
-	expect req.url == "/article?lang=fr"
-	txresp -body "ABC\n"
-
-	rxreq
-	expect req.url == "/article?lang=fr&page=2"
-	txresp -body "DEF\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.regfilter(req.url, "utm_.*");
-	}
-} -start
-
-client c1 {
-	txreq -url "/article?lang=fr&utm_source=git&&utm_campaign=filter&utm_medium=varnishtest"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2&&"
-	rxresp
-	expect resp.status == 200
-}
-
-client c1 -run
-server s1 -wait
-
diff --git a/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc b/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
deleted file mode 100644
index 76a188c..0000000
--- a/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
+++ /dev/null
@@ -1,63 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test regfilter all parameters"
-
-server s1 {
-	rxreq
-	expect req.url == "/"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.regfilter(req.url, "utm_.*");
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/?"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/?utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
-	rxresp
-	expect resp.status == 200
-}
-
-client c1 -run
-server s1 -wait
-
diff --git a/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc b/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
deleted file mode 100644
index 4db3480..0000000
--- a/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
+++ /dev/null
@@ -1,59 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test regfilter to allow some params only"
-
-server s1 {
-	rxreq
-	expect req.url == "/?authorized=false&allowed=false"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.regfilter(req.url, "^(?!authorized|allowed)");
-	}
-} -start
-
-client c1 {
-	txreq -url "/?authorized=false&allowed=false"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/?authorized=false&allowed=false&unknown"
-	rxresp
-	expect resp.status == 200
-}
-
-client c1 -run
-server s1 -wait
-
diff --git a/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
deleted file mode 100644
index e5dc0b6..0000000
--- a/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
+++ /dev/null
@@ -1,71 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-#
-# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-#
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test regfilter_except querystring from req.url in vcl_hash"
-
-server s1 {
-	rxreq
-	expect req.url == "/search?q=query&p=1"
-	txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.regfilter_except(req.url, "^(p|q)$");
-	}
-} -start
-
-client c1 {
-	txreq -url "/search?q=query&p=1"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/search?q=query&p=1&_=timestamp"
-	rxresp
-	expect resp.status == 200
-
-	# example given in issue #7
-	txreq -url "/search?q=query&p=1&poof"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 2
diff --git a/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
deleted file mode 100644
index f427e8c..0000000
--- a/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
+++ /dev/null
@@ -1,73 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test remove without querystring vmod"
-
-server s1 {
-	rxreq
-	expect req.url == "/"
-	txresp -body "ABC\n"
-	
-	rxreq
-	expect req.url == "/?some=noise"
-	txresp -body "ABC\n"
-	
-	rxreq
-	expect req.url == "/?noise=again"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-} -start
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/?some=noise"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?noise=again"
-	rxresp
-	expect resp.status == 200
-} -run
-
-delay .1
-
-varnish v1 -expect n_object == 3
-varnish v1 -expect cache_miss == 3
-varnish v1 -expect cache_hit == 0
-
diff --git a/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
deleted file mode 100644
index 1bc829f..0000000
--- a/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
+++ /dev/null
@@ -1,70 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test remove querystring from req.url in vcl_hash"
-
-server s1 {
-	rxreq
-	expect req.url == "/"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.remove(req.url);
-	}
-} -start
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.status == 200
-	
-	txreq -url "/?some=noise"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?noise=again"
-	rxresp
-	expect resp.status == 200
-} -run
-
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 2
-
diff --git a/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc b/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
deleted file mode 100644
index de71196..0000000
--- a/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
+++ /dev/null
@@ -1,79 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test sort without querystring vmod"
-
-server s1 {
-	rxreq
-	expect req.url == "/?b&a"
-	txresp -body "ABC\n"
-
-	rxreq
-	expect req.url == "/?a&b"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-} -start
-
-client c1 {
-	txreq -url "/?b&a"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?b&a"
-	rxresp
-	expect resp.status == 200
-}
-
-client c2 {
-	txreq -url "/?a&b"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 1
-
-client c2 -run
-delay .1
-
-varnish v1 -expect n_object == 2
-varnish v1 -expect cache_miss == 2
-varnish v1 -expect cache_hit == 1
-
diff --git a/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc b/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
deleted file mode 100644
index 23bf111..0000000
--- a/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
+++ /dev/null
@@ -1,80 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test sort req.url in vcl_hash"
-
-server s1 {
-	rxreq
-	expect req.url == "/?a&b"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.sort(req.url);
-	}
-} -start
-
-client c1 {
-	txreq -url "/?b&a"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?b&a"
-	rxresp
-	expect resp.status == 200
-}
-
-client c2 {
-	txreq -url "/?a&b"
-	rxresp
-	expect resp.status == 200
-}
-
-varnish v1 -expect n_object == 0
-varnish v1 -expect cache_miss == 0
-varnish v1 -expect cache_hit == 0
-
-client c1 -run
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 1
-
-client c2 -run
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 2
-
diff --git a/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc b/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
deleted file mode 100644
index 4997bd2..0000000
--- a/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
+++ /dev/null
@@ -1,66 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-varnishtest "Test sort req.url in vcl_hash"
-
-server s1 {
-	rxreq
-	expect req.url == "/?a&b"
-	txresp -body "ABC\n"
-} -start
-
-varnish v1 -vcl+backend {
-	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
-
-	sub vcl_hash {
-		set req.url = querystring.sort(req.url);
-	}
-} -start
-
-client c1 {
-	txreq -url "/?b&a&"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?&b&a"
-	rxresp
-	expect resp.status == 200
-
-	txreq -url "/?b&&a"
-	rxresp
-	expect resp.status == 200
-}  -run
-
-delay .1
-
-varnish v1 -expect n_object == 1
-varnish v1 -expect cache_miss == 1
-varnish v1 -expect cache_hit == 2
-
diff --git a/libvmod-querystring-4.0/src/vmod_querystring.c b/libvmod-querystring-4.0/src/vmod_querystring.c
deleted file mode 100644
index 5a16872..0000000
--- a/libvmod-querystring-4.0/src/vmod_querystring.c
+++ /dev/null
@@ -1,812 +0,0 @@
-/*
- * libvmod-querystring - querystring manipulation module for Varnish
- *
- * Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above
- *    copyright notice, this list of conditions and the following
- *    disclaimer.
- * 2. Redistributions in binary form must reproduce the above
- *    copyright notice, this list of conditions and the following
- *    disclaimer in the documentation and/or other materials
- *    provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- * OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#define _GNU_SOURCE  // required for strchrnul()
-#include <stdlib.h>
-#include <string.h>
-#include <stdarg.h>
-#include <stdbool.h>
-
-#include "vrt.h"
-#include "vre.h"
-#include "vmod_querystring.h"
-
-#include "vcc_if.h"
-
-/* End Of Query Parameter */
-#define EOQP(c) (*c == '\0' || *c == '&')
-
-/***********************************************************************/
-
-#ifndef HAVE_MEMPCPY
-
-void *mempcpy(void *dst, const void *src, size_t len)
-{
-	return (void*)(((char*)memcpy(dst, src, len)) + len);
-}
-
-#endif
-
-/***********************************************************************
- * The static functions below contain the actual implementation of the
- * module with the least possible coupling to Varnish. This helps keep a
- * single code base for all Varnish versions.
- */
-
-static const char *
-truncate_querystring(struct ws *ws, const char *uri, const char *query_string)
-{
-	int query_string_position;
-	char *truncated_uri;
-
-	query_string_position = query_string - uri;
-	truncated_uri = WS_Alloc(ws, query_string_position);
-
-	if (truncated_uri == NULL) {
-		return uri;
-	}
-
-	memcpy(truncated_uri, uri, query_string_position);
-	truncated_uri[query_string_position] = '\0';
-
-	return truncated_uri;
-}
-
-static const char *
-remove_querystring(struct ws *ws, const char *uri)
-{
-	if (uri == NULL) {
-		return NULL;
-	}
-
-	char *query_string = strchr(uri, '?');
-	if (query_string == NULL) {
-		return uri;
-	}
-
-	return truncate_querystring(ws, uri, query_string);
-}
-
-static int
-compare_params(const char* a, const char* b)
-{
-	while (*a == *b) {
-		if (EOQP(a) || EOQP(b)) {
-			return 0;
-		}
-		a++;
-		b++;
-	}
-	return *a - *b;
-}
-
-static const char *
-sort_querystring(struct ws *ws, const char *uri)
-{
-	if (uri == NULL) {
-		return NULL;
-	}
-
-	char *query_string = strchr(uri, '?');
-	if (query_string == NULL) {
-		return uri;
-	}
-
-	if (query_string[1] == '\0') {
-		return truncate_querystring(ws, uri, query_string);
-	}
-
-	/* reserve some memory */
-	char *snapshot = WS_Snapshot(ws);
-	char *sorted_uri = WS_Alloc(ws, strlen(uri) + 1);
-
-	WS_Assert(ws);
-
-	if (sorted_uri == NULL) {
-		WS_Reset(ws, snapshot);
-		return uri;
-	}
-
-	unsigned available = WS_Reserve(ws, 0);
-	struct query_param *params = (struct query_param*) ws->f;
-	struct query_param *end = params + available;
-
-	/* initialize the params array */
-	int head = 10;
-
-	if (&params[head + 1] > end) {
-		head = 0;
-	}
-
-	if (&params[head + 1] > end) {
-		WS_Release(ws, 0);
-		WS_Reset(ws, snapshot);
-		return uri;
-	}
-
-	int tail = head;
-	int last_param = head;
-
-	/* search and sort params */
-	bool sorted = true;
-	char *c = query_string + 1;
-	params[head].value = c;
-
-	for (; *c != '\0' && &params[tail+1] < end; c++) {
-		if (*c != '&') {
-			continue;
-		}
-
-		const char *current_param = c+1;
-		params[last_param].length = c - params[last_param].value;
-
-		if (head > 0 && compare_params(params[head].value, current_param) > -1) {
-			sorted = false;
-			params[--head].value = current_param;
-			last_param = head;
-			continue;
-		}
-
-		if (compare_params(params[tail].value, current_param) < 1) {
-			params[++tail].value = current_param;
-			last_param = tail;
-			continue;
-		}
-
-		sorted = false;
-
-		int i = tail++;
-		params[tail] = params[i];
-
-		int previous = i-1;
-		while (i > head && compare_params(params[previous].value, current_param) > -1) {
-			params[i--] = params[previous--];
-		}
-
-		params[i].value = current_param;
-		last_param = i;
-	}
-
-	if (sorted == true || &params[tail+1] >= end || tail - head < 1) {
-		WS_Release(ws, 0);
-		WS_Reset(ws, snapshot);
-		return uri;
-	}
-
-	params[last_param].length = c - params[last_param].value;
-
-	/* copy the url parts */
-	char *position = mempcpy(sorted_uri, uri, query_string - uri + 1);
-	int count = tail-head;
-
-	for (;count > 0; count--, ++head) {
-		if (params[head].length > 0) {
-			position = mempcpy(position, params[head].value, params[head].length);
-			*position++ = '&';
-		}
-	}
-
-	if (params[head].length > 0) {
-		position = mempcpy(position, params[head].value, params[head].length);
-	}
-	else {
-		position--;
-	}
-
-	*position = '\0';
-
-	WS_Release(ws, 0);
-	return sorted_uri;
-}
-
-static void
-append_string(char **begin, const char *end, const char *string, int length)
-{
-	if (*begin + length < end) {
-		memcpy(*begin, string, length);
-	}
-	*begin += length;
-}
-
-static bool
-is_param_cleaned(const char *param, int length, struct filter_context *context)
-{
-	return length == 0;
-}
-
-static bool
-is_param_filtered(const char *param, int length, struct filter_context *context)
-{
-	va_list aq;
-	if (length == 0) {
-		return true;
-	}
-
-	const char *p = context->params.filter.params;
-
-	va_copy(aq, context->params.filter.ap);
-	while (p != vrt_magic_string_end) {
-		if (p != NULL && strlen(p) == length && strncmp(param, p, length) == 0) {
-			return true ^ context->is_kept;
-		}
-		p = va_arg(aq, const char*);
-	}
-	va_end(aq);
-
-	return false ^ context->is_kept;
-}
-
-static bool
-is_param_filtered_csv(const char *param, int length, struct filter_context *context)
-{
-	if (length == 0) {
-		return true;
-	}
-
-	const char *p = context->params.filter.params;
-
-	while (*p) {
-        const char *end = strchrnul(p, ',');
-		if (end-p == length && strncmp(param, p, end-p) == 0) {
-			return true ^ context->is_kept;
-		}
-		p = *end ? end+1 : end;
-	}
-
-	return false ^ context->is_kept;
-}
-
-static bool
-is_param_regfiltered(const char *param, int length, struct filter_context *context)
-{
-	if (length == 0) {
-		return true;
-	}
-
-	char p[length + 1];
-
-	memcpy(p, param, length);
-	p[length] = '\0';
-
-	bool match;
-#ifdef QS_NEED_RE_CTX
-	match = (bool) VRT_re_match(context->params.regfilter.re_ctx, p,
-	                            context->params.regfilter.re);
-#else
-	match = (bool) VRT_re_match(p, context->params.regfilter.re);
-#endif
-	return match ^ context->is_kept;
-}
-
-static void *
-compile_regex(const char *regex)
-{
-	void *re;
-	const char *error;
-	int error_offset;
-
-	re = VRE_compile(regex, 0, &error, &error_offset);
-	return re;
-}
-
-static const char*
-apply_filter(struct filter_context *context)
-{
-	unsigned available = WS_Reserve(context->ws, 0);
-	char *begin = context->ws->f;
-	char *end = &begin[available];
-	const char *cursor = context->query_string;
-
-	append_string(&begin, end, context->uri, cursor - context->uri + 1);
-
-	while (*cursor != '\0' && begin < end) {
-		const char *param_position = ++cursor;
-		const char *equal_position = NULL;
-
-		while (*cursor != '\0' && *cursor != '&') {
-			if (equal_position == NULL && *cursor == '=') {
-				equal_position = cursor;
-			}
-			cursor++;
-		}
-
-		int param_name_length =
-			(equal_position ? equal_position : cursor) - param_position;
-
-		if ( ! context->is_filtered(param_position, param_name_length, context) ) {
-			append_string(&begin, end, param_position, cursor - param_position);
-			if (*cursor == '&') {
-				*begin = '&';
-				begin++;
-			}
-		}
-	}
-
-	if (begin < end) {
-		begin -= (begin[-1] == '&');
-		begin -= (begin[-1] == '?');
-		*begin = '\0';
-	}
-
-	begin++;
-
-	if (begin > end) {
-		WS_Release(context->ws, 0);
-		return context->uri;
-	}
-
-	end = begin;
-	begin = context->ws->f;
-	WS_Release(context->ws, end - begin);
-	return begin;
-}
-
-static const char *
-filter_querystring(struct filter_context *context)
-{
-	const char *uri = context->uri;
-	const char *query_string;
-	const char *filtered_uri;
-
-	if (uri == NULL) {
-		return NULL;
-	}
-
-	query_string = strchr(uri, '?');
-
-	if (query_string == NULL) {
-		return uri;
-	}
-
-	if (query_string[1] == '\0') {
-		return truncate_querystring(context->ws, uri, query_string);
-	}
-
-	if (context->type == regfilter) {
-		void *re = compile_regex(context->params.regfilter.regex);
-		if (re == NULL) {
-			return uri;
-		}
-		context->params.regfilter.re = re;
-	}
-
-	context->query_string = query_string;
-	filtered_uri = apply_filter(context);
-
-	if (context->type == regfilter) {
-		VRT_re_fini(context->params.regfilter.re);
-	}
-
-	return filtered_uri;
-}
-
-/***********************************************************************
- * Below are the functions that will actually be linked by Varnish.
- */
-
-#if VARNISH_MAJOR == 3
-
-const char *
-vmod_clean(struct sess *sp, const char *uri)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\"", uri);
-
-	context.type = clean;
-	context.ws = sp->ws;
-	context.uri = uri;
-	context.is_filtered = &is_param_cleaned;
-	context.is_kept = false;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(sp, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_remove(struct sess *sp, const char *uri)
-{
-	const char *cleaned_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\"", uri);
-
-	cleaned_uri = remove_querystring(sp->ws, uri);
-
-	QS_LOG_RETURN(sp, cleaned_uri);
-	return cleaned_uri;
-}
-
-const char *
-vmod_sort(struct sess *sp, const char *uri)
-{
-	const char *sorted_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\"", uri);
-
-	sorted_uri = sort_querystring(sp->ws, uri);
-
-	QS_LOG_RETURN(sp, sorted_uri);
-	return sorted_uri;
-}
-
-const char *
-vmod_filtersep(struct sess *sp)
-{
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	return NULL;
-}
-
-const char *
-vmod_filter(struct sess *sp, const char *uri, const char *params, ...)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\", \"%s\", ...", uri, params);
-
-	context.type = filter;
-	context.ws = sp->ws;
-	context.uri = uri;
-	context.params.filter.params = params;
-	context.is_filtered = &is_param_filtered;
-	context.is_kept = false;
-
-	va_start(context.params.filter.ap, params);
-	filtered_uri = filter_querystring(&context);
-	va_end(context.params.filter.ap);
-
-	QS_LOG_RETURN(sp, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_filter_csv(struct sess *sp, const char *uri, const char *params)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, params);
-
-	context.type = filter;
-	context.ws = sp->ws;
-	context.uri = uri;
-	context.params.filter.params = params;
-	context.is_filtered = &is_param_filtered_csv;
-	context.is_kept = false;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(sp, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_filter_except(struct sess *sp, const char *uri, const char *params, ...)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\", \"%s\", ...", uri, params);
-
-	context.type = filter;
-	context.ws = sp->ws;
-	context.uri = uri;
-	context.params.filter.params = params;
-	context.is_filtered = &is_param_filtered;
-	context.is_kept = true;
-
-	va_start(context.params.filter.ap, params);
-	filtered_uri = filter_querystring(&context);
-	va_end(context.params.filter.ap);
-
-	QS_LOG_RETURN(sp, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_filter_except_csv(struct sess *sp, const char *uri, const char *params)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, params);
-
-	context.type = filter;
-	context.ws = sp->ws;
-	context.uri = uri;
-	context.params.filter.params = params;
-	context.is_filtered = &is_param_filtered_csv;
-	context.is_kept = true;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(sp, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_regfilter(struct sess *sp, const char *uri, const char *regex)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, regex);
-
-	context.type = regfilter;
-	context.ws = sp->ws;
-	context.uri = uri;
-	context.params.regfilter.regex = regex;
-	context.params.regfilter.re_ctx = sp;
-	context.is_filtered = &is_param_regfiltered;
-	context.is_kept = false;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(sp, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_regfilter_except(struct sess *sp, const char *uri, const char *regex)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
-	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, regex);
-
-	context.type = regfilter;
-	context.ws = sp->ws;
-	context.uri = uri;
-	context.params.regfilter.regex = regex;
-	context.params.regfilter.re_ctx = sp;
-	context.is_filtered = &is_param_regfiltered;
-	context.is_kept = true;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(sp, filtered_uri);
-	return filtered_uri;
-}
-
-#endif
-
-/***********************************************************************/
-
-#if VARNISH_MAJOR == 4
-
-const char *
-vmod_clean(const struct vrt_ctx *ctx, const char *uri)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\"", uri);
-
-	context.type = clean;
-	context.ws = ctx->ws;
-	context.uri = uri;
-	context.is_filtered = &is_param_cleaned;
-	context.is_kept = false;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(ctx, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_remove(const struct vrt_ctx *ctx, const char *uri)
-{
-	const char *cleaned_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\"", uri);
-
-	cleaned_uri = remove_querystring(ctx->ws, uri);
-
-	QS_LOG_RETURN(ctx, cleaned_uri);
-	return cleaned_uri;
-}
-
-const char *
-vmod_sort(const struct vrt_ctx *ctx, const char *uri)
-{
-	const char *sorted_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\"", uri);
-
-	sorted_uri = sort_querystring(ctx->ws, uri);
-
-	QS_LOG_RETURN(ctx, sorted_uri);
-	return sorted_uri;
-}
-
-const char *
-vmod_filtersep(const struct vrt_ctx *ctx)
-{
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	return NULL;
-}
-
-const char *
-vmod_filter(const struct vrt_ctx *ctx, const char *uri, const char *params, ...)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\", \"%s\", ...", uri, params);
-
-	context.type = filter;
-	context.ws = ctx->ws;
-	context.uri = uri;
-	context.params.filter.params = params;
-	context.is_filtered = &is_param_filtered;
-	context.is_kept = false;
-
-	va_start(context.params.filter.ap, params);
-	filtered_uri = filter_querystring(&context);
-	va_end(context.params.filter.ap);
-
-	QS_LOG_RETURN(ctx, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_filter_csv(const struct vrt_ctx *ctx, const char *uri, const char *params)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\", \"%s\"", uri, params);
-
-	context.type = filter;
-	context.ws = ctx->ws;
-	context.uri = uri;
-	context.params.filter.params = params;
-	context.is_filtered = &is_param_filtered_csv;
-	context.is_kept = false;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(ctx, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_filter_except(const struct vrt_ctx *ctx, const char *uri, const char *params, ...)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\", \"%s\", ...", uri, params);
-
-	context.type = filter;
-	context.ws = ctx->ws;
-	context.uri = uri;
-	context.params.filter.params = params;
-	context.is_filtered = &is_param_filtered;
-	context.is_kept = true;
-
-	va_start(context.params.filter.ap, params);
-	filtered_uri = filter_querystring(&context);
-	va_end(context.params.filter.ap);
-
-	QS_LOG_RETURN(ctx, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_filter_except_csv(const struct vrt_ctx *ctx, const char *uri, const char *params)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\", \"%s\", ...", uri, params);
-
-	context.type = filter;
-	context.ws = ctx->ws;
-	context.uri = uri;
-	context.params.filter.params = params;
-	context.is_filtered = &is_param_filtered_csv;
-	context.is_kept = true;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(ctx, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_regfilter(const struct vrt_ctx *ctx, const char *uri, const char *regex)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\", \"%s\"", uri, regex);
-
-	context.type = regfilter;
-	context.ws = ctx->ws;
-	context.uri = uri;
-	context.params.regfilter.regex = regex;
-	context.params.regfilter.re_ctx = ctx;
-	context.is_filtered = &is_param_regfiltered;
-	context.is_kept = false;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(ctx, filtered_uri);
-	return filtered_uri;
-}
-
-const char *
-vmod_regfilter_except(const struct vrt_ctx *ctx, const char *uri, const char *regex)
-{
-	struct filter_context context;
-	const char *filtered_uri;
-
-	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
-	QS_LOG_CALL(ctx, "\"%s\", \"%s\"", uri, regex);
-
-	context.type = regfilter;
-	context.ws = ctx->ws;
-	context.uri = uri;
-	context.params.regfilter.regex = regex;
-	context.params.regfilter.re_ctx = ctx;
-	context.is_filtered = &is_param_regfiltered;
-	context.is_kept = true;
-
-	filtered_uri = filter_querystring(&context);
-
-	QS_LOG_RETURN(ctx, filtered_uri);
-	return filtered_uri;
-}
-
-#endif
diff --git a/libvmod-querystring-4.0/src/vmod_querystring.h b/libvmod-querystring-4.0/src/vmod_querystring.h
deleted file mode 100644
index 4010bc6..0000000
--- a/libvmod-querystring-4.0/src/vmod_querystring.h
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * libvmod-querystring - querystring manipulation module for Varnish
- * 
- * Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 
- * 1. Redistributions of source code must retain the above
- *    copyright notice, this list of conditions and the following
- *    disclaimer.
- * 2. Redistributions in binary form must reproduce the above
- *    copyright notice, this list of conditions and the following
- *    disclaimer in the documentation and/or other materials
- *    provided with the distribution.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- * OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- *
- * This file manages API changes in order to cross-compile against
- * different versions of Varnish:
- *
- * * Varnish 4.0.0
- * - cache.h has been moved
- * - provides vrt_ctx instead of sess
- *
- * * Varnish 3.0.3
- * - VRT_re_match needs a sess pointer
- */
-
-#if VARNISH_MAJOR == 3
-
-#include "cache.h"
-
-#if defined HAVE_VARNISH_3_0_3 || defined HAVE_VARNISH_3_0_4 \
- || defined HAVE_VARNISH_3_0_5 || defined HAVE_VARNISH_3_0_6
-#define QS_NEED_RE_CTX
-#endif
-
-#define QS_LOG_CALL(sp, pattern, ...) \
-	WSP(sp, SLT_VCL_call, "%s(" pattern ")", __func__, __VA_ARGS__);
-
-#define QS_LOG_RETURN(sp, value) WSP(sp, SLT_VCL_return, "\"%s\"", value);
-
-typedef struct sess re_ctx;
-
-#endif // VARNISH_MAJOR == 3
-
-/* ------------------------------------------------------------------- */
-
-#if VARNISH_MAJOR == 4
-
-#include "cache/cache.h"
-
-#define QS_NEED_RE_CTX
-
-#define QS_LOG_CALL(ctx, pattern, ...) \
-	VSLb(ctx->vsl, SLT_VCL_call, "%s(" pattern ")", __func__, __VA_ARGS__);
-
-#define QS_LOG_RETURN(ctx, value) VSLb(ctx->vsl, SLT_VCL_return, "\"%s\"", value);
-
-typedef const struct vrt_ctx re_ctx;
-
-#endif // VARNISH_MAJOR == 4
-
-/* ------------------------------------------------------------------- */
-
-#ifndef QS_ENABLE_LOGGING
-
-#undef QS_LOG_CALL
-#undef QS_LOG_RETURN
-
-#define QS_LOG_CALL
-#define QS_LOG_RETURN
-
-#endif
-
-/* ------------------------------------------------------------------- */
-
-struct query_param {
-	const char *value;
-	short length;
-};
-
-enum filter_type {clean, filter, regfilter};
-
-struct filter_params {
-	const char *params;
-	va_list    ap;
-};
-
-struct regfilter_params {
-	const char *regex;
-	void       *re;
-	re_ctx     *re_ctx;
-};
-
-struct filter_context {
-	enum filter_type type;
-	struct ws        *ws;
-	const char       *uri;
-	const char       *query_string;
-	union {
-		struct filter_params    filter;
-		struct regfilter_params regfilter;
-	} params;
-	bool (*is_filtered) (const char*, int, struct filter_context*);
-	bool   is_kept;
-};
-
diff --git a/libvmod-querystring-4.0/src/vmod_querystring3.vcc b/libvmod-querystring-4.0/src/vmod_querystring3.vcc
deleted file mode 100644
index 55689cc..0000000
--- a/libvmod-querystring-4.0/src/vmod_querystring3.vcc
+++ /dev/null
@@ -1,15 +0,0 @@
-Module querystring
-
-Function STRING clean(STRING)
-Function STRING remove(STRING)
-
-Function STRING sort(STRING)
-
-Function STRING filtersep()
-Function STRING filter(STRING, STRING_LIST)
-Function STRING filter_except(STRING, STRING_LIST)
-Function STRING filter_csv(STRING, STRING)
-Function STRING filter_except_csv(STRING, STRING)
-
-Function STRING regfilter(STRING, STRING)
-Function STRING regfilter_except(STRING, STRING)
diff --git a/libvmod-querystring-4.0/src/vmod_querystring4.vcc b/libvmod-querystring-4.0/src/vmod_querystring4.vcc
deleted file mode 100644
index f52582f..0000000
--- a/libvmod-querystring-4.0/src/vmod_querystring4.vcc
+++ /dev/null
@@ -1,171 +0,0 @@
-# libvmod-querystring - querystring manipulation module for Varnish
-# 
-# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 
-# 1. Redistributions of source code must retain the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer.
-# 2. Redistributions in binary form must reproduce the above
-#    copyright notice, this list of conditions and the following
-#    disclaimer in the documentation and/or other materials
-#    provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
-# OF THE POSSIBILITY OF SUCH DAMAGE.
-
-$Module querystring Varnish QueryString Module
-
-DESCRIPTION
-===========
-
-Varnish multipurpose vmod for URI query-string manipulation. Can be used to
-normalize for instance request URLs or Location response headers in various
-ways. It is recommended to at least clean incoming request URLs (removing empty
-parameters or query-strings), all other functions do the cleaning.
-
-
-$Function STRING clean(STRING)
-
-Description
-   Returns the given URI without empty parameters. The query-string is removed
-   if empty (either before or after the removal of empty parameters).
-Example
-   .. sourcecode::
-
-      set req.url = querystring.clean(req.url);
-
-
-$Function STRING remove(STRING)
-
-Description
-   Returns the given URI with its query-string removed
-Example
-   .. sourcecode::
-
-      set req.url = querystring.remove(req.url);
-
-
-$Function STRING sort(STRING)
-
-Description
-   Returns the given URI with its query-string sorted
-Example
-   .. sourcecode::
-
-      set req.url = querystring.sort(req.url);
-
-
-$Function STRING filtersep()
-
-Description
-   Returns the separator needed by the filter and filter_except functions
-
-
-$Function STRING filter(STRING, STRING_LIST)
-
-Description
-   Returns the given URI without the listed parameters
-Example
-   .. sourcecode::
-
-      set req.url = querystring.filter(req.url,
-        "utm_source" + querystring.filtersep() +
-        "utm_medium" + querystring.filtersep() +
-        "utm_campaign");
-
-
-$Function STRING filter_except(STRING, STRING_LIST)
-
-Description
-   Returns the given URI but only keeps the listed parameters
-Example
-   .. sourcecode::
-
-      set req.url = querystring.filter_except(req.url,
-                                       "q" + querystring.filtersep() + "p");
-
-$Function STRING filter_csv(STRING, STRING)
-
-Description
-   Returns the given URI without the listed comma-separated parameters
-Example
-   .. sourcecode::
-
-      set req.url = querystring.filter_csv(req.url,
-        "utm_source,utm_medium,utm_campaign");
-
-
-$Function STRING filter_except_csv(STRING, STRING)
-
-Description
-   Returns the given URI but only keeps the listed comma-separated parameters
-Example
-   .. sourcecode::
-
-      set req.url = querystring.filter_except_csv(req.url, "q,p");
-
-$Function STRING regfilter(STRING, STRING)
-
-Description
-   Returns the given URI without the parameters matching a regular expression
-Example
-   .. sourcecode::
-
-      set req.url = querystring.regfilter(req.url, "utm\_.*");
-
-
-$Function STRING regfilter_except(STRING, STRING)
-
-Description
-   Returns the given URI but only keeps the parameters matching a regular
-   expression
-Example
-   .. sourcecode::
-
-      set req.url = querystring.regfilter_except(req.url, "^(q|p)$");
-
-
-EXAMPLES
-========
-
-In your VCL you could then use this vmod along the following lines::
-
-   import querystring;
-
-   sub vcl_hash {
-      # sort the URL before the request hashing
-      set req.url = querystring.sort(req.url);
-   }
-
-You can use regfilter to specify a list of arguments that must not be removed
-(everything else will be) with a negative look-ahead expression::
-
-   set req.url = querystring.regfilter(req.url, "^(?!param1|param2)");
-
-
-ACKNOWLEDGMENT
-==============
-
-The sort algorithm is a mix of Jason Mooberry's Skwurly and my own QuerySort
-with regards for the Varnish workspace memory model of the worker threads.
-
-
-SEE ALSO
-========
-
-vcl(7) varnishd(1)
diff --git a/libvmod-revvar-4.0/.gitignore b/libvmod-revvar-4.0/.gitignore
deleted file mode 100644
index 12120ba..0000000
--- a/libvmod-revvar-4.0/.gitignore
+++ /dev/null
@@ -1,29 +0,0 @@
-Makefile
-Makefile.in
-.deps/
-.libs/
-*.o
-*.lo
-*.la
-*~
-
-/aclocal.m4
-/autom4te.cache/
-/compile
-/config.guess
-/config.h
-/config.h.in
-/config.log
-/config.status
-/config.sub
-/configure
-/depcomp
-/install-sh
-/libtool
-/ltmain.sh
-/missing
-/stamp-h1
-/m4/
-
-/src/vcc_if.c
-/src/vcc_if.h
diff --git a/libvmod-revvar-4.0/LICENSE b/libvmod-revvar-4.0/LICENSE
deleted file mode 100644
index 56cb50b..0000000
--- a/libvmod-revvar-4.0/LICENSE
+++ /dev/null
@@ -1,23 +0,0 @@
-Copyright (c) 2011 Varnish Software AS
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions
-are met:
-1. Redistributions of source code must retain the above copyright
-   notice, this list of conditions and the following disclaimer.
-2. Redistributions in binary form must reproduce the above copyright
-   notice, this list of conditions and the following disclaimer in the
-   documentation and/or other materials provided with the distribution.
-
-THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-SUCH DAMAGE.
diff --git a/libvmod-revvar-4.0/Makefile.am b/libvmod-revvar-4.0/Makefile.am
deleted file mode 100644
index b3c32dd..0000000
--- a/libvmod-revvar-4.0/Makefile.am
+++ /dev/null
@@ -1,8 +0,0 @@
-ACLOCAL_AMFLAGS = -I m4
-
-DISTCHECK_CONFIGURE_FLAGS = \
-        VMOD_DIR='$${libdir}/varnish/vmods'
-
-EXTRA_DIST = README LICENSE vmod-var.spec debian
-
-SUBDIRS = src man
diff --git a/libvmod-revvar-4.0/README b/libvmod-revvar-4.0/README
deleted file mode 100644
index 33f1f7b..0000000
--- a/libvmod-revvar-4.0/README
+++ /dev/null
@@ -1,34 +0,0 @@
-This VMOD implements basic variable in VCL. Well. It's more of an
-association list with support for strings, ints and reals.
-
-There are methods to get and set each type.
-
-Prototype, most should be self-explaining:
-
-Function VOID init_var_count(INT)
-
-Function VOID set_int(BOOL, INT, INT)
-Function INT get_int(BOOL, INT)
-
-Function VOID set_string(BOOL, INT, STRING)
-Function STRING get_string(BOOL, INT)
-
-Function VOID set_real(BOOL, INT, REAL)
-Function REAL get_real(BOOL, INT)
-
-Function VOID set_duration(BOOL, INT, DURATION)
-Function DURATION get_duration(BOOL, INT)
-
-Function VOID clear(BOOL)
-
-init_var_count() sets the number of variables we are going to define.
-clear() clears the whole variable space.
-
-The variables are referenced by their index, between 0 and the number
-passed to init_var_count().
-
-The first BOOL parameter to each function determines whether the
-variable is read from the 'vcl_receive' (user) scope (TRUE) or from
-the 'vcl_backend_response' (backend) scope (FALSE).
-
-The first INT parameter is the variable index.
\ No newline at end of file
diff --git a/libvmod-revvar-4.0/autogen.sh b/libvmod-revvar-4.0/autogen.sh
deleted file mode 100755
index 2e1fb89..0000000
--- a/libvmod-revvar-4.0/autogen.sh
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/bin/sh
-
-warn() {
-	echo "WARNING: $@" 1>&2
-}
-
-case `uname -s` in
-Darwin)
-	LIBTOOLIZE=glibtoolize
-	;;
-FreeBSD)
-	LIBTOOLIZE=libtoolize
-	;;
-Linux)
-	LIBTOOLIZE=libtoolize
-	;;
-SunOS)
-	LIBTOOLIZE=libtoolize
-	;;
-*)
-	warn "unrecognized platform:" `uname -s`
-	LIBTOOLIZE=libtoolize
-esac
-
-automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
-if [ -z "$automake_version" ] ; then
-	warn "unable to determine automake version"
-else
-	case $automake_version in
-		0.*|1.[0-8]|1.[0-8][.-]*)
-			warn "automake ($automake_version) detected; 1.9 or newer recommended"
-			;;
-		*)
-			;;
-	esac
-fi
-
-set -ex
-
-$LIBTOOLIZE --copy --force
-aclocal -I m4
-autoheader
-automake --add-missing --copy --foreign
-autoconf
diff --git a/libvmod-revvar-4.0/configure.ac b/libvmod-revvar-4.0/configure.ac
deleted file mode 100644
index e544712..0000000
--- a/libvmod-revvar-4.0/configure.ac
+++ /dev/null
@@ -1,56 +0,0 @@
-AC_PREREQ(2.64)
-AC_COPYRIGHT([Copyright (c) 2011-2014 Varnish Software AS])
-AC_INIT([libvmod-var], [0.1])
-AC_CONFIG_MACRO_DIR([m4])
-AC_CONFIG_SRCDIR(src/vmod_revvar.vcc)
-AM_CONFIG_HEADER(config.h)
-
-AC_CANONICAL_SYSTEM
-AC_LANG(C)
-
-AM_INIT_AUTOMAKE([foreign])
-
-AC_GNU_SOURCE
-AC_PROG_CC
-AC_PROG_CC_STDC
-if test "x$ac_cv_prog_cc_c99" = xno; then
-	AC_MSG_ERROR([Could not find a C99 compatible compiler])
-fi
-AC_PROG_CPP
-
-AC_PROG_INSTALL
-AC_PROG_LIBTOOL
-AC_PROG_MAKE_SET
-
-# Check for rst utilities
-AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
-if test "x$RST2MAN" = "xno"; then
-	AC_MSG_WARN([rst2man not found - not building man pages])
-fi
-AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
-
-# Check for pkg-config
-PKG_PROG_PKG_CONFIG
-
-# Checks for header files.
-AC_HEADER_STDC
-AC_CHECK_HEADERS([sys/stdlib.h])
-
-# Check for python
-AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
-
-# Varnish include files tree
-VARNISH_VMOD_INCLUDES
-VARNISH_VMOD_DIR
-VARNISH_VMODTOOL
-
-AC_PATH_PROG([VARNISHTEST], [varnishtest])
-AC_PATH_PROG([VARNISHD], [varnishd], [],
-    [$PATH:$PATH:`pkg-config varnishapi --variable=sbindir`])
-
-AC_CONFIG_FILES([
-	Makefile
-	src/Makefile
-	man/Makefile
-])
-AC_OUTPUT
diff --git a/libvmod-revvar-4.0/man/Makefile.am b/libvmod-revvar-4.0/man/Makefile.am
deleted file mode 100644
index 91ab35e..0000000
--- a/libvmod-revvar-4.0/man/Makefile.am
+++ /dev/null
@@ -1,15 +0,0 @@
-#
-
-dist_man_MANS = vmod_var.3
-MAINTAINERCLEANFILES = $(dist_man_MANS)
-EXTRA_DIST = vmod_var.rst
-
-vmod_var.3: vmod_var.rst
-if HAVE_RST2MAN
-	${RST2MAN} vmod_var.rst $@
-else
-	@echo "========================================"
-	@echo "You need rst2man installed to make dist"
-	@echo "========================================"
-	@false
-endif
diff --git a/libvmod-revvar-4.0/man/vmod_var.rst b/libvmod-revvar-4.0/man/vmod_var.rst
deleted file mode 100644
index c8e91b1..0000000
--- a/libvmod-revvar-4.0/man/vmod_var.rst
+++ /dev/null
@@ -1,91 +0,0 @@
-============
-vmod_example
-============
-
-----------------------
-Varnish Example Module
-----------------------
-
-:Author: Tollef Fog Heen
-:Date: 2011-09-28
-:Version: 1.0
-:Manual section: 3
-
-SYNOPSIS
-========
-
-import var;
-
-DESCRIPTION
-===========
-
-Association list in VCL. Can be used to mimick variables.
-
-FUNCTIONS
-=========
-
-set_string
-----------
-
-Prototype
-	set_string(STRING S, STRING T)
-        set(STRING S, STRING T) - shorthand
-Return value
-	NONE
-Description
-	Sets the variable identified by S to the value T.
-Example
-	var.set_string("bar", "some random string");
-
-get_string
-----------
-
-Prototype
-	get_string(STRING S)
-        get(STRING S) - shorthand
-Return value
-	STRING
-Description
-	Returns the string identified by the supplied string.
-Example
-	set resp.http.foo = var.get_string("bar");
-
-Similar functions
------------------
-
-There are similar functions named:
-
-* set_int(STRING, INT)
-* get_int(STRING)
-* set_real(STRING, REAL)
-* get_real(STRING)
-* set_duration(STRING, DURATION)
-* get_duration(STRING)
-
-get and set are shorthand for get_string and set_string.
-
-clear
------
-
-Prototype
-	Function VOID clear()
-Returns
-	NONE
-Description
-	Clears out all the variables.
-Example
-	
-
-HISTORY
-=======
-
-This manual page was written by Per Buer. It might contain
-errors. Patches are welcome.
-
-COPYRIGHT
-=========
-
-This document is licensed under the same license as the
-libvmod-example project. See LICENSE for details.
-
-* Copyright (c) 2012 Varnish Software
diff --git a/libvmod-revvar-4.0/src/Makefile.am b/libvmod-revvar-4.0/src/Makefile.am
deleted file mode 100644
index bcf7453..0000000
--- a/libvmod-revvar-4.0/src/Makefile.am
+++ /dev/null
@@ -1,28 +0,0 @@
-AM_CPPFLAGS = @VMOD_INCLUDES@
-
-vmoddir = @VMOD_DIR@
-vmod_LTLIBRARIES = libvmod_revvar.la
-
-libvmod_revvar_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
-
-libvmod_revvar_la_SOURCES = \
-	vcc_if.c \
-	vcc_if.h \
-	vmod_revvar.c
-
-vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_revvar.vcc
-	@VMODTOOL@ $(top_srcdir)/src/vmod_revvar.vcc
-
-VMOD_TESTS =  $(top_srcdir)/src/tests/*.vtc
-.PHONY: $(VMOD_TESTS)
-
-$(top_srcdir)/src/tests/*.vtc:
-	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
-
-check: $(VMOD_TESTS)
-
-EXTRA_DIST = \
-	vmod_revvar.vcc \
-	$(VMOD_TESTS)
-
-CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h
\ No newline at end of file
diff --git a/libvmod-revvar-4.0/src/tests/test01.vtc b/libvmod-revvar-4.0/src/tests/test01.vtc
deleted file mode 100644
index b97689b..0000000
--- a/libvmod-revvar-4.0/src/tests/test01.vtc
+++ /dev/null
@@ -1,39 +0,0 @@
-varnishtest "Test var vmod"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import revvar from "${vmod_topbuild}/src/.libs/libvmod_revvar.so";
-
-	sub vcl_deliver {
-		revvar.set("foo", "bar");
-		set resp.http.x-foo = revvar.get("foo");
-		revvar.set("foo2", "bar2");
-		set resp.http.x-foo = revvar.get("foo");
-		revvar.clear();
-		set resp.http.x-foo2 = "" + revvar.get("foo2");
-		revvar.set_int("i1", 123);
-		set resp.http.i1 = revvar.get_int("i1") + 1;
-		revvar.set_real("r1", 2);
-		revvar.set_real("r1", revvar.get_real("r1"));
-		set resp.http.r1 = revvar.get_real("r1");
-
-		revvar.set_duration("d1", 1m);
-		set resp.http.d1 = revvar.get_duration("d1");
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.http.x-foo == "bar"
-	expect resp.http.x-foo2 == ""
-	expect resp.http.i1 == "124"
-	expect resp.http.r1 == "2.000"
-	expect resp.http.d1 == "60.000"
-}
-
-client c1 -run
diff --git a/libvmod-revvar-4.0/src/tests/test02.vtc b/libvmod-revvar-4.0/src/tests/test02.vtc
deleted file mode 100644
index dbd58cf..0000000
--- a/libvmod-revvar-4.0/src/tests/test02.vtc
+++ /dev/null
@@ -1,28 +0,0 @@
-varnishtest "Test global variables"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import revvar from "${vmod_topbuild}/src/.libs/libvmod_revvar.so";
-
-	sub vcl_init {
-		revvar.global_set("foo", "fooval");
-		revvar.global_set("bar", "barval");
-		revvar.global_set("bar", "altered_barval");
-	}
-
-	sub vcl_deliver {
-		set resp.http.x-foo = revvar.global_get("foo");
-		set resp.http.x-bar = revvar.global_get("bar");
-	}
-} -start
-
-client c1 {
-	txreq
-	rxresp
-	expect resp.http.x-foo == "fooval"
-	expect resp.http.x-bar == "altered_barval"
-} -run
diff --git a/libvmod-revvar-4.0/src/tests/test03.vtc b/libvmod-revvar-4.0/src/tests/test03.vtc
deleted file mode 100644
index a8f020b..0000000
--- a/libvmod-revvar-4.0/src/tests/test03.vtc
+++ /dev/null
@@ -1,41 +0,0 @@
-varnishtest "Test var vmod"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-varnish v1 -vcl+backend {
-	import revvar from "${vmod_topbuild}/src/.libs/libvmod_revvar.so";
-
-	sub vcl_deliver {
-		revvar.set("foo", "bar");
-		set resp.http.x-foo = revvar.get("foo");
-		revvar.set("foo2", "bar2");
-		set resp.http.x-foo = revvar.get("foo");
-		revvar.clear();
-		set resp.http.x-foo2 = "" + revvar.get("foo2");
-		revvar.set_int("i1", 123);
-		set resp.http.i1 = revvar.get_int("i1") + 1;
-		revvar.set_real("r1", 2);
-		revvar.set_real("r1", revvar.get_real("r1"));
-		set resp.http.r1 = revvar.get_real("r1");
-
-		revvar.set_duration("d1", 1m);
-		set resp.http.d1 = revvar.get_duration("d1");
-		set resp.http.x-null = revvar.get("nosuchvar");
-		set resp.http.x-null2 = revvar.get(req.http.no-such-var);
-	}
-} -start
-
-client c1 {
-	txreq -url "/"
-	rxresp
-	expect resp.http.x-foo == "bar"
-	expect resp.http.x-foo2 == ""
-	expect resp.http.i1 == "124"
-	expect resp.http.r1 == "2.000"
-	expect resp.http.d1 == "60.000"
-}
-
-client c1 -run
diff --git a/libvmod-revvar-4.0/src/vmod_revvar.c b/libvmod-revvar-4.0/src/vmod_revvar.c
deleted file mode 100644
index f524b7f..0000000
--- a/libvmod-revvar-4.0/src/vmod_revvar.c
+++ /dev/null
@@ -1,285 +0,0 @@
-#include <stdlib.h>
-#include <ctype.h>
-
-#include "vrt.h"
-#include "cache/cache.h"
-
-#include "vcc_if.h"
-
-enum VAR_TYPE {
-	UNSET,
-	STRING,
-    STRING_LITERAL,
-	INT,
-	REAL,
-	DURATION,
-	BOOL
-};
-
-struct var {
-	enum VAR_TYPE type;
-	union {
-		char *STRING;
-		int INT;
-		unsigned BOOL;
-		double REAL;
-		double DURATION;
-	} value;
-};
-
-struct var_array {
-    unsigned magic;
-#define VAR_ARRAY_MAGIC 0x8A21A651
-    unsigned count;
-    struct var *items;
-};
-
-static struct var_array *
-_get_var_array(const struct vrt_ctx *ctx, VCL_BOOL from_req)
-{
-    struct rev_vmod *vmod;
-    struct var_array *vars;
-
-    if (from_req) {
-        AN(ctx->req);
-        vmod = &ctx->req->vmod_revvar;
-    } else {
-        AN(ctx->bo);
-        vmod = &ctx->bo->vmod_revvar;
-    }
-
-    CHECK_OBJ_NOTNULL(vmod, REV_VMOD_MAGIC);
-    if (!VALID_OBJ(vmod, REV_VMOD_MAGIC))
-        return NULL;
-
-    vars = vmod->data;
-    CHECK_OBJ_NOTNULL(vars, VAR_ARRAY_MAGIC);
-    if (!VALID_OBJ(vars, VAR_ARRAY_MAGIC))
-        return NULL;
-
-    return vars;
-}
-
-static struct var *
-_get_var(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx)
-{
-    struct var_array *vars = _get_var_array(ctx, from_req);
-
-	AN(vars);
-    assert(idx >= 0 && idx < vars->count);
-
-    if (vars && idx >= 0 && idx < vars->count)
-        return &vars->items[idx];
-	return NULL;
-}
-
-static struct var_array *
-_alloc_var_array(struct ws *ws, unsigned count, VCL_BOOL zero_out)
-{
-    struct var_array *new_vars =
-        (struct var_array *)WS_Alloc(ws, sizeof(*new_vars));
-
-    AN(new_vars);
-    if (new_vars) {
-        new_vars->magic = VAR_ARRAY_MAGIC;
-        new_vars->count = count;
-        new_vars->items =
-            (struct var *)WS_Alloc(ws, count * sizeof(struct var));
-
-        if (zero_out)
-            memset(new_vars->items, 0, count * sizeof(struct var));
-    }
-
-    return new_vars;
-}
-
-static void*
-_duplicate_vars(struct ws *ws, void *data)
-{
-    struct var_array *vars = data;
-    struct var_array *new_vars;
-    unsigned i;
-
-    CHECK_OBJ_NOTNULL(vars, VAR_ARRAY_MAGIC);
-
-    new_vars = _alloc_var_array(ws, vars->count, 0);
-    if (new_vars) {
-        /* Copy variables into new array, making sure allocations are done in ws. */
-        memcpy(new_vars->items, vars->items, vars->count * sizeof(struct var));
-        for (i=0; i<new_vars->count; ++i) {
-            struct var *v = &new_vars->items[i];
-
-            /* We must copy the string into our own ws.
-               STRING_LITERAL doesn't need to be copied, because it's a static value
-               defined at compile time. */
-            if (v->type == STRING && v->value.STRING)
-                v->value.STRING = WS_Copy(ws, v->value.STRING, -1);
-        }
-    }
-
-    return new_vars;
-}
-
-VCL_VOID
-vmod_init_var_count(const struct vrt_ctx *ctx, VCL_INT count)
-{
-    struct rev_vmod *vmod;
-    struct var *vars;
-
-    /* Always initialize only the 'req' vars.
-       They are copied to 'bo' anyway before 'vcl_backend_response'. */
-
-    AN(ctx->req);
-    vmod = &ctx->req->vmod_revvar;
-
-    vmod->magic = REV_VMOD_MAGIC;
-    vmod->data  = _alloc_var_array(ctx->ws, count, 1);
-    vmod->dup_data_func = _duplicate_vars;
-}
-
-VCL_VOID
-vmod_unset(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx)
-{
-    struct var *v = _get_var(ctx, from_req, idx);
-    if (v)
-        v->type = UNSET;
-}
-
-VCL_VOID
-vmod_set_string(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_STRING value)
-{
-    struct var *v = _get_var(ctx, from_req, idx);
-    AN(v);
-
-    if (v) {
-        v->type = STRING;
-        if (value == NULL)
-            value = "";
-        v->value.STRING = WS_Copy(ctx->ws, value, -1);
-    }
-}
-
-VCL_VOID
-vmod_set_string_allow_null(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_STRING value)
-{
-    struct var *v = _get_var(ctx, from_req, idx);
-    AN(v);
-
-    if (v) {
-        v->type = STRING;
-        if (value)
-            v->value.STRING = WS_Copy(ctx->ws, value, -1);
-        else
-            v->value.STRING = NULL;
-    }
-}
-
-VCL_VOID
-vmod_set_string_literal(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_STRING value)
-{
-    struct var *v = _get_var(ctx, from_req, idx);
-    AN(v);
-
-    if (v) {
-        v->type = STRING_LITERAL;
-        if (value == NULL)
-            value = "";
-        /* 'value' is a constant, literal string which is "allocated" at compile time.
-         * Don't need to dup it.
-         */
-        v->value.STRING = (char *)value;
-    }
-}
-
-VCL_STRING
-vmod_get_string(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx)
-{
-    struct var *v = _get_var(ctx, from_req, idx);
-
-	if (!v || (v->type != STRING && v->type != STRING_LITERAL))
-		return NULL;
-	return (v->value.STRING);
-}
-
-
-#define VMOD_SET_X(vcl_type_u, vcl_type_l, ctype) \
-VCL_VOID \
-vmod_set_##vcl_type_l(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, ctype value) \
-{ \
-    struct var *v = _get_var(ctx, from_req, idx); \
-    AN(v); \
-    if (v) { \
-	    v->type = vcl_type_u; \
-	    v->value.vcl_type_u = value; \
-    } \
-}
-
-VMOD_SET_X(INT, int, VCL_INT)
-VMOD_SET_X(REAL, real, VCL_REAL)
-VMOD_SET_X(DURATION, duration, VCL_DURATION)
-VMOD_SET_X(BOOL, bool, VCL_BOOL)
-
-#define VMOD_GET_X(vcl_type_u, vcl_type_l, ctype) \
-ctype \
-vmod_get_##vcl_type_l(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx) \
-{ \
-    struct var *v = _get_var(ctx, from_req, idx); \
-	if (!v || v->type != vcl_type_u) \
-		return 0; \
-	return (v->value.vcl_type_u); \
-}
-
-VMOD_GET_X(INT, int, VCL_INT)
-VMOD_GET_X(REAL, real, VCL_REAL)
-VMOD_GET_X(DURATION, duration, VCL_DURATION)
-VMOD_GET_X(BOOL, bool, VCL_BOOL)
-
-VCL_BOOL
-vmod_and_or_set_bool(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_BOOL value)
-{
-    struct var *v = _get_var(ctx, from_req, idx);
-    AN(v);
-    if (!v)
-        return 0;
-
-    if (v->type == UNSET) {
-        v->type = BOOL;
-        v->value.BOOL = value;
-    } else {
-        if (v->type != BOOL)
-            return 0;
-        v->value.BOOL = v->value.BOOL && value;
-    }
-
-    return v->value.BOOL;
-}
-
-VCL_BOOL
-vmod_or_or_set_bool(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_BOOL value)
-{
-    struct var *v = _get_var(ctx, from_req, idx);
-    AN(v);
-    if (!v)
-        return 0;
-
-    if (v->type == UNSET) {
-        v->type = BOOL;
-        v->value.BOOL = value;
-    } else {
-		if (v->type != BOOL)
-			return 0;
-		v->value.BOOL = v->value.BOOL || value;
-	}
-	return v->value.BOOL;
-}
-
-VCL_VOID
-vmod_clear(const struct vrt_ctx *ctx, VCL_BOOL from_req)
-{
-    struct var_array *vars = _get_var_array(ctx, from_req);
-    AN(vars);
-
-    if (vars)
-        memset(vars->items, 0, vars->count * sizeof(struct var));
-}
-
diff --git a/libvmod-revvar-4.0/src/vmod_revvar.vcc b/libvmod-revvar-4.0/src/vmod_revvar.vcc
deleted file mode 100644
index 6f34242..0000000
--- a/libvmod-revvar-4.0/src/vmod_revvar.vcc
+++ /dev/null
@@ -1,24 +0,0 @@
-$Module revvar 3 RevSW Variable VMOD for Varnish
-
-# Set the number of variables to use
-$Function VOID init_var_count(INT)
-
-# Unset for any
-$Function VOID unset(BOOL, INT)
-
-$Function VOID set_int(BOOL, INT, INT)
-$Function INT get_int(BOOL, INT)
-$Function VOID set_string(BOOL, INT, STRING)
-$Function VOID set_string_allow_null(BOOL, INT, STRING)
-$Function VOID set_string_literal(BOOL, INT, STRING)
-$Function STRING get_string(BOOL, INT)
-$Function VOID set_real(BOOL, INT, REAL)
-$Function REAL get_real(BOOL, INT)
-$Function VOID set_duration(BOOL, INT, DURATION)
-$Function DURATION get_duration(BOOL, INT)
-$Function VOID set_bool(BOOL, INT, BOOL)
-$Function BOOL get_bool(BOOL, INT)
-$Function BOOL and_or_set_bool(BOOL, INT, BOOL)
-$Function BOOL or_or_set_bool(BOOL, INT, BOOL)
-
-$Function VOID clear(BOOL)
diff --git a/libvmod-timers-4.0/.gitignore b/libvmod-timers-4.0/.gitignore
deleted file mode 100644
index 12120ba..0000000
--- a/libvmod-timers-4.0/.gitignore
+++ /dev/null
@@ -1,29 +0,0 @@
-Makefile
-Makefile.in
-.deps/
-.libs/
-*.o
-*.lo
-*.la
-*~
-
-/aclocal.m4
-/autom4te.cache/
-/compile
-/config.guess
-/config.h
-/config.h.in
-/config.log
-/config.status
-/config.sub
-/configure
-/depcomp
-/install-sh
-/libtool
-/ltmain.sh
-/missing
-/stamp-h1
-/m4/
-
-/src/vcc_if.c
-/src/vcc_if.h
diff --git a/libvmod-timers-4.0/COPYING b/libvmod-timers-4.0/COPYING
deleted file mode 100644
index f792696..0000000
--- a/libvmod-timers-4.0/COPYING
+++ /dev/null
@@ -1,7 +0,0 @@
-Copyright (c) 2011 Varnish Software AS
-...
-See LICENSE for details.
-
-You're free to use and distribute this under terms in the
-LICENSE. Please add your relevant copyright statements.
-
diff --git a/libvmod-timers-4.0/LICENSE b/libvmod-timers-4.0/LICENSE
deleted file mode 100644
index 04ccb94..0000000
--- a/libvmod-timers-4.0/LICENSE
+++ /dev/null
@@ -1,20 +0,0 @@
-The MIT License (MIT)
-
-Copyright (c) 2013 Jos Boumans & Krux Digital
-
-Permission is hereby granted, free of charge, to any person obtaining a copy of
-this software and associated documentation files (the "Software"), to deal in
-the Software without restriction, including without limitation the rights to
-use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
-the Software, and to permit persons to whom the Software is furnished to do so,
-subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/libvmod-timers-4.0/Makefile.am b/libvmod-timers-4.0/Makefile.am
deleted file mode 100644
index e9c2628..0000000
--- a/libvmod-timers-4.0/Makefile.am
+++ /dev/null
@@ -1,18 +0,0 @@
-ACLOCAL_AMFLAGS = -I m4
-
-SUBDIRS = src
-
-EXTRA_DIST = README.rst
-
-dist_man_MANS = vmod_timers.3
-MAINTAINERCLEANFILES = $(dist_man_MANS)
-
-vmod_timers.3: README.rst
-if HAVE_RST2MAN
-	${RST2MAN} README.rst $@
-else
-	@echo "========================================"
-	@echo "You need rst2man installed to make dist"
-	@echo "========================================"
-	@false
-endif
diff --git a/libvmod-timers-4.0/README.rst b/libvmod-timers-4.0/README.rst
deleted file mode 100644
index 1e5df4c..0000000
--- a/libvmod-timers-4.0/README.rst
+++ /dev/null
@@ -1,237 +0,0 @@
-============
-vmod_timers
-============
-
-----------------------
-Varnish timers Module
-----------------------
-
-:Author: Jos Boumans
-:Date: 2012-08-22
-:Version: 1.0
-:Manual section: 3
-
-SYNOPSIS
-========
-
-                import timers;
-
-                sub vcl_init {
-                    # Optional, defaults to milliseconds
-                    timers.unit( "microseconds" );
-                }
-
-                sub vcl_deliver {
-                    ### In seconds since the epoch, with 3 decimal points
-                    set resp.http.x-req_start       = timers.req_start();
-                    set resp.http.x-req_end         = timers.req_end();
-
-                    ### As a timestamp. like "Fri, 24 Aug 2012 19:48:03 GMT"
-                    set resp.http.x-req_start_ts    = timers.req_start_as_string();
-                    set resp.http.x-req_end_ts      = timers.req_end_as_string();
-
-                    ### Durations as an int, in your choice of units (see timers.unit)
-                    ### Time from connection accept to delegation to backend
-                    set resp.http.x-req_handle_time     = timers.req_handle_time();
-
-                    ### Time from delegation to backend to first byte from backend
-                    set resp.http.x-req_response_time   = timers.req_response_time();
-                }
-
-
-DESCRIPTION
-===========
-
-Varnish Module (vmod) for accessing various timers from Varnish.
-
-The duration counters are compatible with usage in vmod_statsd (see below).
-
-
-FUNCTIONS
-=========
-
-unit
-----
-
-Prototype::
-
-                unit(STRING S)
-
-Return value
-	NONE
-Description
-    Set the base unit of durations. Your choices are: "seconds", "milliseconds",
-    "microseconds" and "nanoseconds". Best used in vcl_init. Defaults to "milliseconds"
-
-Example::
-
-                timers.unit( "nanoseconds" );
-
-req_start
----------
-
-Prototype::
-
-                req_start();
-
-Return value
-	REAL
-
-Description
-    Returns the start time of the request, in seconds since the epoch, as a number with 3
-    decimal places.	Can be used in vcl_recv and onwards.
-
-Example::
-
-                # Will set the header to something like: 1345837683.704
-                set resp.http.x-req_start = timers.req_start();
-
-req_end
--------
-
-Prototype::
-
-                req_end();
-
-Return value
-	REAL
-Description
-    Returns the end time of the request, in seconds since the epoch, as a number with 3
-    decimal places.	Can be used in vcl_deliver and onwards.
-
-Example::
-
-                # Will set the header to something like: 1345837683.704
-                set resp.http.x-req_end = timers.req_end();
-
-req_start_as_string
--------------------
-
-Prototype::
-
-                req_start_as_string()
-
-Return value
-	STRING
-Description
-	Returns the start time of the request, formatted as an HTTP compatible timestamp.
-	Can be used in vcl_recv and onwards.
-
-Example::
-
-                # Will set the header to something like: Fri, 24 Aug 2012 19:48:03 GMT
-                set resp.http.x-req_start_ts = timers.req_start_as_string();
-
-req_end_as_string
------------------
-
-Prototype::
-
-                req_end_as_string()
-
-Return value
-	STRING
-Description
-	Returns the end time of the request, formatted as an HTTP compatible timestamp.
-	Can be used in vcl_deliver and onwards.
-
-Example::
-
-                # Will set the header to something like: Fri, 24 Aug 2012 19:48:03 GMT
-                set resp.http.x-req_end_ts = timers.req_end_as_string();
-
-req_handle_time
----------------
-
-Prototype::
-
-                req_handle_time()
-
-Return value
-	INT
-Description
-	Return the time it took from the client connection being accepted to the request
-	being handed off to a backend. Note that multiple requests can come in over the
-	same connection, and that the start marker for this is the accepted connection;
-	other requests may have been handled during this time!
-	The unit for this value is determinted by timers.unit and defaults to milliseconds.
-	Can be used in vcl_recv and onwards.
-
-	This duration is compatible with usage in vmod_statsd (see below)
-
-Example::
-
-                # Will set the header to something like: 119
-                set resp.http.x-req_handle_time = timers.req_handle_time();
-
-req_response_time
------------------
-
-Prototype::
-
-                req_response_time()
-
-Return value
-	INT
-Description
-	Return the time it took from when the request was handed off to a backend until the
-	first byte was returned from that backend. This is the effectively the server response
-	time.
-	The unit for this value is determinted by timers.unit and defaults to milliseconds.
-	Can be used in vcl_deliver and onwards.
-
-	This duration is compatible with usage in vmod_statsd (see below)
-
-Example::
-
-                # Will set the header to something like: 119
-                set resp.http.x-req_response_time = timers.req_response_time();
-
-
-
-INSTALLATION
-============
-
-If you received this packge without a pre-generated configure script, you must
-have the GNU Autotools installed, and can then run the 'autogen.sh' script. If
-you received this package with a configure script, skip to the second
-command-line under Usage to configure.
-
-Usage::
-
- # Generate configure script
- ./autogen.sh
-
- # Execute configure script
- ./configure VARNISHSRC=DIR [VMODDIR=DIR]
-
-`VARNISHSRC` is the directory of the Varnish source tree for which to
-compile your vmod. Both the `VARNISHSRC` and `VARNISHSRC/include`
-will be added to the include search paths for your module.
-
-Optionally you can also set the vmod install directory by adding
-`VMODDIR=DIR` (defaults to the pkg-config discovered directory from your
-Varnish installation).
-
-Make targets:
-
-* make - builds the vmod
-* make install - installs your vmod in `VMODDIR`
-* make check - runs the unit tests in ``src/tests/*.vtc``
-
-
-SEE ALSO
-========
-
-* https://github.com/jib/libvmod-statsd
-* https://www.varnish-cache.org
-* http://jiboumans.wordpress.com/2013/02/27/realtime-stats-from-varnish/
-* https://gist.github.com/jib/5034755
-
-COPYRIGHT
-=========
-
-This document is licensed under the same license as the
-libvmod-timers project. See LICENSE for details.
-
-* Copyright (c) 2012 Jos Boumans
diff --git a/libvmod-timers-4.0/autogen.sh b/libvmod-timers-4.0/autogen.sh
deleted file mode 100755
index 2e1fb89..0000000
--- a/libvmod-timers-4.0/autogen.sh
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/bin/sh
-
-warn() {
-	echo "WARNING: $@" 1>&2
-}
-
-case `uname -s` in
-Darwin)
-	LIBTOOLIZE=glibtoolize
-	;;
-FreeBSD)
-	LIBTOOLIZE=libtoolize
-	;;
-Linux)
-	LIBTOOLIZE=libtoolize
-	;;
-SunOS)
-	LIBTOOLIZE=libtoolize
-	;;
-*)
-	warn "unrecognized platform:" `uname -s`
-	LIBTOOLIZE=libtoolize
-esac
-
-automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
-if [ -z "$automake_version" ] ; then
-	warn "unable to determine automake version"
-else
-	case $automake_version in
-		0.*|1.[0-8]|1.[0-8][.-]*)
-			warn "automake ($automake_version) detected; 1.9 or newer recommended"
-			;;
-		*)
-			;;
-	esac
-fi
-
-set -ex
-
-$LIBTOOLIZE --copy --force
-aclocal -I m4
-autoheader
-automake --add-missing --copy --foreign
-autoconf
diff --git a/libvmod-timers-4.0/configure.ac b/libvmod-timers-4.0/configure.ac
deleted file mode 100644
index 5659612..0000000
--- a/libvmod-timers-4.0/configure.ac
+++ /dev/null
@@ -1,60 +0,0 @@
-AC_PREREQ(2.59)
-AC_COPYRIGHT([Copyright (c) 2011 Varnish Software AS])
-AC_INIT([libvmod-timers], [trunk])
-AC_CONFIG_MACRO_DIR([m4])
-AC_CONFIG_SRCDIR(src/vmod_timers.vcc)
-AM_CONFIG_HEADER(config.h)
-
-AC_CANONICAL_SYSTEM
-AC_LANG(C)
-
-AM_INIT_AUTOMAKE([foreign])
-
-AC_GNU_SOURCE
-AC_PROG_CC
-AC_PROG_CC_STDC
-if test "x$ac_cv_prog_cc_c99" = xno; then
-	AC_MSG_ERROR([Could not find a C99 compatible compiler])
-fi
-AC_PROG_CPP
-
-AC_PROG_INSTALL
-AC_PROG_LIBTOOL
-AC_PROG_MAKE_SET
-
-# Check for rst utilities
-AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
-if test "x$RST2MAN" = "xno"; then
-	AC_MSG_WARN([rst2man not found - not building man pages])
-fi
-AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
-
-
-#Check for pkg-config
-PKG_PROG_PKG_CONFIG
-
-# Checks for header files.
-AC_HEADER_STDC
-AC_CHECK_HEADERS([sys/stdlib.h])
-
-
-
-# Check for python
-AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
-
-
-# Varnish include files tree
-VARNISH_VMOD_INCLUDES
-VARNISH_VMOD_DIR
-VARNISH_VMODTOOL
-
-# Check that varnishtest is built in the varnish source directory
-AC_PATH_PROG([VARNISHTEST], [varnishtest])
-AC_PATH_PROG([VARNISHD], [varnishd])
-
-AC_CONFIG_FILES([
-	Makefile
-	src/Makefile
-])
-AC_OUTPUT
-                                  
diff --git a/libvmod-timers-4.0/src/Makefile.am b/libvmod-timers-4.0/src/Makefile.am
deleted file mode 100644
index c5120c0..0000000
--- a/libvmod-timers-4.0/src/Makefile.am
+++ /dev/null
@@ -1,28 +0,0 @@
-AM_CPPFLAGS = @VMOD_INCLUDES@
-
-vmoddir = @VMOD_DIR@
-vmod_LTLIBRARIES = libvmod_timers.la
-
-libvmod_timers_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
-
-libvmod_timers_la_SOURCES = \
-	vcc_if.c \
-	vcc_if.h \
-	vmod_timers.c
-
-vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_timers.vcc
-	@VMODTOOL@ $(top_srcdir)/src/vmod_timers.vcc
-
-VMOD_TESTS = tests/*.vtc
-.PHONY: $(VMOD_TESTS)
-
-tests/*.vtc:
-	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
-
-check: $(VMOD_TESTS)
-
-EXTRA_DIST = \
-	vmod_timers.vcc \
-	$(VMOD_TESTS)
-
-CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h
diff --git a/libvmod-timers-4.0/src/tests/test01.vtc b/libvmod-timers-4.0/src/tests/test01.vtc
deleted file mode 100644
index 2b45424..0000000
--- a/libvmod-timers-4.0/src/tests/test01.vtc
+++ /dev/null
@@ -1,113 +0,0 @@
-varnishtest "Test timers vmod"
-
-server s1 {
-       rxreq
-       txresp
-} -start
-
-
-# Function INT add(INT,INT)
-# Function INT subtract(INT,INT)
-# Function VOID unit(PRIV_VCL,STRING)
-# Function REAL req_start(PRIV_VCL)
-# Function TIME req_start_as_string(PRIV_VCL)
-# Function REAL req_end(PRIV_VCL)
-# Function TIME req_end_as_string(PRIV_VCL)
-# Function INT req_handle_time(PRIV_VCL)
-# Function INT req_response_time(PRIV_VCL)
-# Function INT req_delivery_time(PRIV_VCL)
-
-#    12 VCL_Log      c d req_start 1345837683.704
-#    12 VCL_Log      c d req_start_as_string Fri, 24 Aug 2012 19:48:03 GMT
-#    12 VCL_Log      c d req_end 1345837683.704
-#    12 VCL_Log      c d req_end_as_string Fri, 24 Aug 2012 19:48:03 GMT
-#    12 VCL_Log      c d req_handle_time 108718
-#    12 VCL_Log      c d req_response_time 1434326
-#    12 VCL_Log      c d req_delivery_time -1
-
-varnish v1 -vcl+backend {
-    import timers from "${vmod_topbuild}/src/.libs/libvmod_timers.so";
-
-    sub vcl_init {
-        ### so there's something to see, since there's no actual backend
-        timers.unit( "nanoseconds" );
-    }
-
-    ### XXX there isn't regex support to check the answers, so resort to
-    ### setting flags in vcl deliver :(
-    sub vcl_deliver {
-
-        ######################
-        ### utility functions
-        ######################
-
-        set resp.http.add       = timers.add( 1, 1 );
-        set resp.http.subtract  = timers.subtract( 4, 2 );
-
-        ######################
-        ### Timestamps
-        ######################
-
-        if( timers.req_start() > 0 ) {
-            set resp.http.req_start = 1;
-        }
-
-        ### XXX needs a temporary variable
-        set resp.http.x-req-start = timers.req_start_as_string();
-        if( resp.http.x-req-start ~ "GMT" ) {
-            set resp.http.req_start_as_string = 1;
-        }
-
-        if( timers.req_end() > 0 ) {
-            set resp.http.req_end = 1;
-        }
-
-        ### XXX needs a temporary variable
-        set resp.http.x-req-end = timers.req_end_as_string();
-        if( resp.http.x-req-end ~ "GMT" ) {
-            set resp.http.req_end_as_string = 1;
-        }
-
-        ######################
-        ### Durations
-        ######################
-
-        if( timers.req_handle_time() > 0 ) {
-            set resp.http.req_handle_time = 1;
-        }
-
-        if( timers.req_response_time() > 0 ) {
-            set resp.http.req_response_time = 1;
-        }
-
-        ### XXX vcl_deliver is called before the request is finished (obviously)
-        ### so delivery time will be -1. Until there's a later stage vcl that gets
-        ### called after delivery is completed, we can't expect a valid value here.
-        if( timers.req_delivery_time() < 0 ) {
-            set resp.http.req_delivery_time = 1;
-        }
-    }
-
-} -start
-
-client c1 {
-    txreq -url "/"
-    rxresp
-
-    ### utility functions
-    expect resp.http.add        == 2
-    expect resp.http.subtract   == 2
-
-    ### timestamps
-    expect resp.http.req_start              == 1
-    expect resp.http.req_start_as_string    == 1
-    expect resp.http.req_end                == 1
-    expect resp.http.req_end_as_string      == 1
-
-    ### durations
-    expect resp.http.req_handle_time        == 1
-    expect resp.http.req_response_time      == 1
-    expect resp.http.req_delivery_time      == 1
-}
-
-client c1 -run
diff --git a/libvmod-timers-4.0/src/vmod_timers.c b/libvmod-timers-4.0/src/vmod_timers.c
deleted file mode 100644
index e910717..0000000
--- a/libvmod-timers-4.0/src/vmod_timers.c
+++ /dev/null
@@ -1,243 +0,0 @@
-#include <stdlib.h>
-#include <string.h>
-#include <stdio.h>
-
-#include "vrt.h"
-#include "cache/cache.h"
-
-#include "vcc_if.h"
-
-#define DEBUG 1
-
-#ifdef DEBUG                    // To print diagnostics to the error log
-#define _DEBUG 1                // enable through gcc -DDEBUG
-#else
-#define _DEBUG 0
-#endif
-
-#if 0
-#define NOW (ctx->now)
-#else
-
-double VTIM_real(void);
-#define NOW VTIM_real()
-
-#endif
-
-/*  XXX This is all true for varnish 3.0.3 - the varnish 3 BRANCH is already structured,
-    differently. Ectx->req->specially the session struct has changed, with more data moving into
-    the request struct instead :(
-
-    //*************************
-    //  ReqEnd explained
-    //*************************
-
-    From: https://www.varnish-cache.org/trac/wiki/Varnishlog
-
-    Typically, this looks like
-
-      830 ReqEnd c 877345549 1233949945.075706005 1233949945.075754881 0.017112017 0.000022888 0.000025988
-
-    The first number (877345549) is the XID, which you'll find in the X-Varnish header
-    sent to the client.
-
-    The second number (1233949945.075706005) is the time when we start processing a
-    request. It is decimal seconds since epoch.
-
-    The third number (1233949945.075754881) is the time when the request is completed. It
-    is decimal seconds since epoch.
-
-    The fourth number (0.017112017) is the time elapsed between the session actually being
-    accept(2)-ed and the start of request processing for this request. Keep in mind that
-    sessions are only accept()ed once, so this is time from the initial request was
-    accepted until the current request begun processing (in other words: other requests
-    from the same client/session could have been processed in the meanwhile).
-
-    The fifth number (0.000022888) is the time elapsed from the start of the request
-    processing until we start delivering the object to the client. For all practical
-    purposes, this number is the backend rectx->req->sponse time.
-
-    The sixth and last number (0.000025988) is the time from we start delivering the
-    object until the request completes.
-
-    //*************************
-    //  ReqEnd Code
-    //*************************
-
-    From varnish-3.0.3:./bin/varnishd/cache_center.c:348
-
-    dp = ctx->req->sp->t_rectx->req->sp - ctx->req->sp->t_req;
-    da = ctx->req->sp->t_end - ctx->req->sp->t_rectx->req->sp;
-    dh = ctx->req->sp->t_req - ctx->req->sp->t_open;
-
-    WSL(ctx->req->sp->wrk, SLT_ReqEnd, ctx->req->sp->id, "%u %.9f %.9f %.9f %.9f %.9f",
-        ctx->req->sp->xid, ctx->req->sp->t_req, ctx->req->sp->t_end, dh, dp, da);
-
-    The session struct is documented in: varnish-3.0.3:./bin/varnishd/cache.h:524
-    Important parts:
-
-        // HTTP request
-        struct http             *http;
-
-        // Timestamps, all on TIM_real() timescale
-        double                  t_open;
-        double                  t_req;
-        double                  t_rectx->req->sp;
-        double                  t_end;
-
-*/
-
-// ************************
-// Initialization functions
-// ************************
-
-
-typedef struct timersConfig {
-	int multiplier;             // To go from seconds -> milli, micro or nanoseconds
-} config_t;
-
-int
-init_function(struct vmod_priv *priv, const struct VCL_conf *conf)
-{
-    config_t *cfg;
-    cfg             = malloc(sizeof(config_t));
-    cfg->multiplier = 1000;     // default to milliseconds
-
-    priv->priv      = cfg;
-
-	return (0);
-}
-
-// **********************
-// Config functions
-// **********************
-
-// Set the multiplication factor
-void
-vmod_unit( const struct vrt_ctx *ctx, struct vmod_priv *priv, const char *unit ) {
-    config_t *cfg   = priv->priv;
-
-    cfg->multiplier =
-        strcasecmp( unit, "seconds"      ) == 0 ? 1                     :
-        strcasecmp( unit, "milliseconds" ) == 0 ? 1000                  :
-        strcasecmp( unit, "microseconds" ) == 0 ? 1000 * 1000           :
-        strcasecmp( unit, "nanoseconds"  ) == 0 ? 1000 * 1000 * 1000    :
-        1000;   // default back to milliseconds if you gave us garbage.
-}
-
-// **********************
-// Utility functions
-// **********************
-
-// VCL doesn't let you do math - simple addition function
-VCL_INT
-vmod_add( const struct vrt_ctx *ctx, VCL_INT i, VCL_INT j ) {
-    return i + j;
-}
-
-// VCL doesn't let you do math - simple subtraction function
-VCL_INT
-vmod_subtract( const struct vrt_ctx *ctx, VCL_INT i, VCL_INT j ) {
-    return i - j;
-}
-
-// **********************
-// Start/End functions
-// **********************
-
-// Timestamp of when the request started
-VCL_REAL
-vmod_req_start( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
-    return (double) ctx->req->t_req;
-}
-
-// Timestamp of when the request started as a string representation.
-// Varnish will represent the result differently by the type we use in the .vcc
-VCL_REAL vmod_req_start_as_string() __attribute__((alias("vmod_req_start")));
-
-
-// Timestamp of when the request finished
-VCL_REAL
-vmod_req_end( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
-    config_t *cfg   = priv->priv;
-
-    return (double) ctx->req->sp->t_idle;
-}
-
-// Timestamp of when the request started as a string representation.
-// Varnish will represent the result differently by the type we use in the .vcc
-double vmod_req_end_as_string() __attribute__((alias("vmod_req_end")));
-
-
-// **********************
-// Duration functions
-// **********************
-
-// Duration of Accept -> Sent to backend.
-VCL_INT
-vmod_req_handle_time( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
-    config_t *cfg   = priv->priv;
-
-    if (isnan(ctx->req->t_req) || isnan(ctx->req->t_first))
-        return -1;
-
-    return (int) ((ctx->req->t_req - ctx->req->sp->t_open) * cfg->multiplier);
-}
-
-// Duration of Sent to Backend -> First byte.
-VCL_INT
-vmod_req_response_time( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
-    config_t *cfg   = priv->priv;
-
-    // The response may not have been sent yet (say you're calling this
-    // from vcl_recv) - Return -1 in that case.
-    if (isnan(ctx->req->t_req))
-        return -1;
-
-    return (int) ((ctx->now - ctx->req->t_req) * cfg->multiplier);
-}
-
-// Duration of Request headers received -> now.
-VCL_INT
-vmod_req_processing_time( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
-    config_t *cfg   = priv->priv;
-
-    // The response may not have been sent yet (say you're calling this
-    // from vcl_recv) - Return -1 in that case.
-    if (isnan(ctx->req->t_first))
-        return -1;
-
-    return (int) ((NOW - ctx->req->t_first) * cfg->multiplier);
-}
-
-// Duration of Request headers received -> now.
-VCL_REAL
-vmod_req_processing_time_real( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
-    config_t *cfg   = priv->priv;
-
-    // The response may not have been sent yet (say you're calling this
-    // from vcl_recv) - Return -1 in that case.
-    if (isnan(ctx->req->t_first))
-        return -1;
-
-    return NOW - ctx->req->t_first;
-}
-
-// Duration of First byte -> Last byte
-// XXX since 'vcl_deliver' is the last point of entry for user facing code at
-// the moment, the request will never be 'done' in the vcl users can access,
-// meaning this will always return -1. I'm leaving it here for completeness
-// sake, and it may become useful if there appears a vcl hook for after last
-// byte.
-VCL_INT
-vmod_req_delivery_time( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
-    config_t *cfg   = priv->priv;
-
-    // The response may not have been sent yet (say you're calling this
-    // from vcl_recv) - Return -1 in that case.
-    if (isnan(ctx->req->t_prev) || isnan(ctx->req->sp->t_idle))
-        return -1;
-
-    int rv = (int) ((ctx->req->sp->t_idle - ctx->req->t_prev) * cfg->multiplier);
-    return rv >= 0 ? rv : -1;
-}
diff --git a/libvmod-timers-4.0/src/vmod_timers.vcc b/libvmod-timers-4.0/src/vmod_timers.vcc
deleted file mode 100644
index 15ecd7c..0000000
--- a/libvmod-timers-4.0/src/vmod_timers.vcc
+++ /dev/null
@@ -1,14 +0,0 @@
-$Module timers 3 Varnish timers Module
-$Init init_function
-$Function INT add(INT,INT)
-$Function INT subtract(INT,INT)
-$Function VOID unit(PRIV_VCL,STRING)
-$Function REAL req_start(PRIV_VCL)
-$Function TIME req_start_as_string(PRIV_VCL)
-$Function REAL req_end(PRIV_VCL)
-$Function TIME req_end_as_string(PRIV_VCL)
-$Function INT req_handle_time(PRIV_VCL)
-$Function INT req_response_time(PRIV_VCL)
-$Function INT req_processing_time(PRIV_VCL)
-$Function REAL req_processing_time_real(PRIV_VCL)
-$Function INT req_delivery_time(PRIV_VCL)
diff --git a/varnish4-vmods/debian/changelog b/varnish4-vmods/debian/changelog
new file mode 100644
index 0000000..70446d3
--- /dev/null
+++ b/varnish4-vmods/debian/changelog
@@ -0,0 +1,138 @@
+revsw-varnish4-modules (0.5-8) unstable; urgency=medium
+
+  * Updated Varnish to 4.0.3.
+
+ -- Sorin Otescu <sorin@revsw.com>  Mon, 25 May 2015 19:19:51 +0300
+
+revsw-varnish4-modules (0.5-7) unstable; urgency=medium
+
+  * Added 'req_processing_time_real' to 'timers' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Wed, 08 Apr 2015 20:12:32 +0300
+
+revsw-varnish4-modules (0.5-6) unstable; urgency=medium
+
+  * Different way of computing time in 'timers' VMOD.
+  * Added 'req_processing_time' function to 'timers' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Tue, 27 Jan 2015 18:29:47 +0200
+
+revsw-varnish4-modules (0.5-5) unstable; urgency=medium
+
+  * Added 'filter_csv' and 'filter_except_csv' to 'querystring' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Thu, 22 Jan 2015 20:41:39 +0200
+
+revsw-varnish4-modules (0.5-4) unstable; urgency=medium
+
+  * Added 'querystring' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Mon, 19 Jan 2015 16:53:52 +0200
+
+revsw-varnish4-modules (0.5-3) unstable; urgency=medium
+
+  * Fixed NULL string accesses causing SEGFAULT.
+
+ -- Sorin Otescu <sorin@revsw.com>  Wed, 31 Dec 2014 10:17:52 +0200
+
+revsw-varnish4-modules (0.5-2) unstable; urgency=medium
+
+  * Updated 'cookie' VMOD from original repo.
+  * Fixed 'chromelogger' VMOD for multithreaded use.
+  * Added 'collect_partial' funtion to 'chromelogger' VMOD, to allow
+    logging from 'vcl_backend_response'.
+  * Removed empty 'revvar' VMOD init function.
+
+ -- Sorin Otescu <sorin@revsw.com>  Tue, 30 Dec 2014 18:11:12 +0200
+
+revsw-varnish4-modules (0.5-1) unstable; urgency=medium
+
+  * Fixed allocation for 'chromelogger' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Mon, 29 Dec 2014 07:20:53 +0200
+
+revsw-varnish4-modules (0.5) unstable; urgency=medium
+
+  * Varnish 4 VMODs.
+
+ -- Sorin Otescu <sorin@revsw.com>  Sat, 27 Dec 2014 12:18:02 +0200
+
+revsw-varnish4-modules (0.4-1) unstable; urgency=medium
+
+  * Added global version for get/set int, bool, real and duration.
+
+ -- Sorin Otescu <sorin@revsw.com>  Wed, 08 Oct 2014 17:56:02 +0300
+
+revsw-varnish4-modules (0.4) unstable; urgency=medium
+
+  * Added 'chromelogger' and 'query' VMODs.
+  * Added debug package.
+
+ -- Sorin Otescu <sorin@revsw.com>  Tue, 30 Sep 2014 21:03:23 +0300
+
+revsw-varnish4-modules (0.3-6) unstable; urgency=medium
+
+  * Fixed crash in 'var' VMOD.
+  * Added 'set_string_allow_null' to 'var' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Thu, 28 Aug 2014 20:30:51 +0300
+
+revsw-varnish4-modules (0.3-5) unstable; urgency=medium
+
+  * Functions using BOOL now really use BOOL (not INT).
+
+ -- Sorin Otescu <sorin@revsw.com>  Mon, 25 Aug 2014 12:44:16 +0300
+
+revsw-varnish4-modules (0.3-4) unstable; urgency=medium
+
+  * Added 'header' VMOD.
+  * Added 'unset', 'set_string_literal' and 'string_set_is_empty'
+    functions to 'var' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Thu, 21 Aug 2014 15:07:36 +0300
+
+revsw-varnish4-modules (0.3-3) unstable; urgency=medium
+
+  * Switched to Varnish-based allocator, allocating memory from 
+    session allocator.
+
+ -- Sorin Otescu <sorin@revsw.com>  Wed, 20 Aug 2014 15:48:04 +0300
+
+revsw-varnish4-modules (0.3-2) unstable; urgency=medium
+
+  * Added 'new_string_set', 'add_to_string_set', 'del_from_string_set'
+    and 'get_string_set_as_csv' to 'var' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Wed, 13 Aug 2014 16:27:55 +0300
+
+revsw-varnish4-modules (0.3-1) unstable; urgency=medium
+
+  * Added 'set_bool' 'get_bool', 'and_or_set_bool' and 'or_or_set_bool' 
+    to 'var' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Tue, 12 Aug 2014 11:40:51 +0300
+
+revsw-varnish4-modules (0.3) unstable; urgency=medium
+
+  * Added 'var' VMOD.
+
+ -- Sorin Otescu <sorin@revsw.com>  Fri, 08 Aug 2014 12:26:34 -0700
+
+revsw-varnish4-modules (0.2-1) unstable; urgency=medium
+
+  * Build-depend on python-docutils.
+
+ -- Sorin Otescu <sorin@revsw.com>  Mon, 18 Aug 2014 18:53:45 +0300
+
+revsw-varnish4-modules (0.2) unstable; urgency=low
+
+  * Added 'filter_only' to 'cookies' module.
+
+ -- Sorin Otescu <sorin@revsw.com>  Thu, 07 Aug 2014 16:52:01 -0700
+
+revsw-varnish4-modules (0.1) unstable; urgency=low
+
+  * First version
+
+ -- Sorin Otescu <sorin@revsw.com>  Thu, 07 Aug 2014 13:20:20 -0700
+
diff --git a/varnish4-vmods/debian/compat b/varnish4-vmods/debian/compat
new file mode 100644
index 0000000..7f8f011
--- /dev/null
+++ b/varnish4-vmods/debian/compat
@@ -0,0 +1 @@
+7
diff --git a/varnish4-vmods/debian/control b/varnish4-vmods/debian/control
new file mode 100644
index 0000000..96b5898
--- /dev/null
+++ b/varnish4-vmods/debian/control
@@ -0,0 +1,25 @@
+Source: revsw-varnish4-modules
+Section: web
+Priority: extra
+Maintainer: Sorin Otescu <sorin@revsw.com>
+Build-Depends: debhelper (>= 7), build-essential, python-docutils,
+ revsw-libvarnish4api-dev (>= 4.0.3)
+Built-Using: revsw-varnish4 (= 4.0.3)
+Standards-Version: 3.8.1
+
+Package: revsw-varnish4-modules
+Architecture: any
+Depends: revsw-varnish4 (>= 4.0.3), ${Varnish:ABI}, ${misc:Depends}
+Conflicts: revsw-varnish-modules
+Replaces: revsw-varnish-modules
+Description: Various VMODs for Varnish
+ Includes: Cookie, Timers, ChromeLogger, Header, Var
+
+Package: revsw-varnish4-modules-dbg
+Architecture: any
+Depends: revsw-varnish4-modules (= ${binary:Version}),
+         ${misc:Depends}
+Conflicts: revsw-varnish-modules-dbg
+Replaces: revsw-varnish-modules-dbg
+Description: Various VMODs for Varnish (debug symbols)
+ Includes: Cookie, Timers, ChromeLogger, Header, Var
diff --git a/varnish4-vmods/debian/copyright b/varnish4-vmods/debian/copyright
new file mode 100644
index 0000000..265b447
--- /dev/null
+++ b/varnish4-vmods/debian/copyright
@@ -0,0 +1,29 @@
+Copyright:
+
+    Copyright 2009-2011 Varnish Software AS
+
+License:
+
+Copyright (c) 2010-2011 Varnish Software AS
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
diff --git a/varnish4-vmods/debian/dirs b/varnish4-vmods/debian/dirs
new file mode 100644
index 0000000..e827921
--- /dev/null
+++ b/varnish4-vmods/debian/dirs
@@ -0,0 +1 @@
+usr/share/doc/revsw-varnish-modules
diff --git a/varnish4-vmods/debian/revsw-varnish4-modules.postinst b/varnish4-vmods/debian/revsw-varnish4-modules.postinst
new file mode 100644
index 0000000..b9b6aef
--- /dev/null
+++ b/varnish4-vmods/debian/revsw-varnish4-modules.postinst
@@ -0,0 +1,8 @@
+# dh_installdeb will replace this with shell code automatically
+# generated by other debhelper scripts.
+#DEBHELPER#
+
+# Restart listener service if it exists and it is running
+if service revsw-varnish4 status >/dev/null 2>&1 ; then
+    service revsw-varnish4 restart
+fi
\ No newline at end of file
diff --git a/varnish4-vmods/debian/rules b/varnish4-vmods/debian/rules
new file mode 100755
index 0000000..f36b4d8
--- /dev/null
+++ b/varnish4-vmods/debian/rules
@@ -0,0 +1,57 @@
+#!/usr/bin/make -f
+export DH_VERBOSE=1
+
+VARNISHSRC := $(shell readlink -f ../varnish-4.0.3)
+VMODDIR := /usr/lib/varnish/vmods
+VMOD_ABI := $(shell printf '\#include "vmod_abi.h"\nVMOD_ABI_Version' | cpp - -I$(VARNISHSRC)/include | sed '/^\#/D;s/"//g;s/\([A-Z]\)/\L\1/g;s/[^a-z0-9.]/-/g;s/varnish/varnishabi/')
+
+LOCAL_CFLAGS := -g3
+#LOCAL_CFLAGS := -O0 -g3
+LOCAL_LDFLAGS := -g3
+
+override_dh_auto_configure:
+	cd libvmod-querystring-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
+	cd libvmod-chromelogger-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
+	cd libvmod-cookie-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
+	cd libvmod-revvar-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
+	cd libvmod-header-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
+	cd libvmod-timers-4.0 && ./autogen.sh && CFLAGS="$(LOCAL_CFLAGS)" LDFLAGS="$(LOCAL_LDFLAGS)" ./configure --prefix=/usr --datarootdir=/usr/share --disable-static VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
+
+override_dh_gencontrol:
+	echo "Varnish:ABI=$(VMOD_ABI)" >> debian/substvars
+
+	if [ -n "$$DEBIAN_OVERRIDE_BINARY_VERSION" ]; then \
+		dh_gencontrol -- -Tdebian/substvars -v$$DEBIAN_OVERRIDE_BINARY_VERSION; \
+	else \
+		dh_gencontrol -- -Tdebian/substvars; \
+	fi
+
+override_dh_auto_build:
+	$(MAKE) -C libvmod-querystring-4.0
+	$(MAKE) -C libvmod-chromelogger-4.0
+	$(MAKE) -C libvmod-cookie-4.0
+	$(MAKE) -C libvmod-revvar-4.0
+	$(MAKE) -C libvmod-header-4.0
+	$(MAKE) -C libvmod-timers-4.0
+
+override_dh_auto_install:
+	$(MAKE) -C libvmod-querystring-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
+	$(MAKE) -C libvmod-chromelogger-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
+	$(MAKE) -C libvmod-cookie-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
+	$(MAKE) -C libvmod-revvar-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
+	$(MAKE) -C libvmod-header-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
+	$(MAKE) -C libvmod-timers-4.0 DESTDIR=$$(pwd)/debian/revsw-varnish4-modules install
+
+override_dh_auto_clean:
+	$(MAKE) -C libvmod-querystring-4.0 distclean || true
+	$(MAKE) -C libvmod-chromelogger-4.0 distclean || true
+	$(MAKE) -C libvmod-cookie-4.0 distclean || true
+	$(MAKE) -C libvmod-revvar-4.0 distclean || true
+	$(MAKE) -C libvmod-header-4.0 distclean || true
+	$(MAKE) -C libvmod-timers-4.0 distclean || true
+
+override_dh_strip:
+	dh_strip --dbg-package=revsw-varnish4-modules-dbg
+
+%:
+	dh $@
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/.gitignore b/varnish4-vmods/libvmod-chromelogger-4.0/.gitignore
new file mode 100644
index 0000000..12120ba
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/.gitignore
@@ -0,0 +1,29 @@
+Makefile
+Makefile.in
+.deps/
+.libs/
+*.o
+*.lo
+*.la
+*~
+
+/aclocal.m4
+/autom4te.cache/
+/compile
+/config.guess
+/config.h
+/config.h.in
+/config.log
+/config.status
+/config.sub
+/configure
+/depcomp
+/install-sh
+/libtool
+/ltmain.sh
+/missing
+/stamp-h1
+/m4/
+
+/src/vcc_if.c
+/src/vcc_if.h
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/COPYING b/varnish4-vmods/libvmod-chromelogger-4.0/COPYING
new file mode 100644
index 0000000..f792696
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/COPYING
@@ -0,0 +1,7 @@
+Copyright (c) 2011 Varnish Software AS
+...
+See LICENSE for details.
+
+You're free to use and distribute this under terms in the
+LICENSE. Please add your relevant copyright statements.
+
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/LICENSE b/varnish4-vmods/libvmod-chromelogger-4.0/LICENSE
new file mode 100644
index 0000000..264d421
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/LICENSE
@@ -0,0 +1,20 @@
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/Makefile.am b/varnish4-vmods/libvmod-chromelogger-4.0/Makefile.am
new file mode 100644
index 0000000..a348b23
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/Makefile.am
@@ -0,0 +1,18 @@
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = src
+
+EXTRA_DIST = README.rst
+
+dist_man_MANS = vmod_chromelogger.3
+MAINTAINERCLEANFILES = $(dist_man_MANS)
+
+vmod_chromelogger.3: README.rst
+if HAVE_RST2MAN
+	${RST2MAN} README.rst $@
+else
+	@echo "========================================"
+	@echo "You need rst2man installed to make dist"
+	@echo "========================================"
+	@false
+endif
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/README.rst b/varnish4-vmods/libvmod-chromelogger-4.0/README.rst
new file mode 100644
index 0000000..fea606a
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/README.rst
@@ -0,0 +1,123 @@
+=================
+vmod_chromelogger
+=================
+
+--------------------------------
+Varnish Module for Chrome Logger
+--------------------------------
+
+:Author: Lorenz Schori
+:Date: 2013-09-21
+:Version: 0.1
+:Manual section: 3
+
+SYNOPSIS
+========
+
+                import chromelogger;
+
+                sub vcl_recv {
+                    chromelogger.log("So long, and thanks for all the fish");
+                }
+
+                sub vcl_backend_response {
+                    ### Collect backend-related entries into a temporary header
+                    set resp.http.X-ChromeLogger-BEData = chromelogger.collect_partial();
+                }
+
+                sub vcl_deliver {
+                    ### Collect and encode all log entries
+                    set resp.http.X-ChromeLogger-Data = chromelogger.collect(resp.http.X-ChromeLogger-BEData);
+                    unset resp.http.X-ChromeLogger-BEData;
+                }
+
+
+DESCRIPTION
+===========
+
+Varnish Module (vmod) for sending log entries to chrome logger
+
+
+FUNCTIONS
+=========
+
+log
+---
+
+Prototype::
+
+                log(STRING S)
+
+Return value
+	NONE
+Description
+    Record a log message and store it internally.
+
+Example::
+
+                chromelogger.log("So long, and thanks for all the fish");
+
+collect
+-------
+
+Prototype::
+
+                collect();
+
+Return value
+	REAL
+
+Description
+    Return all log entries and encode them for delivery to the chrome logger
+    client.
+
+Example::
+
+                ### Collect and encode all log entries
+                set resp.http.X-ChromeLogger-Data = chromelogger.collect();
+
+
+
+INSTALLATION
+============
+
+If you received this packge without a pre-generated configure script, you must
+have the GNU Autotools installed, and can then run the 'autogen.sh' script. If
+you received this package with a configure script, skip to the second
+command-line under Usage to configure.
+
+Usage::
+
+ # Generate configure script
+ ./autogen.sh
+
+ # Execute configure script
+ ./configure VARNISHSRC=DIR [VMODDIR=DIR]
+
+`VARNISHSRC` is the directory of the Varnish source tree for which to
+compile your vmod. Both the `VARNISHSRC` and `VARNISHSRC/include`
+will be added to the include search paths for your module.
+
+Optionally you can also set the vmod install directory by adding
+`VMODDIR=DIR` (defaults to the pkg-config discovered directory from your
+Varnish installation).
+
+Make targets:
+
+* make - builds the vmod
+* make install - installs your vmod in `VMODDIR`
+* make check - runs the unit tests in ``src/tests/*.vtc``
+
+
+SEE ALSO
+========
+
+* http://craig.is/writing/chrome-logger
+
+COPYRIGHT
+=========
+
+This document is licensed under the same license as the
+libvmod-chromelogger project. See LICENSE for details.
+
+* Copyright (c) 2013 Lorenz Schori
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/autogen.sh b/varnish4-vmods/libvmod-chromelogger-4.0/autogen.sh
new file mode 100755
index 0000000..9a12ef5
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/autogen.sh
@@ -0,0 +1,44 @@
+#!/bin/sh
+
+warn() {
+	echo "WARNING: $@" 1>&2
+}
+
+case `uname -s` in
+Darwin)
+	LIBTOOLIZE=glibtoolize
+	;;
+FreeBSD)
+	LIBTOOLIZE=libtoolize
+	;;
+Linux)
+	LIBTOOLIZE=libtoolize
+	;;
+SunOS)
+	LIBTOOLIZE=libtoolize
+	;;
+*)
+	warn "unrecognized platform:" `uname -s`
+	LIBTOOLIZE=libtoolize
+esac
+
+automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
+if [ -z "$automake_version" ] ; then
+	warn "unable to determine automake version"
+else
+	case $automake_version in
+		0.*|1.[0-8]|1.[0-8][.-]*)
+			warn "automake ($automake_version) detected; 1.9 or newer recommended"
+			;;
+		*)
+			;;
+	esac
+fi
+
+set -ex
+
+aclocal -I m4
+$LIBTOOLIZE --copy --force
+autoheader
+automake --add-missing --copy --foreign
+autoconf
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/configure.ac b/varnish4-vmods/libvmod-chromelogger-4.0/configure.ac
new file mode 100644
index 0000000..3a2e6fc
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/configure.ac
@@ -0,0 +1,60 @@
+AC_PREREQ(2.59)
+AC_COPYRIGHT([Copyright (c) 2011 Varnish Software AS])
+AC_INIT([libvmod-chromelogger], [trunk])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_SRCDIR(src/vmod_chromelogger.vcc)
+AM_CONFIG_HEADER(config.h)
+
+AC_CANONICAL_SYSTEM
+AC_LANG(C)
+
+AM_INIT_AUTOMAKE([foreign])
+
+AC_GNU_SOURCE
+AC_PROG_CC
+AC_PROG_CC_STDC
+if test "x$ac_cv_prog_cc_c99" = xno; then
+	AC_MSG_ERROR([Could not find a C99 compatible compiler])
+fi
+AC_PROG_CPP
+
+AC_PROG_INSTALL
+AC_PROG_LIBTOOL
+AC_PROG_MAKE_SET
+
+# Check for rst utilities
+AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
+if test "x$RST2MAN" = "xno"; then
+	AC_MSG_WARN([rst2man not found - not building man pages])
+fi
+AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
+
+
+#Check for pkg-config
+PKG_PROG_PKG_CONFIG
+
+
+AC_HEADER_STDC
+AC_CHECK_HEADERS([sys/stdlib.h])
+
+
+
+# Check for python
+AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
+
+
+# Varnish include files tree
+VARNISH_VMOD_INCLUDES
+VARNISH_VMOD_DIR
+VARNISH_VMODTOOL
+
+# Check that varnishtest is built in the varnish source directory
+AC_PATH_PROG([VARNISHTEST], [varnishtest])
+AC_PATH_PROG([VARNISHD], [varnishd])
+
+AC_CONFIG_FILES([
+    Makefile
+    src/Makefile
+])
+AC_OUTPUT
+                                  
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/src/Makefile.am b/varnish4-vmods/libvmod-chromelogger-4.0/src/Makefile.am
new file mode 100644
index 0000000..78fd4c6
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/src/Makefile.am
@@ -0,0 +1,37 @@
+# if VARNISHSRC is defined on the command-line, use that. Otherwise, build
+# this the same as the modules that come with varnish (i.e. we're building
+# within the varnish src dir itself, and $(top_srcdir) is the varnish source).
+#
+
+AM_CPPFLAGS = @VMOD_INCLUDES@
+
+#vmoddir = /usr/local/lib/varnish/vmods
+vmoddir = @VMOD_DIR@
+
+vmod_LTLIBRARIES = libvmod_chromelogger.la
+
+libvmod_chromelogger_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
+
+libvmod_chromelogger_la_SOURCES = \
+	vcc_if.c \
+	vcc_if.h \
+	vmod_chromelogger.c
+
+
+vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_chromelogger.vcc
+	@VMODTOOL@ $(top_srcdir)/src/vmod_chromelogger.vcc
+
+VMOD_TESTS = tests/*.vtc
+.PHONY: $(VMOD_TESTS)
+
+tests/*.vtc:
+	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
+
+check: $(VMOD_TESTS)
+
+EXTRA_DIST = \
+	vmod_chromelogger.vcc \
+	$(VMOD_TESTS)
+
+CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h 
+
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/src/tests/test01.vtc b/varnish4-vmods/libvmod-chromelogger-4.0/src/tests/test01.vtc
new file mode 100644
index 0000000..7d2dbf9
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/src/tests/test01.vtc
@@ -0,0 +1,26 @@
+varnishtest "Test chromelogger vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+    import chromelogger from "${vmod_topbuild}/src/.libs/libvmod_chromelogger.so";
+
+    sub vcl_deliver {
+        chromelogger.log("So long, and thanks for all the fish");
+        set resp.http.X-ChromeLogger-Data = chromelogger.collect();
+    }
+
+} -start
+
+client c1 {
+    txreq -url "/"
+    rxresp
+
+    ### utility functions
+    expect resp.http.X-ChromeLogger-Data == eyJ2ZXJzaW9uIjogIjAuMiIsImNvbHVtbnMiOiBbImxvZyIsICJiYWNrdHJhY2UiLCAidHlwZSJdLCJyb3dzIjogW1tbIlNvIGxvbmcsIGFuZCB0aGFua3MgZm9yIGFsbCB0aGUgZmlzaCJdLCJGSVhNRSIsImxvZyJdXX0=
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/src/vmod_chromelogger.c b/varnish4-vmods/libvmod-chromelogger-4.0/src/vmod_chromelogger.c
new file mode 100644
index 0000000..6dde937
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/src/vmod_chromelogger.c
@@ -0,0 +1,323 @@
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <ctype.h>
+
+#include "vrt.h"
+#include "cache/cache.h"
+
+#include "vcc_if.h"
+
+#define DEBUG 1
+
+#ifdef DEBUG                    // To print diagnostics to the error log
+#define _DEBUG 1                // enable through gcc -DDEBUG
+#else
+#define _DEBUG 0
+#endif
+
+#define MAX_DATA 1024
+#define MAX_BT 256
+
+const char * const typeNames[] = {
+    "log",
+    "warn",
+    "error",
+    "info",
+    "group",
+    "groupEnd",
+    "groupCollapsed",
+    "table"
+};
+
+enum type_e {
+    LOG,
+    WARN,
+    ERROR,
+    INFO,
+    GROUP,
+    GROUPEND,
+    GROUPCOLLAPSED,
+    TABLE
+};
+
+struct entry {
+	char data[MAX_DATA];
+    char backtrace[MAX_BT];
+    enum type_e type;
+	VTAILQ_ENTRY(entry) list;
+};
+
+struct vmod_chromelogger {
+	unsigned magic;
+#define VMOD_CHROMELOGGER_MAGIC 0x4EF1FC23
+	unsigned xid;
+	VTAILQ_HEAD(, entry) logentries;
+};
+
+static pthread_key_t key;
+static pthread_once_t key_is_initialized = PTHREAD_ONCE_INIT;
+
+static void vmod_VSB_quote_real(struct vsb *s, const char *p);
+static void vmod_VSB_base64_encode(struct vsb *s, const char *p, ssize_t len);
+
+static void
+mkkey(void) {
+	AZ(pthread_key_create(&key, free));
+}
+
+int
+init_function(struct vmod_priv *priv, const struct VCL_conf *conf) {
+	pthread_once(&key_is_initialized, mkkey);
+	return (0);
+}
+
+static void
+clobj_clear(struct vmod_chromelogger *c) {
+	c->magic = VMOD_CHROMELOGGER_MAGIC;
+	VTAILQ_INIT(&c->logentries);
+	c->xid = 0;
+}
+
+static unsigned
+get_xid(const struct vrt_ctx *ctx) {
+    /*
+     * SORIN: don't use req->sp->vxid because it's not reliable (repeated values).
+     * Use the log wid instead (the "2" in "*   << Request  >> 2" in varnishlog).
+     */
+    if (ctx->req)
+        return ctx->req->vsl[0].wid;
+
+    AN(ctx->bo);
+    return ctx->bo->vsl->wid;
+}
+
+static struct vmod_chromelogger *
+clobj_get(const struct vrt_ctx *ctx) {
+	struct vmod_chromelogger *vcp = pthread_getspecific(key);
+
+	if (!vcp) {
+		vcp = malloc(sizeof *vcp);
+		AN(vcp);
+		clobj_clear(vcp);
+		vcp->xid = get_xid(ctx);
+		AZ(pthread_setspecific(key, vcp));
+	}
+
+	CHECK_OBJ_NOTNULL(vcp, VMOD_CHROMELOGGER_MAGIC);
+
+	if (vcp->xid != get_xid(ctx)) {
+		// Reuse previously allocated storage
+		clobj_clear(vcp);
+		vcp->xid = get_xid(ctx);
+	}
+
+	return (vcp);
+}
+
+/**
+ * Add a new log message.
+ */
+void
+vmod_log(const struct vrt_ctx *ctx, const char *s) {
+    struct vmod_chromelogger *vcp = clobj_get(ctx);
+    int c;
+    struct entry *newentry;
+
+    CHECK_OBJ_NOTNULL(vcp, VMOD_CHROMELOGGER_MAGIC);
+
+        // Ignore empty lines
+	if (strlen(s) == 0)
+		return;
+
+    newentry = (struct entry*)WS_Alloc(ctx->ws, sizeof(struct entry));
+	AN(newentry);
+
+    strncpy(newentry->data, s, MAX_DATA);
+    newentry->data[MAX_DATA-1] = '\0';
+    strcpy(newentry->backtrace, "FIXME");
+    newentry->type = LOG;
+
+	VTAILQ_INSERT_TAIL(&vcp->logentries, newentry, list);
+}
+
+static void
+get_json_entries(struct vmod_chromelogger *vcp, struct vsb *json) {
+    struct entry *e;
+    struct entry *e2;
+
+    VTAILQ_FOREACH_SAFE(e, &vcp->logentries, list, e2) {
+        VSB_cat(json, "[[");
+        vmod_VSB_quote_real(json, e->data);
+        VSB_cat(json, "],");
+        vmod_VSB_quote_real(json, e->backtrace);
+        VSB_cat(json, ",\"");
+        VSB_cat(json, typeNames[e->type]);
+        VSB_cat(json, "\"],");
+        VTAILQ_REMOVE(&vcp->logentries, e, list);
+    }
+
+    // Remove last comma
+    json->s_len--;
+}
+
+const char * __match_proto__()
+vmod_collect(const struct vrt_ctx *ctx, VCL_STRING extra_json) {
+    struct vmod_chromelogger *vcp = clobj_get(ctx);
+	struct vsb *json;
+	struct vsb *output;
+	unsigned v, u;
+	char *p;
+
+    CHECK_OBJ_NOTNULL(vcp, VMOD_CHROMELOGGER_MAGIC);
+
+    if (VTAILQ_EMPTY(&vcp->logentries))
+        return NULL;
+
+	u = WS_Reserve(ctx->ws, 0);
+	p = ctx->ws->f;
+
+	json = VSB_new_auto();
+	AN(json);
+
+	VSB_cpy(json, "{\"version\": \"0.2\",\"columns\": [\"log\", \"backtrace\", \"type\"],\"rows\": [");
+
+    get_json_entries(vcp, json);
+
+    if (extra_json && *extra_json) {
+        VSB_cat(json, ",");
+        VSB_cat(json, extra_json);
+    }
+
+	VSB_cat(json, "]}");
+	VSB_finish(json);
+
+    // Base64 encode
+	output = VSB_new_auto();
+	AN(output);
+
+    vmod_VSB_base64_encode(output, VSB_data(json), VSB_len(json));
+	VSB_finish(output);
+
+	v = VSB_len(output) + 1;
+    if (v > u) {
+        /* Too big; roll back */
+        v = 0;
+        p = NULL;
+    }
+    else
+        strcpy(p, VSB_data(output));
+
+	VSB_delete(output);
+	VSB_delete(json);
+
+	WS_Release(ctx->ws, v);
+	return (p);
+}
+
+const char * __match_proto__()
+vmod_collect_partial(const struct vrt_ctx *ctx) {
+    struct vmod_chromelogger *vcp = clobj_get(ctx);
+	struct vsb *json;
+	unsigned v, u;
+	char *p;
+
+    CHECK_OBJ_NOTNULL(vcp, VMOD_CHROMELOGGER_MAGIC);
+
+    if (VTAILQ_EMPTY(&vcp->logentries))
+        return NULL;
+
+	u = WS_Reserve(ctx->ws, 0);
+	p = ctx->ws->f;
+
+	json = VSB_new_auto();
+	AN(json);
+
+    get_json_entries(vcp, json);
+	VSB_finish(json);
+
+	v = VSB_len(json) + 1;
+    if (v > u) {
+        /* Too big; roll back */
+        v = 0;
+        p = NULL;
+    }
+    else
+        strcpy(p, VSB_data(json));
+
+	VSB_delete(json);
+
+	WS_Release(ctx->ws, v);
+	return (p);
+}
+
+/*
+ * Quote a string
+ */
+static void
+vmod_VSB_quote_real(struct vsb *s, const char *p)
+{
+	const char *q;
+        int len = strlen(p);
+
+	(void)VSB_putc(s, '"');
+	for (q = p; q < p + len; q++) {
+		switch (*q) {
+		case ' ':
+			(void)VSB_putc(s, *q);
+			break;
+		case '\\':
+		case '"':
+			(void)VSB_putc(s, '\\');
+			(void)VSB_putc(s, *q);
+			break;
+		case '\n':
+			(void)VSB_cat(s, "\\n");
+			break;
+		case '\r':
+			(void)VSB_cat(s, "\\r");
+			break;
+		case '\t':
+			(void)VSB_cat(s, "\\t");
+			break;
+		default:
+			if (isgraph(*q))
+				(void)VSB_putc(s, *q);
+			else
+				(void)VSB_printf(s, "\\%o", *q & 0xff);
+			break;
+		}
+	}
+	(void)VSB_putc(s, '"');
+}
+
+static void
+vmod_VSB_base64_encode(struct vsb *s, const char *p, ssize_t len) {
+    const static char* b64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+    ssize_t i;
+
+    if (len == -1) {
+        len = strlen(p);
+    }
+
+    for (i = 0; i < len - 2; i += 3) {
+        VSB_putc(s, b64[p[i] >> 2]);
+        VSB_putc(s, b64[((0x3 & p[i]) << 4) + (p[i+1] >> 4)]);
+        VSB_putc(s, b64[((0xf & p[i+1]) << 2) + (p[i+2] >> 6)]);
+        VSB_putc(s, b64[0x3f & p[i+2]]);
+    }
+
+    if (len % 3 == 2) {
+        VSB_putc(s, b64[p[i] >> 2]);
+        VSB_putc(s, b64[((0x3 & p[i]) << 4) + (p[i+1] >> 4)]);
+        VSB_putc(s, b64[((0xf & p[i+1]) << 2)]);
+        VSB_putc(s, '=');
+    }
+
+    if (len % 3 == 1) {
+        VSB_putc(s, b64[p[i] >> 2]);
+        VSB_putc(s, b64[((0x3 & p[i]) << 4)]);
+        VSB_putc(s, '=');
+        VSB_putc(s, '=');
+    }
+}
diff --git a/varnish4-vmods/libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc b/varnish4-vmods/libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc
new file mode 100644
index 0000000..0da047e
--- /dev/null
+++ b/varnish4-vmods/libvmod-chromelogger-4.0/src/vmod_chromelogger.vcc
@@ -0,0 +1,5 @@
+$Module chromelogger 3 Varnish chromelogger Module
+$Init init_function
+$Function VOID log(STRING)
+$Function STRING collect(STRING)
+$Function STRING collect_partial()
diff --git a/varnish4-vmods/libvmod-cookie-4.0/.gitignore b/varnish4-vmods/libvmod-cookie-4.0/.gitignore
new file mode 100644
index 0000000..6df314e
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/.gitignore
@@ -0,0 +1,31 @@
+Makefile
+Makefile.in
+.deps/
+.libs/
+*.o
+*.lo
+*.la
+*~
+*.[1-9]
+
+/aclocal.m4
+/autom4te.cache/
+/compile
+/config.guess
+/config.h
+/config.h.in
+/config.log
+/config.status
+/config.sub
+/configure
+/depcomp
+/install-sh
+/libtool
+/ltmain.sh
+/missing
+/stamp-h1
+/m4/
+
+/src/vcc_if.c
+/src/vcc_if.h
+/src/*rst
diff --git a/varnish4-vmods/libvmod-cookie-4.0/.travis.yml b/varnish4-vmods/libvmod-cookie-4.0/.travis.yml
new file mode 100644
index 0000000..41a8eca
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/.travis.yml
@@ -0,0 +1,23 @@
+language: c
+
+before_install:
+  - sudo apt-get update -q
+  - sudo apt-get install -qq apt-transport-https python-docutils
+  - curl https://repo.varnish-cache.org/debian/GPG-key.txt | sudo apt-key add -
+  - echo "deb https://repo.varnish-cache.org/ubuntu/ precise varnish-4.0" | sudo tee /etc/apt/sources.list.d/varnish-cache.list
+  - sudo apt-get -q update
+  - sudo apt-get install varnish libvarnishapi-dev
+
+
+before_script:
+  - ./autogen.sh
+  - ./configure --prefix=/usr
+  - make -j4
+
+script:
+  - make check -j4
+
+compiler:
+  - clang
+  - gcc
+
diff --git a/varnish4-vmods/libvmod-cookie-4.0/COPYING b/varnish4-vmods/libvmod-cookie-4.0/COPYING
new file mode 100644
index 0000000..f792696
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/COPYING
@@ -0,0 +1,7 @@
+Copyright (c) 2011 Varnish Software AS
+...
+See LICENSE for details.
+
+You're free to use and distribute this under terms in the
+LICENSE. Please add your relevant copyright statements.
+
diff --git a/varnish4-vmods/libvmod-cookie-4.0/LICENSE b/varnish4-vmods/libvmod-cookie-4.0/LICENSE
new file mode 100644
index 0000000..264d421
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/LICENSE
@@ -0,0 +1,20 @@
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
diff --git a/varnish4-vmods/libvmod-cookie-4.0/Makefile.am b/varnish4-vmods/libvmod-cookie-4.0/Makefile.am
new file mode 100644
index 0000000..c2473cd
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/Makefile.am
@@ -0,0 +1,22 @@
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = src
+
+doc_DATA = README.rst LICENSE
+DISTCHECK_CONFIGURE_FLAGS = \
+	VMOD_DIR='$${libdir}/varnish/vmods'
+
+EXTRA_DIST = README.rst LICENSE vmod-cookie.spec debian
+
+dist_man_MANS = vmod_cookie.3
+MAINTAINERCLEANFILES = $(dist_man_MANS)
+
+%.1 %.2 %.3 %.4 %.5 %.6 %.7 %.8 %.9: README.rst
+if HAVE_RST2MAN
+	${RST2MAN} $< $@
+else
+	@echo "========================================"
+	@echo "You need rst2man installed to make dist"
+	@echo "========================================"
+	@false
+endif
diff --git a/varnish4-vmods/libvmod-cookie-4.0/README.rst b/varnish4-vmods/libvmod-cookie-4.0/README.rst
new file mode 100644
index 0000000..c146afb
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/README.rst
@@ -0,0 +1,275 @@
+============
+vmod_cookie
+============
+
+----------------------
+Varnish Cookie Module
+----------------------
+
+:Author: Lasse Karstensen
+:Date: 2013-07-12
+:Version: 1.0
+:Manual section: 3
+
+SYNOPSIS
+========
+
+import cookie;
+
+DESCRIPTION
+===========
+
+Functions to handle the content of the Cookie header without complex use of
+regular expressions.
+
+Parses a cookie header into an internal data store, where per-cookie
+get/set/delete functions are available. A filter_except() method removes all
+but a set comma-separated list of cookies.
+
+A convenience function for formatting the Set-Cookie Expires date field
+is also included. It might be needed to use libvmod-header if there might
+be multiple Set-Cookie response headers.
+
+Only within a single VMOD call is the state set by cookie.parse() /
+cookie.set() guaranteed to persist. This VMOD was designed to be used
+for cleaning up a request in vcl_recv, but works outside recv if needed.
+In such a case it is necessary to run cookie.parse() again.
+
+It is currently not safe/tested to call this VMOD in any fetch threads.
+Do the filtering in recv, fix up anything going in in deliver. Running it
+in vcl_backend_fetch and similar is untested and has undefined results.
+
+
+FUNCTIONS
+=========
+
+parse
+-----
+
+Prototype
+        ::
+
+                parse(STRING S)
+Return value
+	VOID
+Description
+	Parse the cookie string in string S. The parsed values are only guaranteed
+	to exist within a single VCL function. Implicit clean() if run more than once.
+Example
+        ::
+
+		sub vcl_recv {
+			cookie.parse(req.http.Cookie);
+		}
+
+
+clean
+-----
+
+Prototype
+        ::
+
+                clean()
+Return value
+	VOID
+Description
+	Clean up all previously parse()-d cookies. Probably of limited
+	use. It is not necessary to run clean() in normal operation.
+Example
+        ::
+
+		sub vcl_recv {
+			cookie.clean();
+		}
+
+get
+-----
+
+Prototype
+        ::
+
+                get(STRING cookiename)
+Return value
+	STRING
+Description
+	Get the value of a cookie, as stored in internal vmod storage. If the cookie name does not exists, an empty string is returned.
+
+Example
+        ::
+
+		import std;
+		sub vcl_recv {
+			cookie.parse("cookie1: value1; cookie2: value2;");
+			std.log("cookie1 value is: " + cookie.get("cookie1"));
+		}
+
+set
+----
+
+Prototype
+        ::
+
+                set(STRING cookiename, STRING cookievalue)
+Return value
+	VOID
+Description
+	Set the internal vmod storage value for a cookie to a value.
+
+Example
+        ::
+
+		sub vcl_recv {
+			cookie.set("cookie1", "value1");
+			std.log("cookie1 value is: " + cookie.get("cookie1"));
+		}
+
+isset
+-----
+
+Prototype
+        ::
+
+                isset(STRING cookiename)
+Return value
+	BOOL
+Description
+	Check if a given cookie is set in the internal vmod storage.
+
+Example
+        ::
+
+		import std;
+		sub vcl_recv {
+			cookie.parse("cookie1: value1; cookie2: value2;");
+			if (cookie.isset("cookie2")) {
+				std.log("cookie2 is set.");
+			}
+		}
+
+delete
+------
+
+Prototype
+        ::
+
+                delete(STRING cookiename)
+Return value
+	VOID
+Description
+	Delete a cookie from internal vmod storage if it exists.
+
+Example
+        ::
+
+		sub vcl_recv {
+			cookie.parse("cookie1: value1; cookie2: value2;");
+			cookie.delete("cookie2");
+			// get_string() will now yield "cookie1: value1";
+		}
+
+
+filter_except
+-------------
+
+Prototype
+        ::
+
+                filter_except(STRING cookienames)
+Return value
+	VOID
+Description
+	Delete all cookies from internal vmod storage that is not in the
+	comma-separated argument cookienames.
+
+Example
+        ::
+
+		sub vcl_recv {
+			cookie.parse("cookie1: value1; cookie2: value2; cookie3: value3");
+			cookie.filter_except("cookie1,cookie2");
+			// get_string() will now yield
+			// "cookie1: value1; cookie2: value2;";
+		}
+
+
+
+get_string
+----------
+
+Prototype
+        ::
+
+                get_string()
+Return value
+	STRING
+Description
+	Get a Cookie string value with all cookies in internal vmod storage.
+Example
+        ::
+
+		sub vcl_recv {
+			cookie.parse(req.http.cookie);
+			cookie.filter_except("SESSIONID,PHPSESSID");
+			set req.http.cookie = cookie.get_string();
+		}
+
+format_rfc1123
+--------------
+
+Prototype
+        ::
+
+                format_rfc1123(TIME, DURATION)
+Return value
+	STRING
+Description
+	Get a RFC1123 formatted date string suitable for inclusion in a
+	Set-Cookie response header.
+
+	Care should be taken if the response has multiple Set-Cookie headers.
+	In that case the header vmod should be used.
+
+Example
+        ::
+
+		sub vcl_deliver {
+			# Set a userid cookie on the client that lives for 5 minutes.
+			set resp.http.Set-Cookie = "userid=" + req.http.userid + "; Expires=" + cookie.format_rfc1123(now, 5m) + "; httpOnly";
+		}
+
+
+INSTALLATION
+============
+
+The source tree is based on autotools to configure the building, and
+does also have the necessary bits in place to do functional unit tests
+using the varnishtest tool.
+
+Usage::
+
+ ./configure --prefix=/usr
+
+Make targets:
+
+* make - builds the vmod
+* make install - installs the vmod.
+* make check - runs the unit tests in ``src/tests/*.vtc``
+
+In your VCL you could then use this vmod along the following lines::
+
+	import cookie;
+	sub vcl_recv {
+		cookie.parse(req.http.cookie);
+		cookie.filter_except("SESSIONID,PHPSESSID");
+		set req.http.cookie = cookie.get_string();
+	}
+
+
+COPYRIGHT
+=========
+
+This document is licensed under the same license as the
+libvmod-example project. See LICENSE for details.
+
+* Copyright (c) 2011-2013 Varnish Software
+* Copyright (c) 2013-2014 Lasse Karstensen
diff --git a/varnish4-vmods/libvmod-cookie-4.0/autogen.sh b/varnish4-vmods/libvmod-cookie-4.0/autogen.sh
new file mode 100755
index 0000000..9a12ef5
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/autogen.sh
@@ -0,0 +1,44 @@
+#!/bin/sh
+
+warn() {
+	echo "WARNING: $@" 1>&2
+}
+
+case `uname -s` in
+Darwin)
+	LIBTOOLIZE=glibtoolize
+	;;
+FreeBSD)
+	LIBTOOLIZE=libtoolize
+	;;
+Linux)
+	LIBTOOLIZE=libtoolize
+	;;
+SunOS)
+	LIBTOOLIZE=libtoolize
+	;;
+*)
+	warn "unrecognized platform:" `uname -s`
+	LIBTOOLIZE=libtoolize
+esac
+
+automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
+if [ -z "$automake_version" ] ; then
+	warn "unable to determine automake version"
+else
+	case $automake_version in
+		0.*|1.[0-8]|1.[0-8][.-]*)
+			warn "automake ($automake_version) detected; 1.9 or newer recommended"
+			;;
+		*)
+			;;
+	esac
+fi
+
+set -ex
+
+aclocal -I m4
+$LIBTOOLIZE --copy --force
+autoheader
+automake --add-missing --copy --foreign
+autoconf
diff --git a/varnish4-vmods/libvmod-cookie-4.0/configure.ac b/varnish4-vmods/libvmod-cookie-4.0/configure.ac
new file mode 100644
index 0000000..0f18b39
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/configure.ac
@@ -0,0 +1,54 @@
+AC_PREREQ(2.64)
+AC_COPYRIGHT([Copyright (c) 2011-2014 Varnish Software AS])
+AC_INIT([libvmod-cookie], [trunk])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_SRCDIR(src/vmod_cookie.vcc)
+AM_CONFIG_HEADER(config.h)
+
+AC_CANONICAL_SYSTEM
+AC_LANG(C)
+
+AM_INIT_AUTOMAKE([foreign])
+
+AC_GNU_SOURCE
+AC_PROG_CC
+AC_PROG_CC_STDC
+if test "x$ac_cv_prog_cc_c99" = xno; then
+	AC_MSG_ERROR([Could not find a C99 compatible compiler])
+fi
+AC_PROG_CPP
+
+AC_PROG_INSTALL
+AC_PROG_LIBTOOL
+AC_PROG_MAKE_SET
+
+# Check for rst utilities
+AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
+if test "x$RST2MAN" = "xno"; then
+	AC_MSG_WARN([rst2man not found - not building man pages])
+fi
+AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
+
+# Checks for header files.
+AC_HEADER_STDC
+AC_CHECK_HEADERS([sys/stdlib.h])
+
+# Check for python
+AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
+
+PKG_CHECK_MODULES([libvarnishapi], [varnishapi])
+
+# Varnish include files tree
+VARNISH_VMOD_INCLUDES
+VARNISH_VMOD_DIR
+VARNISH_VMODTOOL
+
+AC_PATH_PROG([VARNISHTEST], [varnishtest])
+AC_PATH_PROG([VARNISHD], [varnishd], [],
+    [$PATH:$PATH:`pkg-config varnishapi --variable=sbindir`])
+
+AC_CONFIG_FILES([
+	Makefile
+	src/Makefile
+])
+AC_OUTPUT
diff --git a/varnish4-vmods/libvmod-cookie-4.0/debian/changelog b/varnish4-vmods/libvmod-cookie-4.0/debian/changelog
new file mode 100644
index 0000000..3d33ad5
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/debian/changelog
@@ -0,0 +1,5 @@
+libvmod-cookie (0.1) unstable; urgency=low
+
+  * First version
+
+ -- Lasse Karstensen <lasse@varnish-software.com>  Wed, 19 Sep 2012 15:03:00 +0200
diff --git a/varnish4-vmods/libvmod-cookie-4.0/debian/compat b/varnish4-vmods/libvmod-cookie-4.0/debian/compat
new file mode 100644
index 0000000..7f8f011
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/debian/compat
@@ -0,0 +1 @@
+7
diff --git a/varnish4-vmods/libvmod-cookie-4.0/debian/control b/varnish4-vmods/libvmod-cookie-4.0/debian/control
new file mode 100644
index 0000000..942daa1
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/debian/control
@@ -0,0 +1,12 @@
+Source: libvmod-cookie
+Section: web
+Priority: extra
+Maintainer: Lasse Karstensen <lasse@varnish-software.com>
+Build-Depends: debhelper (>= 7), build-essential, python-docutils
+Standards-Version: 3.8.1
+Vcs-Git: git://github.com/lkarsten/libvmod-cookie.git
+
+Package: libvmod-cookie
+Architecture: any
+Depends: varnish, ${misc:Depends}
+Description: Cookie vmod for Varnish
diff --git a/varnish4-vmods/libvmod-cookie-4.0/debian/copyright b/varnish4-vmods/libvmod-cookie-4.0/debian/copyright
new file mode 100644
index 0000000..265b447
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/debian/copyright
@@ -0,0 +1,29 @@
+Copyright:
+
+    Copyright 2009-2011 Varnish Software AS
+
+License:
+
+Copyright (c) 2010-2011 Varnish Software AS
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
diff --git a/varnish4-vmods/libvmod-cookie-4.0/debian/dirs b/varnish4-vmods/libvmod-cookie-4.0/debian/dirs
new file mode 100644
index 0000000..17e6fe7
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/debian/dirs
@@ -0,0 +1 @@
+usr/share/doc/libvmod-example
diff --git a/varnish4-vmods/libvmod-cookie-4.0/debian/docs b/varnish4-vmods/libvmod-cookie-4.0/debian/docs
new file mode 100644
index 0000000..e4f6e81
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/debian/docs
@@ -0,0 +1,3 @@
+README.rst
+LICENSE
+COPYING
diff --git a/varnish4-vmods/libvmod-cookie-4.0/debian/rules b/varnish4-vmods/libvmod-cookie-4.0/debian/rules
new file mode 100755
index 0000000..82ac88f
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/debian/rules
@@ -0,0 +1,18 @@
+#!/usr/bin/make -f
+export DH_VERBOSE=1
+
+VARNISHSRC = $(DEBIAN_VARNISH_SRC)
+VMODDIR = $(shell PKG_CONFIG_PATH="$(VARNISHSRC)" pkg-config --variable=vmoddir varnishapi)
+
+override_dh_auto_configure:
+	dh_auto_configure -- VMODDIR="$(VMODDIR)" VARNISHSRC="$(VARNISHSRC)"
+
+override_dh_gencontrol:
+	if [ -n "$$DEBIAN_OVERRIDE_BINARY_VERSION" ]; then \
+		dh_gencontrol -- -v$$DEBIAN_OVERRIDE_BINARY_VERSION; \
+	else \
+		dh_gencontrol ; \
+	fi
+
+%:
+	dh $@
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/Makefile.am b/varnish4-vmods/libvmod-cookie-4.0/src/Makefile.am
new file mode 100644
index 0000000..4d4eb97
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/Makefile.am
@@ -0,0 +1,29 @@
+AM_CPPFLAGS = @VMOD_INCLUDES@
+
+vmoddir = @VMOD_DIR@
+vmod_LTLIBRARIES = libvmod_cookie.la
+
+libvmod_cookie_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
+
+libvmod_cookie_la_SOURCES = \
+	vcc_if.c \
+	vcc_if.h \
+	vmod_cookie.c
+
+vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_cookie.vcc
+	@VMODTOOL@ $(top_srcdir)/src/vmod_cookie.vcc
+
+VMOD_TESTS = $(top_srcdir)/src/tests/*.vtc
+.PHONY: $(VMOD_TESTS)
+
+$(top_srcdir)/src/tests/*.vtc:
+	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
+
+check: $(VMOD_TESTS)
+
+EXTRA_DIST = vmod_cookie.vcc $(VMOD_TESTS)
+
+CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h \
+	$(builddir)/vmod_cookie.man.rst \
+	$(builddir)/vmod_cookie.rst
+
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/01-set-delete-produce.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/01-set-delete-produce.vtc
new file mode 100644
index 0000000..227aaf8
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/01-set-delete-produce.vtc
@@ -0,0 +1,30 @@
+varnishtest "Test cookie vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_recv {
+		cookie.set("cookie1", "cookie1BAD");
+		cookie.set("cookie2", "cookie2value");
+		cookie.set("cookie3", "cookie3value");
+		cookie.set("cookie4", "cookie4value");
+		cookie.set("cookie1", "cookie1value");
+		cookie.delete("cookie2");
+	}
+	sub vcl_deliver {
+		set resp.http.X-foo = cookie.get_string();
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.X-foo == "cookie1=cookie1value; cookie3=cookie3value; cookie4=cookie4value;"
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/02-clean.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/02-clean.vtc
new file mode 100644
index 0000000..4334dc5
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/02-clean.vtc
@@ -0,0 +1,33 @@
+varnishtest "Test cookie parser"
+
+server s1 {
+       rxreq
+       txresp
+
+       rxreq
+       txresp
+
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_recv {
+		cookie.set("cookie1", "cookie1BAD");
+	}
+	sub vcl_deliver {
+		set resp.http.X-foo = cookie.get_string();
+		cookie.clean();
+		set resp.http.X-bar = cookie.get_string();
+	}
+
+} -start
+
+client c1 {
+	txreq
+	rxresp
+	expect resp.http.X-foo == "cookie1=cookie1BAD;"
+	expect resp.http.X-bar == ""
+} -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/03-null.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/03-null.vtc
new file mode 100644
index 0000000..755ebdb
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/03-null.vtc
@@ -0,0 +1,36 @@
+varnishtest "NULL/empty value checks"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_recv {
+		// nothing in here at this point.
+		set req.http.x-foo = cookie.get_string();
+
+		// empty name
+		cookie.set("", "foo");
+
+		// empty value
+		cookie.set("cookie1", "");
+
+		// double delete
+		cookie.delete("cookie2");
+		cookie.delete("cookie2");
+	}
+	sub vcl_deliver {
+		set resp.http.x-foo = cookie.get_string();
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.X-foo == ""
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/04-filter.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/04-filter.vtc
new file mode 100644
index 0000000..26c86ed
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/04-filter.vtc
@@ -0,0 +1,29 @@
+varnishtest "Test cookie vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_recv {
+		cookie.set("cookie1", "cookie1value");
+		cookie.set("cookie2", "cookie2value");
+		cookie.set("cookie3", "cookie3value");
+		cookie.set("cookie4", "cookie4value");
+		cookie.filter_except("cookie2,cookie4,baz");
+	}
+	sub vcl_deliver {
+		set resp.http.X-foo = cookie.get_string();
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.X-foo == "cookie2=cookie2value; cookie4=cookie4value;"
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/05-get.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/05-get.vtc
new file mode 100644
index 0000000..4c32ea1
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/05-get.vtc
@@ -0,0 +1,29 @@
+varnishtest "Test cookie vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_recv {
+		cookie.set("cookie1", "cookie1value");
+		cookie.set("cookie2", "cookie2value");
+	}
+	sub vcl_deliver {
+		set resp.http.X-foo = cookie.get("cookie2");
+		# Make sure we handle this gracefully.
+		set resp.http.X-bar = "" + cookie.get("non-existing");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.X-foo == "cookie2value"
+	expect resp.http.X-bar == ""
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/06-concurrent-query.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/06-concurrent-query.vtc
new file mode 100644
index 0000000..e4555b1
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/06-concurrent-query.vtc
@@ -0,0 +1,49 @@
+varnishtest "Test cookie vmod concurrency"
+
+server s1 {
+       rxreq
+       sema r1 sync 2
+       expect req.url == "/s1"
+       sema r2 sync 2
+       txresp
+} -start
+
+server s2 {
+       rxreq
+       expect req.url == "/s2"
+       sema r2 sync 2
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_recv {
+		cookie.parse(req.http.cookie);
+
+		if (req.url == "/s1") {
+			set req.backend_hint = s1;
+		}
+		else {
+			set req.backend_hint = s2;
+		}
+	}
+	sub vcl_deliver {
+		set resp.http.x-val = cookie.get("a");
+	}
+} -start
+
+client c1 {
+	txreq -url "/s1" -hdr "Cookie: a=bar"
+	rxresp
+	expect resp.http.x-val == "bar"
+} -start
+
+client c2 {
+       sema r1 sync 2
+       txreq -url "/s2" -hdr "Cookie: a=foo"
+       rxresp
+       expect resp.http.x-val == "foo"
+} -run
+
+
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/07-isset.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/07-isset.vtc
new file mode 100644
index 0000000..c81792b
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/07-isset.vtc
@@ -0,0 +1,27 @@
+varnishtest "Test cookie.isset()"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_recv {
+		cookie.set("cookie1", "cookie1value");
+	}
+	sub vcl_deliver {
+		set resp.http.does = cookie.isset("cookie1");
+		set resp.http.does-not = cookie.isset("non-existent");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.does == "true"
+	expect resp.http.does-not == "false"
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/08-overflow.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/08-overflow.vtc
new file mode 100644
index 0000000..edcc8c7
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/08-overflow.vtc
@@ -0,0 +1,36 @@
+varnishtest "Test cookie vmod"
+
+server s1 {
+       rxreq
+       txresp
+
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_recv {
+	}
+	sub vcl_deliver {
+		cookie.parse(req.http.cookie);
+		set resp.http.cookiestring = cookie.get_string();
+		set resp.http.cookie1 = cookie.isset("cookie1");
+	}
+} -start
+
+client c1 {
+	# Insanely long cookie name. Should be ignored.
+	txreq -url "/" -hdr "Cookie: phohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1j=cookievalue"
+	rxresp
+	expect resp.http.cookiestring == ""
+
+	# Insane 6KB cookie value.
+	txreq -url "/" -hdr "Cookie: cookie1=foobarbazfoobarbazphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1jphohx8aingie6Ide7peephie5paip6ang4thooh4ooquai8ohvah7eiqueeki8ooth7viequ0Tha5thewiSheih5jaimaiTahr1wi8WooQuoe7loothieThahweeneichoo8cufeelu3tie5cei1iShiemiezoofox6ahcaevaihocheungai2aeghaichaingee0EiGie3Ees5ujaem5uquahpieFeelei7Ohngei1afaTooph4aiquum1aewaidatheshuh1fohhoor0hoo6aeTeiy9xougahf3jeapooshuhoob5deiwareingahth7ahf2fafeer8Oobiewai3rei8ofejohjeiye4die8Na7ze6eixajauCairoth0lek8vioyuom6eih0egho2aingoo7coh1at3niochu6osahthi0ue1Luchae1eifeupiuwaa0raidiewaijese4oozee4eihie5shaBaoreacooNg8uW9eru9kigh3Feesi8iex2pu7ohfaiBiezael6ifaujiek4nutae1aalohchoteiPuaM2chiefaicaopheKohsh6Ho1wiephieseef1daj3Pahfie2ooch8shaing5baXeiLiep9lahfe9uDaxeehielais2eix3iekiew8aiter9Foo8noo2hae7ohdie1iB7hoop3podeengooSothoojui4AhXu5Nain8ohqu8if1ue5iTheimei5oghie9sheiv4Hejah1veixahcaixie8ahyieT8Phay4daeTei1aRiemae6oicheef2miiNuoxeil1kae2nea1roh9Rei1keiwaT2eoJaiNgie0den6aideif3uechaishaec4cai2eozieb9aeN9sai9ahnielohdaeGh2kaeleiteitai0ietoo7eiCha0baiW7dai0im1jul5OWijaLo2ohh3kooxu2oFah3loob6feiw7pie9eighu8ik4chae0Athou2fah5ieQuuic0Mu1j;"
+	rxresp
+	# should not be set, since the cookie is overflowing 4KB.
+	expect resp.http.cookie1 == "false"
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/10-parser.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/10-parser.vtc
new file mode 100644
index 0000000..e7fc954
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/10-parser.vtc
@@ -0,0 +1,47 @@
+varnishtest "Test cookie parser"
+
+server s1 -repeat 5 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+	sub vcl_deliver {
+ 		cookie.parse(req.http.cookie);
+		set resp.http.X-foo = cookie.get_string();
+	}
+
+} -start
+
+client c1 {
+	txreq -hdr "Cookie: csrftoken=0e0c3616e41a6bd561b72b7f5fc1128f; sessionid=a707505310ddf259bb290d3ca63fc560"
+	rxresp
+	expect resp.http.X-foo == "csrftoken=0e0c3616e41a6bd561b72b7f5fc1128f; sessionid=a707505310ddf259bb290d3ca63fc560;"
+} -run
+
+client c2 {
+	txreq -hdr "Cookie: __utmc=253898641; __utma=253898641.654622101.1372224466.1372224466.1372224466.1; __utmb=253898641.44.10.1372224466; __utmz=253898641.1372224466.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=index%2Bof%2Bccnp%2Bpdf"
+	rxresp
+	expect resp.http.X-foo == "__utmc=253898641; __utma=253898641.654622101.1372224466.1372224466.1372224466.1; __utmb=253898641.44.10.1372224466; __utmz=253898641.1372224466.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=index%2Bof%2Bccnp%2Bpdf;"
+} -run
+
+client c3 {
+	txreq -hdr "Cookie: "
+	rxresp
+	expect resp.http.X-foo == ""
+} -run
+
+# An empty cookie is a non-existing cookie for us.
+client c4 {
+	txreq -hdr "Cookie: emptycookie="
+	rxresp
+	expect resp.http.X-foo == ""
+} -run
+
+# A single cookie should also work.
+client c5 {
+	txreq -hdr "Cookie: cookie1=foobarbaz"
+	rxresp
+	expect resp.http.X-foo == "cookie1=foobarbaz;"
+} -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/tests/30-format_1123.vtc b/varnish4-vmods/libvmod-cookie-4.0/src/tests/30-format_1123.vtc
new file mode 100644
index 0000000..b3f52d0
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/tests/30-format_1123.vtc
@@ -0,0 +1,22 @@
+varnishtest "Test rfc1123 string formatting function"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+
+varnish v1 -vcl+backend {
+	import cookie from "${vmod_topbuild}/src/.libs/libvmod_cookie.so";
+
+	sub vcl_deliver {
+		set resp.http.x-date = cookie.format_rfc1123(now, 1d);
+	}
+} -start
+
+
+client c1 {
+       txreq -url "/"
+       rxresp
+       expect resp.http.date != <undef>
+} -run
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/vmod_cookie.c b/varnish4-vmods/libvmod-cookie-4.0/src/vmod_cookie.c
new file mode 100644
index 0000000..61ea7f9
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/vmod_cookie.c
@@ -0,0 +1,342 @@
+/*
+Cookie VMOD for Varnish.
+
+Simplifies handling of the Cookie request header.
+
+Author: Lasse Karstensen <lasse@varnish-software.com>, July 2012.
+*/
+
+#include <stdlib.h>
+#include <stdio.h>
+
+#include "vrt.h"
+#include "vqueue.h"
+#include "cache/cache.h"
+
+#include "vcc_if.h"
+
+#define MAX_COOKIE_NAME 1024   /* name maxsize */
+#define MAX_COOKIE_STRING 4096 /* cookie string maxlength */
+
+struct cookie {
+	char *name;
+	char *value;
+	VTAILQ_ENTRY(cookie) list;
+};
+
+struct whitelist {
+	char name[MAX_COOKIE_NAME];
+	VTAILQ_ENTRY(whitelist) list;
+};
+
+struct vmod_cookie {
+	unsigned magic;
+#define VMOD_COOKIE_MAGIC 0x4EE5FB2E
+	unsigned xid;
+	VTAILQ_HEAD(, cookie) cookielist;
+};
+
+static pthread_key_t key;
+static pthread_once_t key_is_initialized = PTHREAD_ONCE_INIT;
+
+static void
+mkkey(void) {
+	AZ(pthread_key_create(&key, free));
+}
+
+int
+init_function(struct vmod_priv *priv, const struct VCL_conf *conf) {
+	pthread_once(&key_is_initialized, mkkey);
+	return (0);
+}
+
+static void
+cobj_clear(struct vmod_cookie *c) {
+	c->magic = VMOD_COOKIE_MAGIC;
+	VTAILQ_INIT(&c->cookielist);
+	c->xid = 0;
+}
+
+static struct vmod_cookie *
+cobj_get(const struct vrt_ctx *ctx) {
+	struct vmod_cookie *vcp = pthread_getspecific(key);
+
+    /*
+     * SORIN: don't use req->sp->vxid because it's not reliable (repeated values).
+     * Use the log wid instead (the "2" in "*   << Request  >> 2" in varnishlog).
+     */
+
+    if (!vcp) {
+		vcp = malloc(sizeof *vcp);
+		AN(vcp);
+		cobj_clear(vcp);
+		vcp->xid = ctx->req->vsl[0].wid;
+		AZ(pthread_setspecific(key, vcp));
+        //VSLb(ctx->vsl, SLT_Debug, "cookie: new XID %u", vcp->xid);
+	}
+
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	if (vcp->xid != ctx->req->vsl[0].wid) {
+        //VSLb(ctx->vsl, SLT_Debug, "cookie: reusing entry for XID %u; new XID %u",
+        //     vcp->xid, ctx->req->vsl[0].wid);
+		// Reuse previously allocated storage
+		cobj_clear(vcp);
+		vcp->xid = ctx->req->vsl[0].wid;
+	}
+
+	return (vcp);
+}
+
+VCL_VOID
+vmod_parse(const struct vrt_ctx *ctx, VCL_STRING cookieheader) {
+	struct vmod_cookie *vcp = cobj_get(ctx);
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	char tokendata[MAX_COOKIE_STRING];
+	char *token, *tokstate, *value, *sepindex, *dataptr;
+
+	int i = 0;
+
+    //VSLb(ctx->vsl, SLT_Debug, "cookie: parse for XID %u", ctx->req->vsl[0].wid);
+    //VSL_Flush(ctx->vsl, 0);
+
+    /* If called twice during the same request, clean out old state */
+	vmod_clean(ctx);
+
+	VSLb(ctx->vsl, SLT_Debug, "cookie: cookie string is %lu bytes.",
+         cookieheader ? strlen(cookieheader) : 0);
+
+	if (cookieheader == NULL || strlen(cookieheader) == 0) {
+		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: nothing to parse");
+		return;
+	}
+
+	if (strlen(cookieheader) >= MAX_COOKIE_STRING) {
+		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: cookie string overflowed, abort");
+		return;
+	}
+
+	/* strtok modifies source, fewer surprises. */
+	strncpy(tokendata, cookieheader, sizeof(tokendata));
+	dataptr = tokendata;
+
+	while (1) {
+		token = strtok_r(dataptr, ";", &tokstate);
+		dataptr = NULL; /* strtok() wants NULL on subsequent calls. */
+
+		if (token == NULL)
+		    break;
+
+		while (token[0] == ' ')
+		    token++;
+
+		sepindex = strchr(token, '=');
+		if (sepindex == NULL) {
+			/* No delimiter, this cookie is invalid. Next! */
+			continue;
+		}
+		value = sepindex + 1;
+		*sepindex = '\0';
+
+		VSLb(ctx->vsl, SLT_Debug, "value length is %lu.", strlen(value));
+		vmod_set(ctx, token, value);
+		i++;
+	}
+	VSLb(ctx->vsl, SLT_VCL_Log, "cookie: parsed %i cookies.", i);
+}
+
+
+VCL_VOID
+vmod_set(const struct vrt_ctx *ctx, VCL_STRING name, VCL_STRING value) {
+	struct vmod_cookie *vcp = cobj_get(ctx);
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	AN(name);
+	AN(value);
+
+	/* Empty cookies should be ignored. */
+	if (strlen(name) == 0 || strlen(value) == 0) {
+		return;
+	}
+
+	if (strlen(name) + 1 >= MAX_COOKIE_NAME) {
+		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: cookie string overflowed");
+		return;
+	}
+
+	struct cookie *cookie;
+	VTAILQ_FOREACH(cookie, &vcp->cookielist, list) {
+		if (strcmp(cookie->name, name) == 0) {
+			cookie->value = WS_Printf(ctx->ws, "%s", value);
+			return;
+		}
+	}
+
+	struct cookie *newcookie = (struct cookie *)WS_Alloc(ctx->ws, sizeof(struct cookie));
+	if (newcookie == NULL) {
+		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: unable to get storage for cookie");
+		return;
+	}
+	newcookie->name = WS_Printf(ctx->ws, "%s", name);
+	newcookie->value = WS_Printf(ctx->ws, "%s", value);
+
+	VTAILQ_INSERT_TAIL(&vcp->cookielist, newcookie, list);
+}
+
+VCL_BOOL
+vmod_isset(const struct vrt_ctx *ctx, const char *name) {
+	struct vmod_cookie *vcp = cobj_get(ctx);
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	struct cookie *cookie;
+	VTAILQ_FOREACH(cookie, &vcp->cookielist, list) {
+		if (strcmp(cookie->name, name) == 0) {
+			return 1;
+		}
+	}
+	return 0;
+}
+
+VCL_STRING
+vmod_get(const struct vrt_ctx *ctx, VCL_STRING name) {
+	struct vmod_cookie *vcp = cobj_get(ctx);
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	struct cookie *cookie;
+	VTAILQ_FOREACH(cookie, &vcp->cookielist, list) {
+		if (strcmp(cookie->name, name) == 0) {
+			return (cookie->value);
+		}
+	}
+	return (NULL);
+}
+
+
+VCL_VOID
+vmod_delete(const struct vrt_ctx *ctx, VCL_STRING name) {
+	struct vmod_cookie *vcp = cobj_get(ctx);
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	struct cookie *cookie;
+	VTAILQ_FOREACH(cookie, &vcp->cookielist, list) {
+		if (strcmp(cookie->name, name) == 0) {
+			VTAILQ_REMOVE(&vcp->cookielist, cookie, list);
+			/* No way to clean up storage, let ws reclaim do it. */
+			break;
+		}
+	}
+}
+
+VCL_VOID
+vmod_clean(const struct vrt_ctx *ctx) {
+	struct vmod_cookie *vcp = cobj_get(ctx);
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	struct cookie *cookie, *c_safe;
+	VTAILQ_FOREACH_SAFE(cookie, &vcp->cookielist, list, c_safe) {
+		VTAILQ_REMOVE(&vcp->cookielist, cookie, list);
+	}
+}
+
+static VCL_VOID
+_filter_except_or_only(const struct vrt_ctx *ctx, VCL_STRING whitelist_s, VCL_BOOL except) {
+	char buf[MAX_COOKIE_STRING];
+	struct cookie *cookieptr;
+	char *tokptr, *saveptr;
+	int whitelisted = 0;
+	struct vmod_cookie *vcp = cobj_get(ctx);
+	struct whitelist *whentry;
+
+	VTAILQ_HEAD(, whitelist) whitelist_head;
+	VTAILQ_INIT(&whitelist_head);
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	strcpy(buf, whitelist_s);
+	tokptr = strtok_r(buf, ",", &saveptr);
+	if (!tokptr) return;
+
+	/* Parse the supplied whitelist. */
+	while (1) {
+		whentry = malloc(sizeof(struct whitelist));
+		AN(whentry);
+		strcpy(whentry->name, tokptr);
+		VTAILQ_INSERT_TAIL(&whitelist_head, whentry, list);
+		tokptr = strtok_r(NULL, ",", &saveptr);
+		if (!tokptr) break;
+	}
+
+	/* Filter existing cookies that isn't in the whitelist. */
+	VTAILQ_FOREACH(cookieptr, &vcp->cookielist, list) {
+		whitelisted = 0;
+		VTAILQ_FOREACH(whentry, &whitelist_head, list) {
+			if (strlen(cookieptr->name) == strlen(whentry->name) &&
+			    strcmp(cookieptr->name, whentry->name) == 0) {
+				whitelisted = 1;
+				break;
+			}
+		}
+		if (except ^ whitelisted) {
+			VTAILQ_REMOVE(&vcp->cookielist, cookieptr, list);
+		}
+	}
+
+	VTAILQ_FOREACH(whentry, &whitelist_head, list) {
+		VTAILQ_REMOVE(&whitelist_head, whentry, list);
+		free(whentry);
+	}
+}
+
+
+VCL_VOID
+vmod_filter_except(const struct vrt_ctx *ctx, VCL_STRING whitelist_s) {
+    _filter_except_or_only(ctx, whitelist_s, 1);
+}
+
+
+VCL_VOID
+vmod_filter_only(const struct vrt_ctx *ctx, VCL_STRING whitelist_s) {
+    _filter_except_or_only(ctx, whitelist_s, 0);
+}
+
+
+VCL_STRING
+vmod_get_string(const struct vrt_ctx *ctx) {
+	struct cookie *curr;
+	struct vsb *output;
+	unsigned v, u;
+	char *p;
+	struct vmod_cookie *vcp = cobj_get(ctx);
+	CHECK_OBJ_NOTNULL(vcp, VMOD_COOKIE_MAGIC);
+
+	output = VSB_new_auto();
+	AN(output);
+
+	VTAILQ_FOREACH(curr, &vcp->cookielist, list) {
+		VSB_printf(output, "%s=%s; ", curr->name, curr->value);
+	}
+	VSB_trim(output);
+	VSB_finish(output);
+	v = 1 + VSB_len(output);
+
+	u = WS_Reserve(ctx->ws, 0);
+	p = ctx->ws->f;
+	strcpy(p, VSB_data(output));
+
+	VSB_delete(output);
+
+	if (v > u) {
+		WS_Release(ctx->ws, 0);
+		VSLb(ctx->vsl, SLT_VCL_Log, "cookie: Workspace overflowed");
+		return (NULL);
+	}
+	WS_Release(ctx->ws, v);
+	return (p);
+}
+
+
+VCL_STRING
+vmod_format_rfc1123(const struct vrt_ctx *ctx, VCL_TIME ts, VCL_DURATION duration) {
+        return VRT_TIME_string(ctx, ts + duration);
+}
+
diff --git a/varnish4-vmods/libvmod-cookie-4.0/src/vmod_cookie.vcc b/varnish4-vmods/libvmod-cookie-4.0/src/vmod_cookie.vcc
new file mode 100644
index 0000000..567647c
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/src/vmod_cookie.vcc
@@ -0,0 +1,12 @@
+$Module cookie 3 Varnish Cookie Module
+$Init init_function
+$Function VOID parse(STRING)
+$Function VOID clean()
+$Function VOID set(STRING, STRING)
+$Function STRING get(STRING)
+$Function BOOL isset(STRING)
+$Function VOID delete(STRING)
+$Function VOID filter_except(STRING)
+$Function VOID filter_only(STRING)
+$Function STRING get_string()
+$Function STRING format_rfc1123(TIME, DURATION)
diff --git a/varnish4-vmods/libvmod-cookie-4.0/vmod-cookie.spec b/varnish4-vmods/libvmod-cookie-4.0/vmod-cookie.spec
new file mode 100644
index 0000000..76a2c00
--- /dev/null
+++ b/varnish4-vmods/libvmod-cookie-4.0/vmod-cookie.spec
@@ -0,0 +1,46 @@
+Summary: Cookie VMOD for Varnish
+Name: vmod-cookie
+Version: 0.1
+Release: 2%{?dist}
+License: BSD
+Group: System Environment/Daemons
+Source0: libvmod-cookie.tar.gz
+BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
+Requires: varnish >= 4.0.2
+BuildRequires: make
+BuildRequires: python-docutils
+BuildRequires: varnish >= 4.0.2
+BuildRequires: varnish-libs-devel >= 4.0.2
+
+
+%description
+Cookie VMOD for Varnish.
+
+%prep
+%setup -n libvmod-cookie-trunk
+
+%build
+%configure --prefix=/usr
+make
+make check
+
+%install
+make install DESTDIR=%{buildroot}
+mv %{buildroot}/usr/share/doc/lib%{name} %{buildroot}/usr/share/doc/%{name}
+
+%clean
+rm -rf %{buildroot}
+
+%files
+%defattr(-,root,root,-)
+%{_libdir}/varnis*/vmods/
+%doc /usr/share/doc/%{name}/*
+%{_mandir}/man?/*
+
+%changelog
+* Wed Mar  5 2014 Lasse Karstensen <lkarsten@varnish-software.com> - 0.1-0.20140305
+- Updated description to work better with Redhat Satellite.
+
+* Tue Nov 14 2012 Lasse Karstensen <lasse@varnish-software.com> - 0.1-0.20121114
+- Initial version.
+
diff --git a/varnish4-vmods/libvmod-header-4.0/.gitignore b/varnish4-vmods/libvmod-header-4.0/.gitignore
new file mode 100644
index 0000000..721478a
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/.gitignore
@@ -0,0 +1,34 @@
+Makefile
+Makefile.in
+aclocal.m4
+autom4te.cache/
+config.guess
+config.h
+config.h.in
+config.log
+config.status
+config.sub
+configure
+depcomp
+install-sh
+libtool
+ltmain.sh
+m4/libtool.m4
+m4/ltoptions.m4
+m4/ltsugar.m4
+m4/ltversion.m4
+m4/lt~obsolete.m4
+missing
+src/.deps/
+src/.libs/
+src/Makefile
+src/Makefile.in
+src/libvmod_header.la
+src/vcc_if.c
+src/vcc_if.h
+src/vcc_if.lo
+src/vcc_if.o
+src/vmod_header.lo
+src/vmod_header.o
+stamp-h1
+vmod_header.3
diff --git a/varnish4-vmods/libvmod-header-4.0/LICENSE b/varnish4-vmods/libvmod-header-4.0/LICENSE
new file mode 100644
index 0000000..56cb50b
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/LICENSE
@@ -0,0 +1,23 @@
+Copyright (c) 2011 Varnish Software AS
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
diff --git a/varnish4-vmods/libvmod-header-4.0/Makefile.am b/varnish4-vmods/libvmod-header-4.0/Makefile.am
new file mode 100644
index 0000000..5387394
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/Makefile.am
@@ -0,0 +1,21 @@
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = src
+
+dist_man_MANS = vmod_header.3
+DISTCHECK_CONFIGURE_FLAGS = \
+	VMOD_DIR='$${libdir}/varnish/vmods'
+
+EXTRA_DIST = README.rst LICENSE vmod-header.spec debian
+
+MAINTAINERCLEANFILES = $(dist_man_MANS)
+
+vmod_header.3: README.rst
+if HAVE_RST2MAN
+	${RST2MAN} README.rst $@
+else
+	@echo "========================================"
+	@echo "You need rst2man installed to make dist"
+	@echo "========================================"
+	@false
+endif
diff --git a/varnish4-vmods/libvmod-header-4.0/README.rst b/varnish4-vmods/libvmod-header-4.0/README.rst
new file mode 100644
index 0000000..1e3cf94
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/README.rst
@@ -0,0 +1,176 @@
+===========
+vmod_header
+===========
+
+---------------------
+Varnish Header Module
+---------------------
+
+:Manual section: 3
+:Author: Kristian Lyngstøl
+:Date: 2011-08-12
+:Version: 0.3
+
+SYNOPSIS
+========
+
+::
+
+        import header;
+
+        header.append(<header>, <content>)
+        header.get(<header>, <regular expression>)
+        header.remove(<header>, <regular expression>)
+        header.copy(<source header>, <destination header>)
+        header.version()
+
+DESCRIPTION
+===========
+
+Varnish Module (vmod) for manipulation of duplicated headers (for instance
+multiple set-cookie headers).
+
+FUNCTIONS
+=========
+
+Example VCL::
+
+	backend foo { ... };
+
+	import header;
+
+	sub vcl_fetch {
+		header.append(beresp.http.Set-Cookie,"foo=bar");
+                header.remove(beresp.http.Set-Cookie,"dontneedthiscookie");
+	}
+
+
+append
+------
+
+Prototype
+        header.append(<header>, <content>)
+Returns
+        void
+Description
+        Append lets you add an extra occurrence of an existing header.
+Example
+        ``header.append(beresp.http.Set-Cookie,"foo=bar")``
+
+get
+---
+
+Prototype
+        header.get(<header>, <regular expression>)
+Returns
+        String
+Description
+        Get fetches the value of the first `header` that matches the given
+        regular expression.
+Example
+        ``set beresp.http.xusr = header.get(beresp.http.set-cookie,"user=");``
+
+remove
+------
+
+Prototype
+        header.remove(<header>, <regular expression>)
+Returns
+        void
+Description
+        remove() removes all occurences of `header` that matches the given
+        regular expression. The example is a white-list of "funcookie=".
+Example
+        ``header.remove(beresp.http.set-cookie,"^(?!(funcookie=))");``
+
+copy
+----
+
+Prototype
+        header.copy(<source header>, <destination header>)
+Returns
+        void
+Description
+        Copies all of the source headers to a new header.
+Example
+        ``header.copy(beresp.http.set-cookie, beresp.http.x-old-cookie);``
+
+version
+-------
+
+Prototype
+        header.version()
+Returns
+        string
+Description
+        Returns the string constant version-number of the header vmod.
+Example
+        ``set resp.http.X-header-version = header.version();``
+
+
+INSTALLATION
+============
+
+Installation requires the Varnish source tree (only the source matching the
+binary installation).
+
+1. `./autogen.sh`  (for git-installation)
+2. `./configure VARNISHSRC=/path/to/your/varnish/source/varnish-cache`
+3. `make`
+4. `make install` (may require root: sudo make install)
+5. `make check` (Optional for regression tests)
+
+VARNISHSRC is the directory of the Varnish source tree for which to
+compile your vmod. Both the VARNISHSRC and VARNISHSRC/include
+will be added to the include search paths for your module.
+
+Optionally you can also set the vmod install dir by adding VMODDIR=DIR
+(defaults to the pkg-config discovered directory from your Varnish
+installation).
+
+
+ACKNOWLEDGEMENTS
+================
+
+The development of this plugin was made possible by the sponsorship of
+Softonic, http://en.softonic.com/ .
+
+Author: Kristian Lyngstøl <kristian@varnish-software.com>, Varnish Software AS
+Skeleton by Martin Blix Grydeland <martin@varnish-software.com>, vmods are
+part of Varnish Cache 3.0 and beyond.
+
+Also thanks to: Imo Klabun and Anders Nordby for bug reports.
+
+HISTORY
+=======
+
+Version 0.1: Initial version, somewhat ambiguous where it starts and ends.
+
+Version 0.2: Bug fixes for string removal
+
+Version 0.3: Bug fixes for get/remove, add version()
+
+BUGS
+====
+
+You can't use dynamic regular expressions, which also holds true for normal
+regular expressions in regsub(), but VCL isn't able to warn you about this
+when it comes to vmods yet.
+
+Some overlap with varnishd exists, this will be mended as Varnish 3.0
+evolves.
+
+SEE ALSO
+========
+
+* varnishd(1)
+* vcl(7)
+* https://github.com/varnish/libvmod-header
+
+COPYRIGHT
+=========
+
+This document is licensed under the same license as the
+libvmod-header project. See LICENSE for details.
+
+* Copyright (c) 2011-2013 Varnish Software
diff --git a/varnish4-vmods/libvmod-header-4.0/autogen.sh b/varnish4-vmods/libvmod-header-4.0/autogen.sh
new file mode 100755
index 0000000..2e1fb89
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/autogen.sh
@@ -0,0 +1,44 @@
+#!/bin/sh
+
+warn() {
+	echo "WARNING: $@" 1>&2
+}
+
+case `uname -s` in
+Darwin)
+	LIBTOOLIZE=glibtoolize
+	;;
+FreeBSD)
+	LIBTOOLIZE=libtoolize
+	;;
+Linux)
+	LIBTOOLIZE=libtoolize
+	;;
+SunOS)
+	LIBTOOLIZE=libtoolize
+	;;
+*)
+	warn "unrecognized platform:" `uname -s`
+	LIBTOOLIZE=libtoolize
+esac
+
+automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
+if [ -z "$automake_version" ] ; then
+	warn "unable to determine automake version"
+else
+	case $automake_version in
+		0.*|1.[0-8]|1.[0-8][.-]*)
+			warn "automake ($automake_version) detected; 1.9 or newer recommended"
+			;;
+		*)
+			;;
+	esac
+fi
+
+set -ex
+
+$LIBTOOLIZE --copy --force
+aclocal -I m4
+autoheader
+automake --add-missing --copy --foreign
+autoconf
diff --git a/varnish4-vmods/libvmod-header-4.0/configure.ac b/varnish4-vmods/libvmod-header-4.0/configure.ac
new file mode 100644
index 0000000..a365212
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/configure.ac
@@ -0,0 +1,119 @@
+AC_PREREQ(2.64)
+AC_COPYRIGHT([Copyright (c) 2011-2014 Varnish Software AS])
+AC_INIT([libvmod-header], [0.3])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_SRCDIR(src/vmod_header.vcc)
+AC_CONFIG_HEADERS(config.h)
+
+AC_CANONICAL_SYSTEM
+AC_LANG(C)
+
+AM_INIT_AUTOMAKE([foreign])
+
+AC_GNU_SOURCE
+AC_PROG_CC
+AC_PROG_CC_STDC
+if test "x$ac_cv_prog_cc_c99" = xno; then
+	AC_MSG_ERROR([Could not find a C99 compatible compiler])
+fi
+AC_PROG_CPP
+
+AC_PROG_INSTALL
+AC_PROG_LIBTOOL
+AC_PROG_MAKE_SET
+
+# Check for rst utilities
+AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
+if test "x$RST2MAN" = "xno"; then
+	AC_MSG_WARN([rst2man not found - not building man pages])
+fi
+AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
+
+# Check for pkg-config
+PKG_PROG_PKG_CONFIG
+
+# Checks for header files.
+AC_HEADER_STDC
+AC_CHECK_HEADERS([sys/stdlib.h])
+
+# Check for python
+AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
+
+# Varnish include files tree
+VARNISH_VMOD_INCLUDES
+VARNISH_VMOD_DIR
+VARNISH_VMODTOOL
+
+AC_PATH_PROG([VARNISHTEST], [varnishtest])
+AC_PATH_PROG([VARNISHD], [varnishd], [],
+    [$PATH:$PATH:`pkg-config varnishapi --variable=sbindir`])
+
+# This corresponds to FreeBSD's WARNS level 6
+DEVELOPER_CFLAGS="-Wall -Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wshadow -Wcast-align -Wchar-subscripts -Winline -Wnested-externs -Wredundant-decls -Wformat"
+
+# Additional flags for GCC 4
+EXTRA_DEVELOPER_CFLAGS="-Wextra -Wno-missing-field-initializers -Wno-sign-compare"
+
+# --enable-developer-warnings
+AC_ARG_ENABLE(developer-warnings,
+	AS_HELP_STRING([--enable-developer-warnings],[enable strict warnings (default is NO)]),
+	CFLAGS="${CFLAGS} ${DEVELOPER_CFLAGS}")
+
+# --enable-debugging-symbols
+AC_ARG_ENABLE(debugging-symbols,
+	AS_HELP_STRING([--enable-debugging-symbols],[enable debugging symbols (default is NO)]),
+	CFLAGS="${CFLAGS} -O0 -g -fno-inline")
+
+# --enable-diagnostics
+AC_ARG_ENABLE(diagnostics,
+	AS_HELP_STRING([--enable-diagnostics],[enable run-time diagnostics (default is NO)]),
+	CFLAGS="${CFLAGS} -DDIAGNOSTICS")
+
+# --enable-extra-developer-warnings
+AC_ARG_ENABLE(extra-developer-warnings,
+	AS_HELP_STRING([--enable-extra-developer-warnings],[enable even stricter warnings (default is NO)]),
+	[],
+	[enable_extra_developer_warnings=no])
+
+if test "x$enable_stack_protector" != "xno"; then
+	save_CFLAGS="$CFLAGS"
+	CFLAGS="${CFLAGS} ${EXTRA_DEVELOPER_CFLAGS}"
+	AC_COMPILE_IFELSE(
+		[AC_LANG_PROGRAM([],[],[])],
+		[],
+		[AC_MSG_WARN([All of ${EXTRA_DEVELOPER_CFLAGS} not supported, disabling])
+		    CFLAGS="$save_CFLAGS"])
+fi
+
+# --enable-stack-protector
+AC_ARG_ENABLE(stack-protector,
+	AS_HELP_STRING([--enable-stack-protector],[enable stack protector (default is NO)]),
+	[],
+	[enable_stack_protector=no])
+
+if test "x$enable_stack_protector" != "xno"; then
+	save_CFLAGS="$CFLAGS"
+	CFLAGS="${CFLAGS} -fstack-protector-all"
+	AC_COMPILE_IFELSE(
+		[AC_LANG_PROGRAM([],[],[])],
+		[],
+		[AC_MSG_WARN([-fstack-protector not supported, disabling])
+		    CFLAGS="$save_CFLAGS"])
+fi
+
+# --enable-tests
+AC_ARG_ENABLE(tests,
+	AS_HELP_STRING([--enable-tests],[build test programs (default is NO)]))
+AM_CONDITIONAL([ENABLE_TESTS], [test x$enable_tests = xyes])
+
+# --enable-werror
+AC_ARG_ENABLE(werror,
+	AS_HELP_STRING([--enable-werror],[use -Werror (default is NO)]),
+	CFLAGS="${CFLAGS} -Werror")
+
+
+AC_CONFIG_FILES([
+	Makefile
+	src/Makefile
+])
+AC_OUTPUT
diff --git a/varnish4-vmods/libvmod-header-4.0/debian/changelog b/varnish4-vmods/libvmod-header-4.0/debian/changelog
new file mode 100644
index 0000000..4fbfc17
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/debian/changelog
@@ -0,0 +1,5 @@
+libvmod-header (0.3) unstable; urgency=low
+
+  * First version
+
+ -- Lasse Karstensen <lasse@varnish-software.com>  Wed, 19 Sep 2012 15:03:00 +0200
diff --git a/varnish4-vmods/libvmod-header-4.0/debian/compat b/varnish4-vmods/libvmod-header-4.0/debian/compat
new file mode 100644
index 0000000..7f8f011
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/debian/compat
@@ -0,0 +1 @@
+7
diff --git a/varnish4-vmods/libvmod-header-4.0/debian/control b/varnish4-vmods/libvmod-header-4.0/debian/control
new file mode 100644
index 0000000..a5c947e
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/debian/control
@@ -0,0 +1,17 @@
+Source: libvmod-header
+Section: web
+Priority: extra
+Maintainer: Varnish Software <support@varnish-software.com>
+Build-Depends: debhelper (>= 7),
+ build-essential,
+ pkg-config,
+ python-docutils,
+ varnish (>= 4.0.2),
+ libvarnishapi-dev (>= 4.0.2)
+Standards-Version: 3.8.1
+Vcs-Git: git://github.com/varnish/libvmod-header.git
+
+Package: libvmod-header
+Architecture: any
+Depends: varnish (>= 4.0.2), ${misc:Depends}
+Description: header vmod for Varnish
diff --git a/varnish4-vmods/libvmod-header-4.0/debian/copyright b/varnish4-vmods/libvmod-header-4.0/debian/copyright
new file mode 100644
index 0000000..12ff29a
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/debian/copyright
@@ -0,0 +1,29 @@
+Copyright:
+
+    Copyright 2009-2014 Varnish Software AS
+
+License:
+
+Copyright (c) 2010-2014 Varnish Software AS
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
diff --git a/varnish4-vmods/libvmod-header-4.0/debian/dirs b/varnish4-vmods/libvmod-header-4.0/debian/dirs
new file mode 100644
index 0000000..be2e66d
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/debian/dirs
@@ -0,0 +1 @@
+usr/share/doc/libvmod-header
diff --git a/varnish4-vmods/libvmod-header-4.0/debian/docs b/varnish4-vmods/libvmod-header-4.0/debian/docs
new file mode 100644
index 0000000..92bab46
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/debian/docs
@@ -0,0 +1,2 @@
+README.rst
+LICENSE
diff --git a/varnish4-vmods/libvmod-header-4.0/debian/rules b/varnish4-vmods/libvmod-header-4.0/debian/rules
new file mode 100755
index 0000000..af8f2d0
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/debian/rules
@@ -0,0 +1,12 @@
+#!/usr/bin/make -f
+export DH_VERBOSE=1
+
+override_dh_gencontrol:
+	if [ -n "$$DEBIAN_OVERRIDE_BINARY_VERSION" ]; then \
+		dh_gencontrol -- -v$$DEBIAN_OVERRIDE_BINARY_VERSION; \
+	else \
+		dh_gencontrol ; \
+	fi
+
+%:
+	dh $@
diff --git a/varnish4-vmods/libvmod-header-4.0/m4/PLACEHOLDER b/varnish4-vmods/libvmod-header-4.0/m4/PLACEHOLDER
new file mode 100644
index 0000000..e69de29
diff --git a/varnish4-vmods/libvmod-header-4.0/m4/varnish.m4 b/varnish4-vmods/libvmod-header-4.0/m4/varnish.m4
new file mode 100644
index 0000000..8339cb0
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/m4/varnish.m4
@@ -0,0 +1,100 @@
+# varnish.m4 - Macros to locate Varnish header files.            -*- Autoconf -*-
+# serial 3 (varnish-4.0)
+
+# Copyright (c) 2013-2015 Varnish Software AS
+# All rights reserved.
+#
+# Author: Tollef Fog Heen <tfheen@varnish-software.com>
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+# SUCH DAMAGE.
+#
+
+# For compatibility with autoconf < 2.63b
+m4_ifndef([AS_VAR_COPY],
+  [m4_define([AS_VAR_COPY],
+     [AS_LITERAL_IF([$1[]$2], [$1=$$2], [eval $1=\$$2])])]) 
+
+# VARNISH_VMOD_INCLUDE_DIR([])
+# ----------------------------
+
+AC_DEFUN([VARNISH_VMOD_INCLUDES],
+[
+m4_pattern_forbid([^_?VARNISH[A-Z_]+$])
+m4_pattern_allow([^VARNISH_VMOD(_INCLUDE_DIR|TOOL)$])
+# Check for pkg-config
+PKG_CHECK_EXISTS([varnishapi],[],[
+	if test -n "$PKG_CONFIG"; then
+		AC_MSG_FAILURE(
+[The pkg-config script could not be found or is too old.  Make sure it
+is in your PATH or set the PKG_CONFIG environment variable to the full
+path to pkg-config.
+
+To get pkg-config, see <http://pkg-config.freedesktop.org/>.])
+	else
+		AC_MSG_FAILURE(
+[pkg-config was unable to locate the varnishapi configuration data.
+
+Please check config.log or adjust the PKG_CONFIG_PATH environment
+variable if you installed software in a non-standard prefix.])
+	fi
+])
+
+VARNISH_PKG_GET_VAR([VAPI_INCLUDE_DIR], [pkgincludedir])
+_CPPFLAGS="$CPPFLAGS"
+VMOD_INCLUDES="-I$VAPI_INCLUDE_DIR"
+CPPFLAGS="$VMOD_INCLUDES $CPPFLAGS"
+AC_CHECK_HEADERS([vsha256.h cache/cache.h])
+CPPFLAGS="$_CPPFLAGS"
+AC_SUBST([VMOD_INCLUDES])
+])# VARNISH_VMOD_INCLUDE_DIR
+
+# VARNISH_VMOD_DIR([])
+# --------------------
+
+AC_DEFUN([VARNISH_VMOD_DIR],
+[
+VARNISH_PKG_GET_VAR([VMOD_DIR], [vmoddir])
+AC_SUBST([VMOD_DIR])
+])
+
+# VARNISH_VMODTOOL([])
+# --------------------
+
+AC_DEFUN([VARNISH_VMODTOOL],
+[
+VARNISH_PKG_GET_VAR([VMODTOOL], [vmodtool])
+AC_SUBST([VMODTOOL])
+])
+
+# VARNISH_PKG_GET_VAR([VARIABLE, PC_VAR_NAME])
+# -------------------------------
+
+AC_DEFUN([VARNISH_PKG_GET_VAR],
+[
+# Uses internal function for now..
+pkg_failed=no
+_PKG_CONFIG([$1], [variable=][$2], [varnishapi])
+if test "$pkg_failed" = "yes"; then
+   AC_MSG_FAILURE([$2][ not defined, too old Varnish?])
+fi
+AS_VAR_COPY([$1], [pkg_cv_][$1])
+])
diff --git a/varnish4-vmods/libvmod-header-4.0/src/Makefile.am b/varnish4-vmods/libvmod-header-4.0/src/Makefile.am
new file mode 100644
index 0000000..dc31ebc
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/Makefile.am
@@ -0,0 +1,30 @@
+AM_CPPFLAGS = @VMOD_INCLUDES@
+
+vmoddir = @VMOD_DIR@
+vmod_LTLIBRARIES = libvmod_header.la
+
+libvmod_header_la_LDFLAGS = -module -export-dynamic -avoid-version
+
+libvmod_header_la_SOURCES = \
+	vcc_if.c \
+	vcc_if.h \
+	vmod_header.c
+
+vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_header.vcc
+	@VMODTOOL@ $(top_srcdir)/src/vmod_header.vcc
+
+VMOD_TESTS = $(top_srcdir)/src/tests/*.vtc
+.PHONY: $(VMOD_TESTS)
+
+$(top_srcdir)/src/tests/*.vtc:
+	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
+
+check: $(VMOD_TESTS)
+
+EXTRA_DIST = \
+	vmod_header.vcc \
+	$(VMOD_TESTS)
+
+CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h \
+	$(builddir)/vmod_header.man.rst \
+	$(builddir)/vmod_header.rst
diff --git a/varnish4-vmods/libvmod-header-4.0/src/tests/append.vtc b/varnish4-vmods/libvmod-header-4.0/src/tests/append.vtc
new file mode 100644
index 0000000..667d272
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/tests/append.vtc
@@ -0,0 +1,40 @@
+varnishtest "Header-vmod: Test appending"
+
+server s1 {
+	timeout 10
+
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "foo: 1" -hdr "foo: 2"
+	rxreq
+	expect req.url == "/bar"
+	txresp -status 200 -hdr "foo: 1" -hdr "foo: 2"
+} -start
+
+varnish v1 -vcl+backend {
+	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
+
+	sub vcl_backend_response {
+		if (bereq.url == "/foo") {
+			set beresp.http.foo = "null";
+		} elsif ( bereq.url == "/bar") {
+			header.append(beresp.http.foo, "blatti");
+		}
+		return(deliver);
+	}
+} -start
+
+client c1 {
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "null"
+} -run
+
+client c2 {
+	txreq -url "/bar"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == 1
+} -run
+
diff --git a/varnish4-vmods/libvmod-header-4.0/src/tests/copy.vtc b/varnish4-vmods/libvmod-header-4.0/src/tests/copy.vtc
new file mode 100644
index 0000000..64a6809
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/tests/copy.vtc
@@ -0,0 +1,45 @@
+
+# This assumes that:
+#  1. Append works
+#  2. The first header is the only tested in varnishtest when multiple
+#     copies are present
+
+varnishtest "Header-vmod: Test copying"
+
+server s1 {
+	timeout 10
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3"
+} -start
+
+varnish v1 -vcl+backend {
+	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
+
+	sub vcl_backend_response {
+		if (bereq.url == "/foo") {
+			header.copy(beresp.http.foo,beresp.http.bar);
+			set beresp.http.x-one = header.get(beresp.http.bar,"one");
+			set beresp.http.x-two = header.get(beresp.http.bar,"two");
+			set beresp.http.x-three = header.get(beresp.http.bar,"three");
+			set beresp.http.y-one = header.get(beresp.http.foo,"one");
+			set beresp.http.y-two = header.get(beresp.http.foo,"two");
+			set beresp.http.y-three = header.get(beresp.http.foo,"three");
+		}
+		return(deliver);
+	}
+} -start
+
+client c1 {
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.bar == "one=1"
+	expect resp.http.foo == "one=1"
+	expect resp.http.x-one == "one=1"
+	expect resp.http.x-two == "two=2"
+	expect resp.http.x-three == "three=3"
+	expect resp.http.y-one == "one=1"
+	expect resp.http.y-two == "two=2"
+	expect resp.http.y-three == "three=3"
+} -run
diff --git a/varnish4-vmods/libvmod-header-4.0/src/tests/get.vtc b/varnish4-vmods/libvmod-header-4.0/src/tests/get.vtc
new file mode 100644
index 0000000..1348036
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/tests/get.vtc
@@ -0,0 +1,40 @@
+
+varnishtest "Header-vmod: Test fetching"
+
+server s1 {
+	timeout 10
+
+	rxreq
+	expect req.url == "/"
+	txresp -status 200 -hdr "foo: sillycookie=blah" -hdr "foo: realcookie=YAI"
+	rxreq
+	expect req.url == "/two"
+	txresp -status 200 -hdr "foo: sillycookie=blah" -hdr "foo: realcookie=YAI"
+} -start
+
+varnish v1 -vcl+backend {
+	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
+
+	sub vcl_backend_response {
+		if (bereq.url == "/") {
+			set beresp.http.xusr = header.get(beresp.http.foo,"realcookie=");
+		} elsif (bereq.url == "/two") {
+			set beresp.http.xusr = header.get(beresp.http.foo,"^realcookie=");
+		}
+		return(deliver);
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.xusr == "realcookie=YAI"
+
+	txreq -url "/two"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.xusr == "realcookie=YAI"
+} -run
+
+
diff --git a/varnish4-vmods/libvmod-header-4.0/src/tests/import.vtc b/varnish4-vmods/libvmod-header-4.0/src/tests/import.vtc
new file mode 100644
index 0000000..0371be2
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/tests/import.vtc
@@ -0,0 +1,20 @@
+varnishtest "Header-vmod: Test basic import"
+
+server s1 {
+	timeout 10
+	rxreq
+	expect req.url == "/"
+	txresp -status 200 -hdr "foo: 1"
+} -start
+
+varnish v1 -vcl+backend {
+	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == 1
+} -run
+
diff --git a/varnish4-vmods/libvmod-header-4.0/src/tests/keep-others.vtc b/varnish4-vmods/libvmod-header-4.0/src/tests/keep-others.vtc
new file mode 100644
index 0000000..48a854a
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/tests/keep-others.vtc
@@ -0,0 +1,48 @@
+# Bug #1 !
+# The remove-function was removing somewhat vigorously.
+# This check ensures that other headers are kept intact.
+
+varnishtest "Header-vmod: Ensure other headers remain untouched"
+
+server s1 {
+	timeout 10
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "bar: xxx=y" -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3"
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "Content-Type: text/html" -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3"
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3" -hdr "Content-Type: text/html"
+} -start
+
+varnish v1 -vcl+backend {
+	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
+
+	sub vcl_backend_response {
+		if (bereq.url == "/foo") {
+			header.remove(beresp.http.foo,"one=1");
+		}
+
+		set beresp.uncacheable = true;
+	}
+} -start
+
+client c1 {
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "two=2"
+	expect resp.http.bar == "xxx=y"
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "two=2"
+	expect resp.http.Content-Type == "text/html"
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "two=2"
+	expect resp.http.Content-Type == "text/html"
+} -run
diff --git a/varnish4-vmods/libvmod-header-4.0/src/tests/remove.vtc b/varnish4-vmods/libvmod-header-4.0/src/tests/remove.vtc
new file mode 100644
index 0000000..66a386d
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/tests/remove.vtc
@@ -0,0 +1,96 @@
+
+varnishtest "Header-vmod: Test removing"
+
+server s1 {
+	timeout 10
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "foo: notok=1" -hdr "foo: ok2k" -hdr "foo: notok=2"
+	rxreq
+	expect req.url == "/bar"
+	txresp -status 200 -hdr "foo: notok=1" -hdr "foo: ok2k" -hdr "foo: notok=2"
+	rxreq
+	expect req.url == "/nothing"
+	txresp -status 200 -hdr "foo: notok=1" -hdr "foo: ok2k" -hdr "foo: notok=2"
+	rxreq
+	expect req.url == "/blatti1"
+	txresp -status 200 -hdr "foo: notok=1" -hdr "foo:notok=3" -hdr "foo: ok2k" -hdr "foo: notok=2"
+	rxreq
+	expect req.url == "/blatti2"
+	txresp -status 200 -hdr "foo: notok=1" -hdr "foo: ok2k" -hdr "foo:notok=3" -hdr "foo: notok=2"
+	rxreq
+	expect req.url == "/blatti3"
+	txresp -status 200 -hdr "set-cookie: analytics=1" -hdr "set-cookie: funcookie=ok2k" -hdr "set-cookie: uglycookie=3" -hdr "set-cookie: notok=2"
+	
+} -start
+
+varnish v1 -vcl+backend {
+	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
+
+	sub vcl_backend_response {
+		if (bereq.url == "/foo") {
+			header.remove(beresp.http.foo,"notok");
+		}
+		if (bereq.url == "/nothing") {
+			header.remove(beresp.http.foo,".");
+		}
+		if (bereq.url == "/blatti1") {
+			header.remove(beresp.http.foo,"^ no.ok=.$");
+		}
+		if (bereq.url == "/blatti2") {
+			header.remove(beresp.http.foo,"^no.ok=.$");
+		}
+		if (bereq.url == "/blatti3") {
+			header.remove(beresp.http.set-cookie,"^(?!(funcookie=))");
+		}
+		if (beresp.http.foo) {
+			set beresp.http.foo-exists = "yes";
+		} else {
+			set beresp.http.foo-exists = "no";
+		}
+
+		return(deliver);
+	}
+} -start
+
+client c1 {
+	# Remove one, "notok". Assumes ok2k (second in line) is tested next
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "ok2k"
+
+	# Remove nothing
+	txreq -url "/bar"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "notok=1"
+
+	# Remove everything (confusing names, huh?)
+	txreq -url "/nothing"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo-exists == "no"
+
+	# Remove with regex - fail due to whitespace in the regex
+	txreq -url "/blatti1"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo-exists == "yes"
+	expect resp.http.foo == "notok=1"
+
+	# Remove with regex - work (remove leading whitespace)
+	txreq -url "/blatti2"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo-exists == "yes"
+	expect resp.http.foo == "ok2k"
+	
+	# Remove everything except fun-cookie
+	txreq -url "/blatti3"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo-exists == "no"
+	expect resp.http.set-cookie == "funcookie=ok2k"
+} -run
+
diff --git a/varnish4-vmods/libvmod-header-4.0/src/tests/some-data.vtc b/varnish4-vmods/libvmod-header-4.0/src/tests/some-data.vtc
new file mode 100644
index 0000000..8b5fbbd
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/tests/some-data.vtc
@@ -0,0 +1,51 @@
+# Got reports of no data being sent in return after 3.0.1, this test-case
+# tries to do some simple verification, though it fails to detect the
+# problem.
+
+
+varnishtest "Header-vmod: Send some data too"
+
+server s1 {
+	timeout 10
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "bar: xxx=y" -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3" -body "Hello"
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "Content-Type: text/html" -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3" -body "Hello"
+	rxreq
+	expect req.url == "/foo"
+	txresp -status 200 -hdr "foo: one=1" -hdr "foo: two=2" -hdr "foo: three=3" -hdr "Content-Type: text/html" -body "Hello"
+} -start
+
+varnish v1 -vcl+backend {
+	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
+
+	sub vcl_backend_response {
+		if (bereq.url == "/foo") {
+			header.remove(beresp.http.foo,"one=1");
+		}
+		set beresp.uncacheable = true;
+	}
+} -start
+
+client c1 {
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "two=2"
+	expect resp.http.bar == "xxx=y"
+	expect resp.bodylen == 5
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "two=2"
+	expect resp.http.Content-Type == "text/html"
+	expect resp.bodylen == 5
+	txreq -url "/foo"
+	rxresp
+	expect resp.status == 200
+	expect resp.http.foo == "two=2"
+	expect resp.http.Content-Type == "text/html"
+	expect resp.bodylen == 5
+} -run
diff --git a/varnish4-vmods/libvmod-header-4.0/src/tests/version.vtc b/varnish4-vmods/libvmod-header-4.0/src/tests/version.vtc
new file mode 100644
index 0000000..3246604
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/tests/version.vtc
@@ -0,0 +1,29 @@
+# Somewhat oversimplified, but at least it ensures that SOMETHING works
+# (The alternative would be to automakeify this test or manually update it
+# every time there's a new version, which defeats the purpose somewhat).
+
+varnishtest "Header-vmod: Test version string"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -status 200
+} -start
+
+varnish v1 -vcl+backend {
+	import header from "${vmod_topbuild}/src/.libs/libvmod_header.so";
+
+	sub vcl_backend_response {
+		set beresp.http.x-version = header.version();
+		if (!beresp.http.x-version) {
+			set beresp.status = 500;
+		}
+		return(deliver);
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+} -run
diff --git a/varnish4-vmods/libvmod-header-4.0/src/vmod_header.c b/varnish4-vmods/libvmod-header-4.0/src/vmod_header.c
new file mode 100644
index 0000000..7ec88dd
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/vmod_header.c
@@ -0,0 +1,303 @@
+/*-
+ * Copyright (c) 2011-2013 Varnish Software AS
+ * All rights reserved.
+ *
+ * Author: Kristian Lyngstol <kristian@bohemians.org>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <stdlib.h>
+#include <pthread.h>
+
+#include "vrt.h"
+#include "cache/cache.h"
+
+#include "vcc_if.h"
+#include "config.h"
+
+/*
+ * This mutex is used to avoid having two threads that initializes the same
+ * regex at the same time. While it means that there's a single, global
+ * lock for all libvmod-header actions dealing with regular expressions,
+ * the contention only applies on the first request that calls that
+ * specific function.
+ */
+pthread_mutex_t header_mutex;
+
+/*
+ * Initialize the regex *s on priv, if it hasn't already been done.
+ * XXX: We have to recheck the condition after grabbing the lock to avoid a
+ * XXX: race condition.
+ */
+static void
+header_init_re(struct vmod_priv *priv, const char *s)
+{
+	if (priv->priv == NULL) {
+		assert(pthread_mutex_lock(&header_mutex) == 0);
+		if (priv->priv == NULL) {
+			VRT_re_init(&priv->priv, s);
+			priv->free = VRT_re_fini;
+		}
+		pthread_mutex_unlock(&header_mutex);
+	}
+}
+
+/*
+ * Returns the right struct http * to use for a given type of header.
+ *
+ * FIXME: Stolen bluntly from cache_vrt.c
+ */
+static struct http *
+header_vrt_selecthttp(const struct vrt_ctx *ctx, enum gethdr_e where)
+{
+	struct http *hp;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	switch (where) {
+	case HDR_REQ:
+		hp = ctx->http_req;
+		break;
+	case HDR_BEREQ:
+		hp = ctx->http_bereq;
+		break;
+	case HDR_BERESP:
+		hp = ctx->http_beresp;
+		break;
+	case HDR_RESP:
+		hp = ctx->http_resp;
+		break;
+	case HDR_OBJ:
+		hp = ctx->http_obj;
+		break;
+	default:
+		WRONG("vrt_selecthttp 'where' invalid");
+	}
+	return (hp);
+}
+
+/*
+ * Returns true if the *hdr header is the one pointed to by *hh.
+ *
+ * FIXME: duplication from varnishd.
+ */
+static int
+header_http_IsHdr(const txt *hh, const char *hdr)
+{
+	unsigned l;
+
+	Tcheck(*hh);
+	AN(hdr);
+	l = hdr[0];
+	assert(l == strlen(hdr + 1));
+	assert(hdr[l] == ':');
+	hdr++;
+	return (!strncasecmp(hdr, hh->b, l));
+}
+
+/*
+ * Return true if the hp->hd[u] header matches *hdr and the regex *re
+ * matches the content.
+ *
+ * If re is NULL, content is not tested and as long as it's the right
+ * header, a match is returned.
+ */
+static int
+header_http_match(const struct vrt_ctx *ctx, const struct http *hp, unsigned u, void *re, const char *hdr)
+{
+	char *start;
+	unsigned l;
+
+	assert(hdr);
+	assert(hp);
+
+	Tcheck(hp->hd[u]);
+	if (hp->hd[u].b == NULL)
+		return 0;
+
+	l = hdr[0];
+
+	if (!header_http_IsHdr(&hp->hd[u], hdr))
+		return 0;
+
+	if (re == NULL)
+		return 1;
+
+	start = hp->hd[u].b + l;
+	while (*start != '\0' && *start == ' ')
+		start++;
+
+	if (!*start)
+		return 0;
+	if (VRT_re_match(ctx, start, re))
+		return 1;
+
+	return 0;
+}
+
+/*
+ * Returns the (first) header named as *hdr that also matches the regular
+ * expression *re.
+ */
+static unsigned
+header_http_findhdr(const struct vrt_ctx *ctx, const struct http *hp, const char *hdr, void *re)
+{
+        unsigned u;
+
+        for (u = HTTP_HDR_FIRST; u < hp->nhd; u++) {
+		if (header_http_match(ctx, hp, u, re, hdr))
+			return (u);
+        }
+        return (0);
+}
+
+/*
+ * Removes all copies of the header that matches *hdr with content that
+ * matches *re. Same as http_Unset(), plus regex.
+ */
+static void
+header_http_Unset(const struct vrt_ctx *ctx, struct http *hp, const char *hdr, void *re)
+{
+	unsigned u, v;
+
+	for (v = u = HTTP_HDR_FIRST; u < hp->nhd; u++) {
+		if (hp->hd[u].b == NULL)
+			continue;
+		if (header_http_match(ctx, hp, u, re, hdr))
+			continue;
+		if (v != u) {
+			memcpy(&hp->hd[v], &hp->hd[u], sizeof *hp->hd);
+			memcpy(&hp->hdf[v], &hp->hdf[u], sizeof *hp->hdf);
+		}
+		v++;
+	}
+	hp->nhd = v;
+}
+
+/*
+ * Copies all occurrences of *hdr to a destination header *dst_h. Uses
+ * vmod_header_append(), so all copies are kept intact.
+ *
+ * XXX: Not sure I like the idea of iterating a list of headers while
+ * XXX: adding to it. It may be correct now, but perhaps not so much in
+ * XXX: the future.
+ */
+static void
+header_http_cphdr(const struct vrt_ctx *ctx,
+		  const struct http *hp,
+		  const char *hdr,
+		  VCL_HEADER dst)
+{
+        unsigned u;
+	char *p;
+
+        for (u = HTTP_HDR_FIRST; u < hp->nhd; u++) {
+		if (!header_http_match(ctx, hp, u, NULL, hdr))
+			continue;
+
+		p = hp->hd[u].b + hdr[0];
+		while (*p == ' ' || *p == '\t')
+			p++;
+                vmod_append(ctx, dst, p, vrt_magic_string_end);
+        }
+}
+
+/*
+ * vmod entrypoint. Sets up the header mutex.
+ */
+int
+init_function(struct vmod_priv *priv __attribute__((unused)),
+	      const struct VCL_conf *conf __attribute__((unused)))
+{
+	assert(pthread_mutex_init(&header_mutex, NULL) == 0);
+	return (0);
+}
+
+VCL_VOID __match_proto__()
+vmod_append(const struct vrt_ctx *ctx, VCL_HEADER hdr, const char *fmt, ...)
+{
+	va_list ap;
+	struct http *hp;
+	const char *b;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	assert(fmt != NULL);
+	
+	hp = header_vrt_selecthttp(ctx, hdr->where);
+	va_start(ap, fmt);
+	b = VRT_String(hp->ws, hdr->what + 1, fmt, ap);
+	if (b == NULL)
+		VSLb(ctx->vsl, SLT_LostHeader, "vmod_header: %s", hdr->what + 1);
+	else
+ 		http_SetHeader(hp, b);
+	va_end(ap);
+}
+
+VCL_STRING __match_proto__()
+vmod_get(const struct vrt_ctx *ctx, struct vmod_priv *priv, VCL_HEADER hdr, VCL_STRING s)
+{
+	struct http *hp;
+	unsigned u;
+	char *p;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	header_init_re(priv, s);
+	
+	hp = header_vrt_selecthttp(ctx, hdr->where);
+	u = header_http_findhdr(ctx, hp, hdr->what, priv->priv);
+	if (u == 0) {
+		return NULL;
+	}
+	p = hp->hd[u].b + hdr->what[0];
+	while (*p == ' ' || *p == '\t')
+		p++;
+	return p;
+}
+
+VCL_VOID  __match_proto__()
+vmod_copy(const struct vrt_ctx *ctx, VCL_HEADER src, VCL_HEADER dst)
+{
+	struct http *src_hp;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	
+	src_hp = header_vrt_selecthttp(ctx, src->where);
+	header_http_cphdr(ctx, src_hp, src->what, dst);
+}
+
+VCL_VOID  __match_proto__()
+vmod_remove(const struct vrt_ctx *ctx, struct vmod_priv *priv, VCL_HEADER hdr, VCL_STRING s)
+{
+	struct http *hp;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	header_init_re(priv, s);
+	
+	hp = header_vrt_selecthttp(ctx, hdr->where);
+	header_http_Unset(ctx, hp, hdr->what, priv->priv);
+}
+
+VCL_STRING __match_proto__()
+vmod_version(const struct vrt_ctx *ctx __attribute__((unused)))
+{
+	return VERSION;
+}
diff --git a/varnish4-vmods/libvmod-header-4.0/src/vmod_header.vcc b/varnish4-vmods/libvmod-header-4.0/src/vmod_header.vcc
new file mode 100644
index 0000000..e9e6054
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/src/vmod_header.vcc
@@ -0,0 +1,7 @@
+$Module header 3 Header VMOD for Varnish
+$Init init_function
+$Function VOID append(HEADER,STRING_LIST)
+$Function VOID remove(PRIV_CALL,HEADER,STRING)
+$Function STRING get(PRIV_CALL,HEADER,STRING)
+$Function VOID copy(HEADER,HEADER)
+$Function STRING version()
diff --git a/varnish4-vmods/libvmod-header-4.0/vmod-header.spec b/varnish4-vmods/libvmod-header-4.0/vmod-header.spec
new file mode 100644
index 0000000..3ad1fa6
--- /dev/null
+++ b/varnish4-vmods/libvmod-header-4.0/vmod-header.spec
@@ -0,0 +1,43 @@
+Summary: Header VMOD for Varnish VCL
+Name: vmod-header
+Version: 0.3
+Release: 1%{?dist}
+License: BSD
+Group: System Environment/Daemons
+Source0: ./libvmod-header.tar.gz
+BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
+Requires: varnish >= 4.0.2
+BuildRequires: make
+BuildRequires: python-docutils
+BuildRequires: varnish >= 4.0.2
+BuildRequires: varnish-libs-devel >= 4.0.2
+
+%description
+libvmod-header
+
+%prep
+%setup -n libvmod-header-%{version}
+
+%build
+%configure --prefix=/usr/
+make
+make check
+
+%install
+make install DESTDIR=%{buildroot}
+mkdir -p %{buildroot}/usr/share/doc/%{name}/
+cp README.rst %{buildroot}/usr/share/doc/%{name}/
+cp LICENSE %{buildroot}/usr/share/doc/%{name}/
+
+%clean
+rm -rf %{buildroot}
+
+%files
+%defattr(-,root,root,-)
+%{_libdir}/varnis*/vmods/
+%doc /usr/share/doc/%{name}/*
+%{_mandir}/man?/*
+
+%changelog
+* Wed Oct 03 2012 Lasse Karstensen <lasse@varnish-software.com> - 0.1-0.20120918
+- Initial version.
diff --git a/varnish4-vmods/libvmod-querystring-4.0/CHANGELOG b/varnish4-vmods/libvmod-querystring-4.0/CHANGELOG
new file mode 100644
index 0000000..fe001c5
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/CHANGELOG
@@ -0,0 +1,12 @@
+libvmod-querystring changelog
+=============================
+
+Changes in version 0.2 (2013-07-23)
+-----------------------------------
+
+* Improved documentation
+* Builds in FreeBSD thanks to Wesley Overdijk (#4)
+* Varnish 3.0.4 support
+* Varnish 4 "trunk" support
+* Conditional logging of functions calls and returns
+* RPM packaging
diff --git a/varnish4-vmods/libvmod-querystring-4.0/CONTRIBUTORS b/varnish4-vmods/libvmod-querystring-4.0/CONTRIBUTORS
new file mode 100644
index 0000000..11916a7
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/CONTRIBUTORS
@@ -0,0 +1,4 @@
+Steven Engelhardt <steven.engelhardt@morningstar.com> (through querysort)
+Lasse Karstensen <lasse@varnish-software.com>
+Wesley Overdijk <r.w.overdijk@gmail.com>
+Tobias Jakobsson <tobias@fotobias.se>
diff --git a/varnish4-vmods/libvmod-querystring-4.0/INSTALL b/varnish4-vmods/libvmod-querystring-4.0/INSTALL
new file mode 100644
index 0000000..f4f183d
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/INSTALL
@@ -0,0 +1,69 @@
+Installation Instructions
+=========================
+
+Varnish
+-------
+
+The source tree is based on autotools to configure the building, and does also
+have the necessary bits in place to do functional unit tests using the
+varnishtest tool.
+
+You need to download Varnish source code and build it locally. It is needed for
+varnishtest invocation. Download the appropriate Varnish 3 source tarball
+(http://repo.varnish-cache.org/source/) and extract it somewhere on your disk
+(eg. /usr/src/).
+
+Build Varnish:
+
+cd /usr/src/varnish-3.0.x/
+./autogen.sh
+./configure
+make
+
+libvmod-querystring
+-------------------
+
+Once you have a Varnish build, the libvmod-querystring module can then be built:
+
+cd /path/to/git/repository
+./autogen.sh
+./configure VARNISHSRC=/usr/src/varnish-3.0.x/ [VMODDIR=`DIR`] [--disable-logging]
+make
+sudo make install
+
+`VARNISHSRC` is the directory of the Varnish source tree for which to
+compile your vmod. Both the `VARNISHSRC` and `VARNISHSRC/include`
+will be added to the include search paths for your module.
+
+Optionally you can also set the vmod install directory by adding
+`VMODDIR=DIR` (defaults to the pkg-config discovered directory from your
+Varnish installation).
+
+It is also possible to disable logging for the module, this is enabled by
+default. The module logs function calls (with arguments) and return values.
+Those logs are very valuable when following the code path of a request in the
+VCL, you could even spot unexpected result (a wrong regex for regfilter ?).
+This might be sensible for production environments since each request would
+add to overall logging load. When in doubt, you can disable it at build time.
+
+Make targets:
+
+* make - builds the vmod
+* make install - installs your vmod in `VMODDIR`
+* make check - runs the tests in `src/tests/*.vtc`
+
+RPM packages
+------------
+
+Instead of a manual installation, you can build RPM packages from the source.
+You need two source tarballs in your rpmbuild `SOURCES` directory. Download the
+appropriate Varnish 3 source tarball (http://repo.varnish-cache.org/source/) and
+put it with the libvmod-querystring tarball in the `SOURCES` directory. Since
+the 0.2 release, it is possible to make the tarball from the git repository:
+
+cd /path/to/git/repository
+./dist.sh 0.2
+mv v0.2.tar.gz /path/to/rpmbuild/SOURCES/
+cp rpm/*.patch /path/to/rpmbuild/SOURCES/
+rpmbuild -bb --define 'VARNISHVER 3.0.x' rpm/varnish-vmod-querystring.spec
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/LICENSE b/varnish4-vmods/libvmod-querystring-4.0/LICENSE
new file mode 100644
index 0000000..6d5582c
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/LICENSE
@@ -0,0 +1,30 @@
+libvmod-querystring - querystring manipulation module for Varnish
+
+Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+
+1. Redistributions of source code must retain the above
+   copyright notice, this list of conditions and the following
+   disclaimer.
+2. Redistributions in binary form must reproduce the above
+   copyright notice, this list of conditions and the following
+   disclaimer in the documentation and/or other materials
+   provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+OF THE POSSIBILITY OF SUCH DAMAGE.
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/Makefile.am b/varnish4-vmods/libvmod-querystring-4.0/Makefile.am
new file mode 100644
index 0000000..ed0f641
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/Makefile.am
@@ -0,0 +1,54 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = src
+
+EXTRA_DIST = README.rst
+
+dist_doc_DATA = LICENSE CONTRIBUTORS CHANGELOG
+dist_man_MANS = vmod_querystring.3
+MAINTAINERCLEANFILES = $(dist_man_MANS)
+
+vmod_querystring.3: src/vmod_querystring.man.rst
+
+%.1 %.2 %.3 %.4 %.5 %.6 %.7 %.8 %.9:
+if HAVE_RST2MAN
+	${RST2MAN} $< $@
+else
+	@echo "========================================"
+	@echo "You need rst2man installed to make dist"
+	@echo "========================================"
+	@false
+endif
+
+src-dist:
+	@git archive -o $(PACKAGE)-$(VERSION)-src.tar.gz --prefix=$(PACKAGE)-$(VERSION)/ HEAD
diff --git a/varnish4-vmods/libvmod-querystring-4.0/README.rst b/varnish4-vmods/libvmod-querystring-4.0/README.rst
new file mode 100644
index 0000000..3c874de
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/README.rst
@@ -0,0 +1,184 @@
+.. libvmod-querystring - querystring manipulation module for Varnish
+
+   libvmod-querystring - querystring manipulation module for Varnish
+   
+   Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+   All rights reserved.
+   
+   Redistribution and use in source and binary forms, with or without
+   modification, are permitted provided that the following conditions
+   are met:
+   
+   1. Redistributions of source code must retain the above
+      copyright notice, this list of conditions and the following
+      disclaimer.
+   2. Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials
+      provided with the distribution.
+   
+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+   COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+   OF THE POSSIBILITY OF SUCH DAMAGE.
+
+================
+vmod_querystring
+================
+
+--------------------------
+Varnish QueryString Module
+--------------------------
+
+:Author: Dridi Boukelmoune
+:Date: 2012-06-18
+:Version: 0.2
+:Manual section: 3
+
+SYNOPSIS
+========
+
+import querystring;
+
+DESCRIPTION
+===========
+
+Varnish multipurpose vmod for URI query-string manipulation. Can be used to
+normalize for instance request URLs or Location response headers in various
+ways. It is recommended to at least clean incoming request URLs (removing empty
+parameters or query-strings), all other functions do the cleaning.
+
+FUNCTIONS
+=========
+
+clean
+------
+
+Prototype
+   STRING clean(STRING url)
+Description
+   Returns the given URI without empty parameters. The query-string is removed
+   if empty (either before or after the removal of empty parameters).
+Example
+   .. sourcecode::
+
+      set req.url = querystring.clean(req.url);
+
+remove
+------
+
+Prototype
+   STRING remove(STRING url)
+Description
+   Returns the given URI with its query-string removed
+Example
+   .. sourcecode::
+
+      set req.url = querystring.remove(req.url);
+
+sort
+----
+
+Prototype
+   STRING sort(STRING url)
+Description
+   Returns the given URI with its query-string sorted
+Example
+   .. sourcecode::
+
+      set req.url = querystring.sort(req.url);
+
+filtersep
+---------
+
+Prototype
+   STRING filtersep()
+Description
+   Returns the separator needed by the filter and filter_except functions
+
+filter
+------
+
+Prototype
+   STRING filter(STRING url, STRING_LIST parameter_names)
+Description
+   Returns the given URI without the listed parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter(req.url,
+        "utm_source" + querystring.filtersep() +
+        "utm_medium" + querystring.filtersep() +
+        "utm_campaign");
+
+filter_except
+-------------
+
+Prototype
+   STRING filter_except(STRING url, STRING_LIST parameter_names)
+Description
+   Returns the given URI but only keeps the listed parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter(req.url,
+                                       "q" + querystring.filtersep() + "p");
+
+regfilter
+---------
+
+Prototype
+   STRING regfilter(STRING url, STRING parameter_names_regex)
+Description
+   Returns the given URI without the parameters matching a regular expression
+Example
+   .. sourcecode::
+
+      set req.url = querystring.regfilter(req.url, "utm\_.*");
+
+regfilter_except
+----------------
+
+Prototype
+   STRING regfilter_except(STRING url, STRING parameter_names_regex)
+Description
+   Returns the given URI but only keeps the parameters matching a regular
+   expression
+Example
+   .. sourcecode::
+
+      set req.url = querystring.regfilter_except(req.url, "^(q|p)$");
+
+EXAMPLES
+========
+
+In your VCL you could then use this vmod along the following lines::
+
+   import querystring;
+
+   sub vcl_hash {
+      # sort the URL before the request hashing
+      set req.url = querystring.sort(req.url);
+   }
+
+ACKNOWLEDGMENT
+==============
+
+The sort algorithm is a mix of Jason Mooberry's Skwurly and my own QuerySort
+with regards for the Varnish workspace memory model of the worker threads.
+
+COPYRIGHT
+=========
+
+This document is licensed under the same license as the
+libvmod-querystring project. See LICENSE for details.
+
+* Copyright (c) 2012-2014 Dridi Boukelmoune
diff --git a/varnish4-vmods/libvmod-querystring-4.0/autogen.sh b/varnish4-vmods/libvmod-querystring-4.0/autogen.sh
new file mode 100755
index 0000000..9a12ef5
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/autogen.sh
@@ -0,0 +1,44 @@
+#!/bin/sh
+
+warn() {
+	echo "WARNING: $@" 1>&2
+}
+
+case `uname -s` in
+Darwin)
+	LIBTOOLIZE=glibtoolize
+	;;
+FreeBSD)
+	LIBTOOLIZE=libtoolize
+	;;
+Linux)
+	LIBTOOLIZE=libtoolize
+	;;
+SunOS)
+	LIBTOOLIZE=libtoolize
+	;;
+*)
+	warn "unrecognized platform:" `uname -s`
+	LIBTOOLIZE=libtoolize
+esac
+
+automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
+if [ -z "$automake_version" ] ; then
+	warn "unable to determine automake version"
+else
+	case $automake_version in
+		0.*|1.[0-8]|1.[0-8][.-]*)
+			warn "automake ($automake_version) detected; 1.9 or newer recommended"
+			;;
+		*)
+			;;
+	esac
+fi
+
+set -ex
+
+aclocal -I m4
+$LIBTOOLIZE --copy --force
+autoheader
+automake --add-missing --copy --foreign
+autoconf
diff --git a/varnish4-vmods/libvmod-querystring-4.0/configure.ac b/varnish4-vmods/libvmod-querystring-4.0/configure.ac
new file mode 100644
index 0000000..d646273
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/configure.ac
@@ -0,0 +1,112 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+AC_PREREQ(2.59)
+AC_COPYRIGHT([Copyright (c) 2012-2014 Dridi Boukelmoune <dridi.boukelmoune@gmail.com>])
+AC_INIT([libvmod-querystring], [0.2], [https://github.com/dridi/libvmod-querystring/issues])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_SRCDIR(src/vmod_querystring.c)
+AM_CONFIG_HEADER(config.h)
+
+AC_CANONICAL_SYSTEM
+AC_LANG(C)
+
+AM_INIT_AUTOMAKE([foreign])
+
+AC_GNU_SOURCE
+AC_PROG_CC
+AC_PROG_CC_STDC
+if test "x$ac_cv_prog_cc_c99" = xno; then
+	AC_MSG_ERROR([Could not find a C99 compatible compiler])
+fi
+AC_PROG_CPP
+
+AC_PROG_INSTALL
+AC_PROG_LIBTOOL
+AC_PROG_MAKE_SET
+
+# Check for rst utilities
+AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
+if test "x$RST2MAN" = "xno"; then
+	AC_MSG_WARN([rst2man not found - not building man pages])
+fi
+AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
+
+# Check for pkg-config
+PKG_PROG_PKG_CONFIG
+
+# Checks for header files
+AC_HEADER_STDC
+AC_CHECK_HEADERS([sys/stdlib.h])
+
+# Check for functions
+AC_CHECK_FUNCS([mempcpy])
+
+# Check for python
+AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
+
+# Conditional logging
+AC_ARG_ENABLE(
+	[logging],
+	[AS_HELP_STRING(
+		[--disable-logging],
+		[Disable VCL calls and return values logging. @<:@enabled by default@:>@]
+	)],
+	[],
+	[enable_logging=yes]
+)
+
+if test "x$enable_logging" != "xno"; then
+	AC_SUBST([DEFINE_LOGGING], [-DQS_ENABLE_LOGGING])
+fi
+
+PKG_CHECK_MODULES([libvarnishapi], [varnishapi])
+
+# Varnish include files tree
+VARNISH_VMOD_INCLUDES
+VARNISH_VMOD_DIR
+VARNISH_VMODTOOL
+
+AC_PATH_PROG([VARNISHTEST], [varnishtest])
+AC_PATH_PROG([VARNISHD], [varnishd], [],
+    [$PATH:$PATH:`pkg-config varnishapi --variable=sbindir`])
+
+Varnish_Version_MAJOR=4
+
+AC_SUBST([VARNISH_MAJOR], [$Varnish_Version_MAJOR])
+AC_SUBST([DEFINE_MAJOR], [-DVARNISH_MAJOR=$Varnish_Version_MAJOR])
+
+AC_CONFIG_FILES([
+	Makefile
+	src/Makefile
+])
+
+AC_OUTPUT
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/Makefile.am b/varnish4-vmods/libvmod-querystring-4.0/src/Makefile.am
new file mode 100644
index 0000000..8f3f728
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/Makefile.am
@@ -0,0 +1,61 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+AM_CPPFLAGS = @VMOD_INCLUDES@ @DEFINE_MAJOR@ @DEFINE_LOGGING@
+
+vmoddir = @VMOD_DIR@
+vmod_LTLIBRARIES = libvmod_querystring.la
+
+libvmod_querystring_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
+
+libvmod_querystring_la_SOURCES = \
+	vcc_if.c \
+	vcc_if.h \
+	vmod_querystring.c \
+	vmod_querystring.h
+
+vcc_if.c vcc_if.h vmod_querystring.man.rst: @VMODTOOL@ $(top_srcdir)/src/vmod_querystring@VARNISH_MAJOR@.vcc ../README.rst
+	cp ../README.rst vmod_querystring.man.rst
+	@VMODTOOL@ $(top_srcdir)/src/vmod_querystring@VARNISH_MAJOR@.vcc
+
+VMOD_TESTS = tests/*.vtc
+.PHONY: $(VMOD_TESTS)
+
+$(top_srcdir)/src/tests/*.vtc:
+	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
+
+check: $(VMOD_TESTS)
+
+EXTRA_DIST = \
+	vmod_querystring.vcc \
+	$(VMOD_TESTS)
+
+CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h $(builddir)/vmod_querystring.man.rst
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..e556b46
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean00_without_querystring_vmod.vtc
@@ -0,0 +1,65 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test clean without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/?"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
new file mode 100644
index 0000000..ce6e5d5
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean01_clean_in_vcl_hash.vtc
@@ -0,0 +1,66 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test clean req.sql in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.clean(req.url);
+	}
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 1
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
new file mode 100644
index 0000000..0cbf891
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean02_clean_empty_params.vtc
@@ -0,0 +1,74 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test clean empty parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/?query"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.clean(req.url);
+	}
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/?query"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&query"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?query&"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&query&"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 3
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
new file mode 100644
index 0000000..7058ee2
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/clean03_clean_all_params.vtc
@@ -0,0 +1,70 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test clean all params (meaning all are empty)"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.clean(req.url);
+	}
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&&"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..7c6e1c3
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter00_without_querystring_vmod.vtc
@@ -0,0 +1,91 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 4
+varnish v1 -expect cache_miss == 4
+varnish v1 -expect cache_hit == 0
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
new file mode 100644
index 0000000..f58cfb2
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter01_filter_in_vcl_hash.vtc
@@ -0,0 +1,91 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.filter(req.url,
+			"utm_source" + querystring.filtersep() +
+			"utm_medium" + querystring.filtersep() +
+			"utm_campaign");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 2
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
new file mode 100644
index 0000000..3ce99ad
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter02_filter_empty_parameters.vtc
@@ -0,0 +1,66 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter empty parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.filter(req.url,
+			"utm_source" + querystring.filtersep() +
+			"utm_medium" + querystring.filtersep() +
+			"utm_campaign");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr&utm_source=git&&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2&&"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
new file mode 100644
index 0000000..84eea65
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter03_filter_all_params.vtc
@@ -0,0 +1,66 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter all parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.filter(req.url,
+			"utm_source" + querystring.filtersep() +
+			"utm_medium" + querystring.filtersep() +
+			"utm_campaign");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..752ac7c
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter_except00_without_querystring_vmod.vtc
@@ -0,0 +1,64 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+#
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter_except without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/search?q=query&p=1"
+	txresp
+
+	rxreq
+	expect req.url == "/search?q=query&p=1&_=timestamp"
+	txresp
+} -start
+
+varnish v1 -vcl+backend {} -start
+
+client c1 {
+	txreq -url "/search?q=query&p=1"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/search?q=query&p=1&_=timestamp"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
new file mode 100644
index 0000000..f7084ec
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/filter_except01_filter_in_vcl_hash.vtc
@@ -0,0 +1,67 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+#
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test filter_except querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/search?q=query&p=1"
+	txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.filter_except(req.url,
+			                  "p" + querystring.filtersep() + "q");
+	}
+} -start
+
+client c1 {
+	txreq -url "/search?q=query&p=1"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/search?q=query&p=1&_=timestamp"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 1
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
new file mode 100644
index 0000000..16622b0
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter01_regfilter_in_vcl_hash.vtc
@@ -0,0 +1,88 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "utm_.*");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 2
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
new file mode 100644
index 0000000..d9edbd4
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter02_regfilter_with_bad_regex.vtc
@@ -0,0 +1,96 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter with bad regex"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "utm(_.*");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 0
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 4
+varnish v1 -expect cache_miss == 4
+varnish v1 -expect cache_hit == 0
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
new file mode 100644
index 0000000..1359229
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter03_regfilter_empty_parameters.vtc
@@ -0,0 +1,63 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter empty parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/article?lang=fr"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/article?lang=fr&page=2"
+	txresp -body "DEF\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "utm_.*");
+	}
+} -start
+
+client c1 {
+	txreq -url "/article?lang=fr&utm_source=git&&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/article?lang=fr&utm_source=git&utm_campaign=filter&utm_medium=varnishtest&page=2&&"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
new file mode 100644
index 0000000..76a188c
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter04_regfilter_all_params.vtc
@@ -0,0 +1,63 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter all parameters"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "utm_.*");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?utm_source=git&utm_campaign=filter&utm_medium=varnishtest"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
new file mode 100644
index 0000000..4db3480
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter05_allow_params.vtc
@@ -0,0 +1,59 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter to allow some params only"
+
+server s1 {
+	rxreq
+	expect req.url == "/?authorized=false&allowed=false"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter(req.url, "^(?!authorized|allowed)");
+	}
+} -start
+
+client c1 {
+	txreq -url "/?authorized=false&allowed=false"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?authorized=false&allowed=false&unknown"
+	rxresp
+	expect resp.status == 200
+}
+
+client c1 -run
+server s1 -wait
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
new file mode 100644
index 0000000..e5dc0b6
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/regfilter_except01_regfilter_in_vcl_hash.vtc
@@ -0,0 +1,71 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+#
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test regfilter_except querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/search?q=query&p=1"
+	txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.regfilter_except(req.url, "^(p|q)$");
+	}
+} -start
+
+client c1 {
+	txreq -url "/search?q=query&p=1"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/search?q=query&p=1&_=timestamp"
+	rxresp
+	expect resp.status == 200
+
+	# example given in issue #7
+	txreq -url "/search?q=query&p=1&poof"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..f427e8c
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/remove00_without_querystring_vmod.vtc
@@ -0,0 +1,73 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test remove without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/?some=noise"
+	txresp -body "ABC\n"
+	
+	rxreq
+	expect req.url == "/?noise=again"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?some=noise"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?noise=again"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 3
+varnish v1 -expect cache_miss == 3
+varnish v1 -expect cache_hit == 0
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
new file mode 100644
index 0000000..1bc829f
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/remove01_remove_in_vcl_hash.vtc
@@ -0,0 +1,70 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test remove querystring from req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.remove(req.url);
+	}
+} -start
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.status == 200
+	
+	txreq -url "/?some=noise"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?noise=again"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
new file mode 100644
index 0000000..de71196
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort00_without_querystring_vmod.vtc
@@ -0,0 +1,79 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test sort without querystring vmod"
+
+server s1 {
+	rxreq
+	expect req.url == "/?b&a"
+	txresp -body "ABC\n"
+
+	rxreq
+	expect req.url == "/?a&b"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+} -start
+
+client c1 {
+	txreq -url "/?b&a"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?b&a"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/?a&b"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 1
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 2
+varnish v1 -expect cache_miss == 2
+varnish v1 -expect cache_hit == 1
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
new file mode 100644
index 0000000..23bf111
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort01_sort_in_vcl_hash.vtc
@@ -0,0 +1,80 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test sort req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/?a&b"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.sort(req.url);
+	}
+} -start
+
+client c1 {
+	txreq -url "/?b&a"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?b&a"
+	rxresp
+	expect resp.status == 200
+}
+
+client c2 {
+	txreq -url "/?a&b"
+	rxresp
+	expect resp.status == 200
+}
+
+varnish v1 -expect n_object == 0
+varnish v1 -expect cache_miss == 0
+varnish v1 -expect cache_hit == 0
+
+client c1 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 1
+
+client c2 -run
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc b/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
new file mode 100644
index 0000000..4997bd2
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/tests/sort02_clean_empty_parameters.vtc
@@ -0,0 +1,66 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2013, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+varnishtest "Test sort req.url in vcl_hash"
+
+server s1 {
+	rxreq
+	expect req.url == "/?a&b"
+	txresp -body "ABC\n"
+} -start
+
+varnish v1 -vcl+backend {
+	import querystring from "${vmod_topbuild}/src/.libs/libvmod_querystring.so";
+
+	sub vcl_hash {
+		set req.url = querystring.sort(req.url);
+	}
+} -start
+
+client c1 {
+	txreq -url "/?b&a&"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?&b&a"
+	rxresp
+	expect resp.status == 200
+
+	txreq -url "/?b&&a"
+	rxresp
+	expect resp.status == 200
+}  -run
+
+delay .1
+
+varnish v1 -expect n_object == 1
+varnish v1 -expect cache_miss == 1
+varnish v1 -expect cache_hit == 2
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring.c b/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring.c
new file mode 100644
index 0000000..5a16872
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring.c
@@ -0,0 +1,812 @@
+/*
+ * libvmod-querystring - querystring manipulation module for Varnish
+ *
+ * Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above
+ *    copyright notice, this list of conditions and the following
+ *    disclaimer.
+ * 2. Redistributions in binary form must reproduce the above
+ *    copyright notice, this list of conditions and the following
+ *    disclaimer in the documentation and/or other materials
+ *    provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#define _GNU_SOURCE  // required for strchrnul()
+#include <stdlib.h>
+#include <string.h>
+#include <stdarg.h>
+#include <stdbool.h>
+
+#include "vrt.h"
+#include "vre.h"
+#include "vmod_querystring.h"
+
+#include "vcc_if.h"
+
+/* End Of Query Parameter */
+#define EOQP(c) (*c == '\0' || *c == '&')
+
+/***********************************************************************/
+
+#ifndef HAVE_MEMPCPY
+
+void *mempcpy(void *dst, const void *src, size_t len)
+{
+	return (void*)(((char*)memcpy(dst, src, len)) + len);
+}
+
+#endif
+
+/***********************************************************************
+ * The static functions below contain the actual implementation of the
+ * module with the least possible coupling to Varnish. This helps keep a
+ * single code base for all Varnish versions.
+ */
+
+static const char *
+truncate_querystring(struct ws *ws, const char *uri, const char *query_string)
+{
+	int query_string_position;
+	char *truncated_uri;
+
+	query_string_position = query_string - uri;
+	truncated_uri = WS_Alloc(ws, query_string_position);
+
+	if (truncated_uri == NULL) {
+		return uri;
+	}
+
+	memcpy(truncated_uri, uri, query_string_position);
+	truncated_uri[query_string_position] = '\0';
+
+	return truncated_uri;
+}
+
+static const char *
+remove_querystring(struct ws *ws, const char *uri)
+{
+	if (uri == NULL) {
+		return NULL;
+	}
+
+	char *query_string = strchr(uri, '?');
+	if (query_string == NULL) {
+		return uri;
+	}
+
+	return truncate_querystring(ws, uri, query_string);
+}
+
+static int
+compare_params(const char* a, const char* b)
+{
+	while (*a == *b) {
+		if (EOQP(a) || EOQP(b)) {
+			return 0;
+		}
+		a++;
+		b++;
+	}
+	return *a - *b;
+}
+
+static const char *
+sort_querystring(struct ws *ws, const char *uri)
+{
+	if (uri == NULL) {
+		return NULL;
+	}
+
+	char *query_string = strchr(uri, '?');
+	if (query_string == NULL) {
+		return uri;
+	}
+
+	if (query_string[1] == '\0') {
+		return truncate_querystring(ws, uri, query_string);
+	}
+
+	/* reserve some memory */
+	char *snapshot = WS_Snapshot(ws);
+	char *sorted_uri = WS_Alloc(ws, strlen(uri) + 1);
+
+	WS_Assert(ws);
+
+	if (sorted_uri == NULL) {
+		WS_Reset(ws, snapshot);
+		return uri;
+	}
+
+	unsigned available = WS_Reserve(ws, 0);
+	struct query_param *params = (struct query_param*) ws->f;
+	struct query_param *end = params + available;
+
+	/* initialize the params array */
+	int head = 10;
+
+	if (&params[head + 1] > end) {
+		head = 0;
+	}
+
+	if (&params[head + 1] > end) {
+		WS_Release(ws, 0);
+		WS_Reset(ws, snapshot);
+		return uri;
+	}
+
+	int tail = head;
+	int last_param = head;
+
+	/* search and sort params */
+	bool sorted = true;
+	char *c = query_string + 1;
+	params[head].value = c;
+
+	for (; *c != '\0' && &params[tail+1] < end; c++) {
+		if (*c != '&') {
+			continue;
+		}
+
+		const char *current_param = c+1;
+		params[last_param].length = c - params[last_param].value;
+
+		if (head > 0 && compare_params(params[head].value, current_param) > -1) {
+			sorted = false;
+			params[--head].value = current_param;
+			last_param = head;
+			continue;
+		}
+
+		if (compare_params(params[tail].value, current_param) < 1) {
+			params[++tail].value = current_param;
+			last_param = tail;
+			continue;
+		}
+
+		sorted = false;
+
+		int i = tail++;
+		params[tail] = params[i];
+
+		int previous = i-1;
+		while (i > head && compare_params(params[previous].value, current_param) > -1) {
+			params[i--] = params[previous--];
+		}
+
+		params[i].value = current_param;
+		last_param = i;
+	}
+
+	if (sorted == true || &params[tail+1] >= end || tail - head < 1) {
+		WS_Release(ws, 0);
+		WS_Reset(ws, snapshot);
+		return uri;
+	}
+
+	params[last_param].length = c - params[last_param].value;
+
+	/* copy the url parts */
+	char *position = mempcpy(sorted_uri, uri, query_string - uri + 1);
+	int count = tail-head;
+
+	for (;count > 0; count--, ++head) {
+		if (params[head].length > 0) {
+			position = mempcpy(position, params[head].value, params[head].length);
+			*position++ = '&';
+		}
+	}
+
+	if (params[head].length > 0) {
+		position = mempcpy(position, params[head].value, params[head].length);
+	}
+	else {
+		position--;
+	}
+
+	*position = '\0';
+
+	WS_Release(ws, 0);
+	return sorted_uri;
+}
+
+static void
+append_string(char **begin, const char *end, const char *string, int length)
+{
+	if (*begin + length < end) {
+		memcpy(*begin, string, length);
+	}
+	*begin += length;
+}
+
+static bool
+is_param_cleaned(const char *param, int length, struct filter_context *context)
+{
+	return length == 0;
+}
+
+static bool
+is_param_filtered(const char *param, int length, struct filter_context *context)
+{
+	va_list aq;
+	if (length == 0) {
+		return true;
+	}
+
+	const char *p = context->params.filter.params;
+
+	va_copy(aq, context->params.filter.ap);
+	while (p != vrt_magic_string_end) {
+		if (p != NULL && strlen(p) == length && strncmp(param, p, length) == 0) {
+			return true ^ context->is_kept;
+		}
+		p = va_arg(aq, const char*);
+	}
+	va_end(aq);
+
+	return false ^ context->is_kept;
+}
+
+static bool
+is_param_filtered_csv(const char *param, int length, struct filter_context *context)
+{
+	if (length == 0) {
+		return true;
+	}
+
+	const char *p = context->params.filter.params;
+
+	while (*p) {
+        const char *end = strchrnul(p, ',');
+		if (end-p == length && strncmp(param, p, end-p) == 0) {
+			return true ^ context->is_kept;
+		}
+		p = *end ? end+1 : end;
+	}
+
+	return false ^ context->is_kept;
+}
+
+static bool
+is_param_regfiltered(const char *param, int length, struct filter_context *context)
+{
+	if (length == 0) {
+		return true;
+	}
+
+	char p[length + 1];
+
+	memcpy(p, param, length);
+	p[length] = '\0';
+
+	bool match;
+#ifdef QS_NEED_RE_CTX
+	match = (bool) VRT_re_match(context->params.regfilter.re_ctx, p,
+	                            context->params.regfilter.re);
+#else
+	match = (bool) VRT_re_match(p, context->params.regfilter.re);
+#endif
+	return match ^ context->is_kept;
+}
+
+static void *
+compile_regex(const char *regex)
+{
+	void *re;
+	const char *error;
+	int error_offset;
+
+	re = VRE_compile(regex, 0, &error, &error_offset);
+	return re;
+}
+
+static const char*
+apply_filter(struct filter_context *context)
+{
+	unsigned available = WS_Reserve(context->ws, 0);
+	char *begin = context->ws->f;
+	char *end = &begin[available];
+	const char *cursor = context->query_string;
+
+	append_string(&begin, end, context->uri, cursor - context->uri + 1);
+
+	while (*cursor != '\0' && begin < end) {
+		const char *param_position = ++cursor;
+		const char *equal_position = NULL;
+
+		while (*cursor != '\0' && *cursor != '&') {
+			if (equal_position == NULL && *cursor == '=') {
+				equal_position = cursor;
+			}
+			cursor++;
+		}
+
+		int param_name_length =
+			(equal_position ? equal_position : cursor) - param_position;
+
+		if ( ! context->is_filtered(param_position, param_name_length, context) ) {
+			append_string(&begin, end, param_position, cursor - param_position);
+			if (*cursor == '&') {
+				*begin = '&';
+				begin++;
+			}
+		}
+	}
+
+	if (begin < end) {
+		begin -= (begin[-1] == '&');
+		begin -= (begin[-1] == '?');
+		*begin = '\0';
+	}
+
+	begin++;
+
+	if (begin > end) {
+		WS_Release(context->ws, 0);
+		return context->uri;
+	}
+
+	end = begin;
+	begin = context->ws->f;
+	WS_Release(context->ws, end - begin);
+	return begin;
+}
+
+static const char *
+filter_querystring(struct filter_context *context)
+{
+	const char *uri = context->uri;
+	const char *query_string;
+	const char *filtered_uri;
+
+	if (uri == NULL) {
+		return NULL;
+	}
+
+	query_string = strchr(uri, '?');
+
+	if (query_string == NULL) {
+		return uri;
+	}
+
+	if (query_string[1] == '\0') {
+		return truncate_querystring(context->ws, uri, query_string);
+	}
+
+	if (context->type == regfilter) {
+		void *re = compile_regex(context->params.regfilter.regex);
+		if (re == NULL) {
+			return uri;
+		}
+		context->params.regfilter.re = re;
+	}
+
+	context->query_string = query_string;
+	filtered_uri = apply_filter(context);
+
+	if (context->type == regfilter) {
+		VRT_re_fini(context->params.regfilter.re);
+	}
+
+	return filtered_uri;
+}
+
+/***********************************************************************
+ * Below are the functions that will actually be linked by Varnish.
+ */
+
+#if VARNISH_MAJOR == 3
+
+const char *
+vmod_clean(struct sess *sp, const char *uri)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\"", uri);
+
+	context.type = clean;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.is_filtered = &is_param_cleaned;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_remove(struct sess *sp, const char *uri)
+{
+	const char *cleaned_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\"", uri);
+
+	cleaned_uri = remove_querystring(sp->ws, uri);
+
+	QS_LOG_RETURN(sp, cleaned_uri);
+	return cleaned_uri;
+}
+
+const char *
+vmod_sort(struct sess *sp, const char *uri)
+{
+	const char *sorted_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\"", uri);
+
+	sorted_uri = sort_querystring(sp->ws, uri);
+
+	QS_LOG_RETURN(sp, sorted_uri);
+	return sorted_uri;
+}
+
+const char *
+vmod_filtersep(struct sess *sp)
+{
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	return NULL;
+}
+
+const char *
+vmod_filter(struct sess *sp, const char *uri, const char *params, ...)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered;
+	context.is_kept = false;
+
+	va_start(context.params.filter.ap, params);
+	filtered_uri = filter_querystring(&context);
+	va_end(context.params.filter.ap);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_filter_csv(struct sess *sp, const char *uri, const char *params)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, params);
+
+	context.type = filter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered_csv;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_filter_except(struct sess *sp, const char *uri, const char *params, ...)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered;
+	context.is_kept = true;
+
+	va_start(context.params.filter.ap, params);
+	filtered_uri = filter_querystring(&context);
+	va_end(context.params.filter.ap);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_filter_except_csv(struct sess *sp, const char *uri, const char *params)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, params);
+
+	context.type = filter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered_csv;
+	context.is_kept = true;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_regfilter(struct sess *sp, const char *uri, const char *regex)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, regex);
+
+	context.type = regfilter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.regfilter.regex = regex;
+	context.params.regfilter.re_ctx = sp;
+	context.is_filtered = &is_param_regfiltered;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_regfilter_except(struct sess *sp, const char *uri, const char *regex)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
+	QS_LOG_CALL(sp, "\"%s\", \"%s\"", uri, regex);
+
+	context.type = regfilter;
+	context.ws = sp->ws;
+	context.uri = uri;
+	context.params.regfilter.regex = regex;
+	context.params.regfilter.re_ctx = sp;
+	context.is_filtered = &is_param_regfiltered;
+	context.is_kept = true;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(sp, filtered_uri);
+	return filtered_uri;
+}
+
+#endif
+
+/***********************************************************************/
+
+#if VARNISH_MAJOR == 4
+
+const char *
+vmod_clean(const struct vrt_ctx *ctx, const char *uri)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\"", uri);
+
+	context.type = clean;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.is_filtered = &is_param_cleaned;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_remove(const struct vrt_ctx *ctx, const char *uri)
+{
+	const char *cleaned_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\"", uri);
+
+	cleaned_uri = remove_querystring(ctx->ws, uri);
+
+	QS_LOG_RETURN(ctx, cleaned_uri);
+	return cleaned_uri;
+}
+
+const char *
+vmod_sort(const struct vrt_ctx *ctx, const char *uri)
+{
+	const char *sorted_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\"", uri);
+
+	sorted_uri = sort_querystring(ctx->ws, uri);
+
+	QS_LOG_RETURN(ctx, sorted_uri);
+	return sorted_uri;
+}
+
+const char *
+vmod_filtersep(const struct vrt_ctx *ctx)
+{
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	return NULL;
+}
+
+const char *
+vmod_filter(const struct vrt_ctx *ctx, const char *uri, const char *params, ...)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered;
+	context.is_kept = false;
+
+	va_start(context.params.filter.ap, params);
+	filtered_uri = filter_querystring(&context);
+	va_end(context.params.filter.ap);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_filter_csv(const struct vrt_ctx *ctx, const char *uri, const char *params)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\"", uri, params);
+
+	context.type = filter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered_csv;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_filter_except(const struct vrt_ctx *ctx, const char *uri, const char *params, ...)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered;
+	context.is_kept = true;
+
+	va_start(context.params.filter.ap, params);
+	filtered_uri = filter_querystring(&context);
+	va_end(context.params.filter.ap);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_filter_except_csv(const struct vrt_ctx *ctx, const char *uri, const char *params)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\", ...", uri, params);
+
+	context.type = filter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.filter.params = params;
+	context.is_filtered = &is_param_filtered_csv;
+	context.is_kept = true;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_regfilter(const struct vrt_ctx *ctx, const char *uri, const char *regex)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\"", uri, regex);
+
+	context.type = regfilter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.regfilter.regex = regex;
+	context.params.regfilter.re_ctx = ctx;
+	context.is_filtered = &is_param_regfiltered;
+	context.is_kept = false;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+const char *
+vmod_regfilter_except(const struct vrt_ctx *ctx, const char *uri, const char *regex)
+{
+	struct filter_context context;
+	const char *filtered_uri;
+
+	CHECK_OBJ_NOTNULL(ctx, VRT_CTX_MAGIC);
+	QS_LOG_CALL(ctx, "\"%s\", \"%s\"", uri, regex);
+
+	context.type = regfilter;
+	context.ws = ctx->ws;
+	context.uri = uri;
+	context.params.regfilter.regex = regex;
+	context.params.regfilter.re_ctx = ctx;
+	context.is_filtered = &is_param_regfiltered;
+	context.is_kept = true;
+
+	filtered_uri = filter_querystring(&context);
+
+	QS_LOG_RETURN(ctx, filtered_uri);
+	return filtered_uri;
+}
+
+#endif
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring.h b/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring.h
new file mode 100644
index 0000000..4010bc6
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring.h
@@ -0,0 +1,123 @@
+/*
+ * libvmod-querystring - querystring manipulation module for Varnish
+ * 
+ * Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+ * All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 
+ * 1. Redistributions of source code must retain the above
+ *    copyright notice, this list of conditions and the following
+ *    disclaimer.
+ * 2. Redistributions in binary form must reproduce the above
+ *    copyright notice, this list of conditions and the following
+ *    disclaimer in the documentation and/or other materials
+ *    provided with the distribution.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *
+ * This file manages API changes in order to cross-compile against
+ * different versions of Varnish:
+ *
+ * * Varnish 4.0.0
+ * - cache.h has been moved
+ * - provides vrt_ctx instead of sess
+ *
+ * * Varnish 3.0.3
+ * - VRT_re_match needs a sess pointer
+ */
+
+#if VARNISH_MAJOR == 3
+
+#include "cache.h"
+
+#if defined HAVE_VARNISH_3_0_3 || defined HAVE_VARNISH_3_0_4 \
+ || defined HAVE_VARNISH_3_0_5 || defined HAVE_VARNISH_3_0_6
+#define QS_NEED_RE_CTX
+#endif
+
+#define QS_LOG_CALL(sp, pattern, ...) \
+	WSP(sp, SLT_VCL_call, "%s(" pattern ")", __func__, __VA_ARGS__);
+
+#define QS_LOG_RETURN(sp, value) WSP(sp, SLT_VCL_return, "\"%s\"", value);
+
+typedef struct sess re_ctx;
+
+#endif // VARNISH_MAJOR == 3
+
+/* ------------------------------------------------------------------- */
+
+#if VARNISH_MAJOR == 4
+
+#include "cache/cache.h"
+
+#define QS_NEED_RE_CTX
+
+#define QS_LOG_CALL(ctx, pattern, ...) \
+	VSLb(ctx->vsl, SLT_VCL_call, "%s(" pattern ")", __func__, __VA_ARGS__);
+
+#define QS_LOG_RETURN(ctx, value) VSLb(ctx->vsl, SLT_VCL_return, "\"%s\"", value);
+
+typedef const struct vrt_ctx re_ctx;
+
+#endif // VARNISH_MAJOR == 4
+
+/* ------------------------------------------------------------------- */
+
+#ifndef QS_ENABLE_LOGGING
+
+#undef QS_LOG_CALL
+#undef QS_LOG_RETURN
+
+#define QS_LOG_CALL
+#define QS_LOG_RETURN
+
+#endif
+
+/* ------------------------------------------------------------------- */
+
+struct query_param {
+	const char *value;
+	short length;
+};
+
+enum filter_type {clean, filter, regfilter};
+
+struct filter_params {
+	const char *params;
+	va_list    ap;
+};
+
+struct regfilter_params {
+	const char *regex;
+	void       *re;
+	re_ctx     *re_ctx;
+};
+
+struct filter_context {
+	enum filter_type type;
+	struct ws        *ws;
+	const char       *uri;
+	const char       *query_string;
+	union {
+		struct filter_params    filter;
+		struct regfilter_params regfilter;
+	} params;
+	bool (*is_filtered) (const char*, int, struct filter_context*);
+	bool   is_kept;
+};
+
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring3.vcc b/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring3.vcc
new file mode 100644
index 0000000..55689cc
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring3.vcc
@@ -0,0 +1,15 @@
+Module querystring
+
+Function STRING clean(STRING)
+Function STRING remove(STRING)
+
+Function STRING sort(STRING)
+
+Function STRING filtersep()
+Function STRING filter(STRING, STRING_LIST)
+Function STRING filter_except(STRING, STRING_LIST)
+Function STRING filter_csv(STRING, STRING)
+Function STRING filter_except_csv(STRING, STRING)
+
+Function STRING regfilter(STRING, STRING)
+Function STRING regfilter_except(STRING, STRING)
diff --git a/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring4.vcc b/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring4.vcc
new file mode 100644
index 0000000..f52582f
--- /dev/null
+++ b/varnish4-vmods/libvmod-querystring-4.0/src/vmod_querystring4.vcc
@@ -0,0 +1,171 @@
+# libvmod-querystring - querystring manipulation module for Varnish
+# 
+# Copyright (C) 2012-2014, Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 
+# 1. Redistributions of source code must retain the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer.
+# 2. Redistributions in binary form must reproduce the above
+#    copyright notice, this list of conditions and the following
+#    disclaimer in the documentation and/or other materials
+#    provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+# OF THE POSSIBILITY OF SUCH DAMAGE.
+
+$Module querystring Varnish QueryString Module
+
+DESCRIPTION
+===========
+
+Varnish multipurpose vmod for URI query-string manipulation. Can be used to
+normalize for instance request URLs or Location response headers in various
+ways. It is recommended to at least clean incoming request URLs (removing empty
+parameters or query-strings), all other functions do the cleaning.
+
+
+$Function STRING clean(STRING)
+
+Description
+   Returns the given URI without empty parameters. The query-string is removed
+   if empty (either before or after the removal of empty parameters).
+Example
+   .. sourcecode::
+
+      set req.url = querystring.clean(req.url);
+
+
+$Function STRING remove(STRING)
+
+Description
+   Returns the given URI with its query-string removed
+Example
+   .. sourcecode::
+
+      set req.url = querystring.remove(req.url);
+
+
+$Function STRING sort(STRING)
+
+Description
+   Returns the given URI with its query-string sorted
+Example
+   .. sourcecode::
+
+      set req.url = querystring.sort(req.url);
+
+
+$Function STRING filtersep()
+
+Description
+   Returns the separator needed by the filter and filter_except functions
+
+
+$Function STRING filter(STRING, STRING_LIST)
+
+Description
+   Returns the given URI without the listed parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter(req.url,
+        "utm_source" + querystring.filtersep() +
+        "utm_medium" + querystring.filtersep() +
+        "utm_campaign");
+
+
+$Function STRING filter_except(STRING, STRING_LIST)
+
+Description
+   Returns the given URI but only keeps the listed parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter_except(req.url,
+                                       "q" + querystring.filtersep() + "p");
+
+$Function STRING filter_csv(STRING, STRING)
+
+Description
+   Returns the given URI without the listed comma-separated parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter_csv(req.url,
+        "utm_source,utm_medium,utm_campaign");
+
+
+$Function STRING filter_except_csv(STRING, STRING)
+
+Description
+   Returns the given URI but only keeps the listed comma-separated parameters
+Example
+   .. sourcecode::
+
+      set req.url = querystring.filter_except_csv(req.url, "q,p");
+
+$Function STRING regfilter(STRING, STRING)
+
+Description
+   Returns the given URI without the parameters matching a regular expression
+Example
+   .. sourcecode::
+
+      set req.url = querystring.regfilter(req.url, "utm\_.*");
+
+
+$Function STRING regfilter_except(STRING, STRING)
+
+Description
+   Returns the given URI but only keeps the parameters matching a regular
+   expression
+Example
+   .. sourcecode::
+
+      set req.url = querystring.regfilter_except(req.url, "^(q|p)$");
+
+
+EXAMPLES
+========
+
+In your VCL you could then use this vmod along the following lines::
+
+   import querystring;
+
+   sub vcl_hash {
+      # sort the URL before the request hashing
+      set req.url = querystring.sort(req.url);
+   }
+
+You can use regfilter to specify a list of arguments that must not be removed
+(everything else will be) with a negative look-ahead expression::
+
+   set req.url = querystring.regfilter(req.url, "^(?!param1|param2)");
+
+
+ACKNOWLEDGMENT
+==============
+
+The sort algorithm is a mix of Jason Mooberry's Skwurly and my own QuerySort
+with regards for the Varnish workspace memory model of the worker threads.
+
+
+SEE ALSO
+========
+
+vcl(7) varnishd(1)
diff --git a/varnish4-vmods/libvmod-revvar-4.0/.gitignore b/varnish4-vmods/libvmod-revvar-4.0/.gitignore
new file mode 100644
index 0000000..12120ba
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/.gitignore
@@ -0,0 +1,29 @@
+Makefile
+Makefile.in
+.deps/
+.libs/
+*.o
+*.lo
+*.la
+*~
+
+/aclocal.m4
+/autom4te.cache/
+/compile
+/config.guess
+/config.h
+/config.h.in
+/config.log
+/config.status
+/config.sub
+/configure
+/depcomp
+/install-sh
+/libtool
+/ltmain.sh
+/missing
+/stamp-h1
+/m4/
+
+/src/vcc_if.c
+/src/vcc_if.h
diff --git a/varnish4-vmods/libvmod-revvar-4.0/LICENSE b/varnish4-vmods/libvmod-revvar-4.0/LICENSE
new file mode 100644
index 0000000..56cb50b
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/LICENSE
@@ -0,0 +1,23 @@
+Copyright (c) 2011 Varnish Software AS
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
diff --git a/varnish4-vmods/libvmod-revvar-4.0/Makefile.am b/varnish4-vmods/libvmod-revvar-4.0/Makefile.am
new file mode 100644
index 0000000..b3c32dd
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/Makefile.am
@@ -0,0 +1,8 @@
+ACLOCAL_AMFLAGS = -I m4
+
+DISTCHECK_CONFIGURE_FLAGS = \
+        VMOD_DIR='$${libdir}/varnish/vmods'
+
+EXTRA_DIST = README LICENSE vmod-var.spec debian
+
+SUBDIRS = src man
diff --git a/varnish4-vmods/libvmod-revvar-4.0/README b/varnish4-vmods/libvmod-revvar-4.0/README
new file mode 100644
index 0000000..33f1f7b
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/README
@@ -0,0 +1,34 @@
+This VMOD implements basic variable in VCL. Well. It's more of an
+association list with support for strings, ints and reals.
+
+There are methods to get and set each type.
+
+Prototype, most should be self-explaining:
+
+Function VOID init_var_count(INT)
+
+Function VOID set_int(BOOL, INT, INT)
+Function INT get_int(BOOL, INT)
+
+Function VOID set_string(BOOL, INT, STRING)
+Function STRING get_string(BOOL, INT)
+
+Function VOID set_real(BOOL, INT, REAL)
+Function REAL get_real(BOOL, INT)
+
+Function VOID set_duration(BOOL, INT, DURATION)
+Function DURATION get_duration(BOOL, INT)
+
+Function VOID clear(BOOL)
+
+init_var_count() sets the number of variables we are going to define.
+clear() clears the whole variable space.
+
+The variables are referenced by their index, between 0 and the number
+passed to init_var_count().
+
+The first BOOL parameter to each function determines whether the
+variable is read from the 'vcl_receive' (user) scope (TRUE) or from
+the 'vcl_backend_response' (backend) scope (FALSE).
+
+The first INT parameter is the variable index.
\ No newline at end of file
diff --git a/varnish4-vmods/libvmod-revvar-4.0/autogen.sh b/varnish4-vmods/libvmod-revvar-4.0/autogen.sh
new file mode 100755
index 0000000..2e1fb89
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/autogen.sh
@@ -0,0 +1,44 @@
+#!/bin/sh
+
+warn() {
+	echo "WARNING: $@" 1>&2
+}
+
+case `uname -s` in
+Darwin)
+	LIBTOOLIZE=glibtoolize
+	;;
+FreeBSD)
+	LIBTOOLIZE=libtoolize
+	;;
+Linux)
+	LIBTOOLIZE=libtoolize
+	;;
+SunOS)
+	LIBTOOLIZE=libtoolize
+	;;
+*)
+	warn "unrecognized platform:" `uname -s`
+	LIBTOOLIZE=libtoolize
+esac
+
+automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
+if [ -z "$automake_version" ] ; then
+	warn "unable to determine automake version"
+else
+	case $automake_version in
+		0.*|1.[0-8]|1.[0-8][.-]*)
+			warn "automake ($automake_version) detected; 1.9 or newer recommended"
+			;;
+		*)
+			;;
+	esac
+fi
+
+set -ex
+
+$LIBTOOLIZE --copy --force
+aclocal -I m4
+autoheader
+automake --add-missing --copy --foreign
+autoconf
diff --git a/varnish4-vmods/libvmod-revvar-4.0/configure.ac b/varnish4-vmods/libvmod-revvar-4.0/configure.ac
new file mode 100644
index 0000000..e544712
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/configure.ac
@@ -0,0 +1,56 @@
+AC_PREREQ(2.64)
+AC_COPYRIGHT([Copyright (c) 2011-2014 Varnish Software AS])
+AC_INIT([libvmod-var], [0.1])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_SRCDIR(src/vmod_revvar.vcc)
+AM_CONFIG_HEADER(config.h)
+
+AC_CANONICAL_SYSTEM
+AC_LANG(C)
+
+AM_INIT_AUTOMAKE([foreign])
+
+AC_GNU_SOURCE
+AC_PROG_CC
+AC_PROG_CC_STDC
+if test "x$ac_cv_prog_cc_c99" = xno; then
+	AC_MSG_ERROR([Could not find a C99 compatible compiler])
+fi
+AC_PROG_CPP
+
+AC_PROG_INSTALL
+AC_PROG_LIBTOOL
+AC_PROG_MAKE_SET
+
+# Check for rst utilities
+AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
+if test "x$RST2MAN" = "xno"; then
+	AC_MSG_WARN([rst2man not found - not building man pages])
+fi
+AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
+
+# Check for pkg-config
+PKG_PROG_PKG_CONFIG
+
+# Checks for header files.
+AC_HEADER_STDC
+AC_CHECK_HEADERS([sys/stdlib.h])
+
+# Check for python
+AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
+
+# Varnish include files tree
+VARNISH_VMOD_INCLUDES
+VARNISH_VMOD_DIR
+VARNISH_VMODTOOL
+
+AC_PATH_PROG([VARNISHTEST], [varnishtest])
+AC_PATH_PROG([VARNISHD], [varnishd], [],
+    [$PATH:$PATH:`pkg-config varnishapi --variable=sbindir`])
+
+AC_CONFIG_FILES([
+	Makefile
+	src/Makefile
+	man/Makefile
+])
+AC_OUTPUT
diff --git a/varnish4-vmods/libvmod-revvar-4.0/man/Makefile.am b/varnish4-vmods/libvmod-revvar-4.0/man/Makefile.am
new file mode 100644
index 0000000..91ab35e
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/man/Makefile.am
@@ -0,0 +1,15 @@
+#
+
+dist_man_MANS = vmod_var.3
+MAINTAINERCLEANFILES = $(dist_man_MANS)
+EXTRA_DIST = vmod_var.rst
+
+vmod_var.3: vmod_var.rst
+if HAVE_RST2MAN
+	${RST2MAN} vmod_var.rst $@
+else
+	@echo "========================================"
+	@echo "You need rst2man installed to make dist"
+	@echo "========================================"
+	@false
+endif
diff --git a/varnish4-vmods/libvmod-revvar-4.0/man/vmod_var.rst b/varnish4-vmods/libvmod-revvar-4.0/man/vmod_var.rst
new file mode 100644
index 0000000..c8e91b1
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/man/vmod_var.rst
@@ -0,0 +1,91 @@
+============
+vmod_example
+============
+
+----------------------
+Varnish Example Module
+----------------------
+
+:Author: Tollef Fog Heen
+:Date: 2011-09-28
+:Version: 1.0
+:Manual section: 3
+
+SYNOPSIS
+========
+
+import var;
+
+DESCRIPTION
+===========
+
+Association list in VCL. Can be used to mimick variables.
+
+FUNCTIONS
+=========
+
+set_string
+----------
+
+Prototype
+	set_string(STRING S, STRING T)
+        set(STRING S, STRING T) - shorthand
+Return value
+	NONE
+Description
+	Sets the variable identified by S to the value T.
+Example
+	var.set_string("bar", "some random string");
+
+get_string
+----------
+
+Prototype
+	get_string(STRING S)
+        get(STRING S) - shorthand
+Return value
+	STRING
+Description
+	Returns the string identified by the supplied string.
+Example
+	set resp.http.foo = var.get_string("bar");
+
+Similar functions
+-----------------
+
+There are similar functions named:
+
+* set_int(STRING, INT)
+* get_int(STRING)
+* set_real(STRING, REAL)
+* get_real(STRING)
+* set_duration(STRING, DURATION)
+* get_duration(STRING)
+
+get and set are shorthand for get_string and set_string.
+
+clear
+-----
+
+Prototype
+	Function VOID clear()
+Returns
+	NONE
+Description
+	Clears out all the variables.
+Example
+	
+
+HISTORY
+=======
+
+This manual page was written by Per Buer. It might contain
+errors. Patches are welcome.
+
+COPYRIGHT
+=========
+
+This document is licensed under the same license as the
+libvmod-example project. See LICENSE for details.
+
+* Copyright (c) 2012 Varnish Software
diff --git a/varnish4-vmods/libvmod-revvar-4.0/src/Makefile.am b/varnish4-vmods/libvmod-revvar-4.0/src/Makefile.am
new file mode 100644
index 0000000..bcf7453
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/src/Makefile.am
@@ -0,0 +1,28 @@
+AM_CPPFLAGS = @VMOD_INCLUDES@
+
+vmoddir = @VMOD_DIR@
+vmod_LTLIBRARIES = libvmod_revvar.la
+
+libvmod_revvar_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
+
+libvmod_revvar_la_SOURCES = \
+	vcc_if.c \
+	vcc_if.h \
+	vmod_revvar.c
+
+vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_revvar.vcc
+	@VMODTOOL@ $(top_srcdir)/src/vmod_revvar.vcc
+
+VMOD_TESTS =  $(top_srcdir)/src/tests/*.vtc
+.PHONY: $(VMOD_TESTS)
+
+$(top_srcdir)/src/tests/*.vtc:
+	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
+
+check: $(VMOD_TESTS)
+
+EXTRA_DIST = \
+	vmod_revvar.vcc \
+	$(VMOD_TESTS)
+
+CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h
\ No newline at end of file
diff --git a/varnish4-vmods/libvmod-revvar-4.0/src/tests/test01.vtc b/varnish4-vmods/libvmod-revvar-4.0/src/tests/test01.vtc
new file mode 100644
index 0000000..b97689b
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/src/tests/test01.vtc
@@ -0,0 +1,39 @@
+varnishtest "Test var vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import revvar from "${vmod_topbuild}/src/.libs/libvmod_revvar.so";
+
+	sub vcl_deliver {
+		revvar.set("foo", "bar");
+		set resp.http.x-foo = revvar.get("foo");
+		revvar.set("foo2", "bar2");
+		set resp.http.x-foo = revvar.get("foo");
+		revvar.clear();
+		set resp.http.x-foo2 = "" + revvar.get("foo2");
+		revvar.set_int("i1", 123);
+		set resp.http.i1 = revvar.get_int("i1") + 1;
+		revvar.set_real("r1", 2);
+		revvar.set_real("r1", revvar.get_real("r1"));
+		set resp.http.r1 = revvar.get_real("r1");
+
+		revvar.set_duration("d1", 1m);
+		set resp.http.d1 = revvar.get_duration("d1");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.x-foo == "bar"
+	expect resp.http.x-foo2 == ""
+	expect resp.http.i1 == "124"
+	expect resp.http.r1 == "2.000"
+	expect resp.http.d1 == "60.000"
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-revvar-4.0/src/tests/test02.vtc b/varnish4-vmods/libvmod-revvar-4.0/src/tests/test02.vtc
new file mode 100644
index 0000000..dbd58cf
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/src/tests/test02.vtc
@@ -0,0 +1,28 @@
+varnishtest "Test global variables"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import revvar from "${vmod_topbuild}/src/.libs/libvmod_revvar.so";
+
+	sub vcl_init {
+		revvar.global_set("foo", "fooval");
+		revvar.global_set("bar", "barval");
+		revvar.global_set("bar", "altered_barval");
+	}
+
+	sub vcl_deliver {
+		set resp.http.x-foo = revvar.global_get("foo");
+		set resp.http.x-bar = revvar.global_get("bar");
+	}
+} -start
+
+client c1 {
+	txreq
+	rxresp
+	expect resp.http.x-foo == "fooval"
+	expect resp.http.x-bar == "altered_barval"
+} -run
diff --git a/varnish4-vmods/libvmod-revvar-4.0/src/tests/test03.vtc b/varnish4-vmods/libvmod-revvar-4.0/src/tests/test03.vtc
new file mode 100644
index 0000000..a8f020b
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/src/tests/test03.vtc
@@ -0,0 +1,41 @@
+varnishtest "Test var vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import revvar from "${vmod_topbuild}/src/.libs/libvmod_revvar.so";
+
+	sub vcl_deliver {
+		revvar.set("foo", "bar");
+		set resp.http.x-foo = revvar.get("foo");
+		revvar.set("foo2", "bar2");
+		set resp.http.x-foo = revvar.get("foo");
+		revvar.clear();
+		set resp.http.x-foo2 = "" + revvar.get("foo2");
+		revvar.set_int("i1", 123);
+		set resp.http.i1 = revvar.get_int("i1") + 1;
+		revvar.set_real("r1", 2);
+		revvar.set_real("r1", revvar.get_real("r1"));
+		set resp.http.r1 = revvar.get_real("r1");
+
+		revvar.set_duration("d1", 1m);
+		set resp.http.d1 = revvar.get_duration("d1");
+		set resp.http.x-null = revvar.get("nosuchvar");
+		set resp.http.x-null2 = revvar.get(req.http.no-such-var);
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.x-foo == "bar"
+	expect resp.http.x-foo2 == ""
+	expect resp.http.i1 == "124"
+	expect resp.http.r1 == "2.000"
+	expect resp.http.d1 == "60.000"
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-revvar-4.0/src/vmod_revvar.c b/varnish4-vmods/libvmod-revvar-4.0/src/vmod_revvar.c
new file mode 100644
index 0000000..f524b7f
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/src/vmod_revvar.c
@@ -0,0 +1,285 @@
+#include <stdlib.h>
+#include <ctype.h>
+
+#include "vrt.h"
+#include "cache/cache.h"
+
+#include "vcc_if.h"
+
+enum VAR_TYPE {
+	UNSET,
+	STRING,
+    STRING_LITERAL,
+	INT,
+	REAL,
+	DURATION,
+	BOOL
+};
+
+struct var {
+	enum VAR_TYPE type;
+	union {
+		char *STRING;
+		int INT;
+		unsigned BOOL;
+		double REAL;
+		double DURATION;
+	} value;
+};
+
+struct var_array {
+    unsigned magic;
+#define VAR_ARRAY_MAGIC 0x8A21A651
+    unsigned count;
+    struct var *items;
+};
+
+static struct var_array *
+_get_var_array(const struct vrt_ctx *ctx, VCL_BOOL from_req)
+{
+    struct rev_vmod *vmod;
+    struct var_array *vars;
+
+    if (from_req) {
+        AN(ctx->req);
+        vmod = &ctx->req->vmod_revvar;
+    } else {
+        AN(ctx->bo);
+        vmod = &ctx->bo->vmod_revvar;
+    }
+
+    CHECK_OBJ_NOTNULL(vmod, REV_VMOD_MAGIC);
+    if (!VALID_OBJ(vmod, REV_VMOD_MAGIC))
+        return NULL;
+
+    vars = vmod->data;
+    CHECK_OBJ_NOTNULL(vars, VAR_ARRAY_MAGIC);
+    if (!VALID_OBJ(vars, VAR_ARRAY_MAGIC))
+        return NULL;
+
+    return vars;
+}
+
+static struct var *
+_get_var(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx)
+{
+    struct var_array *vars = _get_var_array(ctx, from_req);
+
+	AN(vars);
+    assert(idx >= 0 && idx < vars->count);
+
+    if (vars && idx >= 0 && idx < vars->count)
+        return &vars->items[idx];
+	return NULL;
+}
+
+static struct var_array *
+_alloc_var_array(struct ws *ws, unsigned count, VCL_BOOL zero_out)
+{
+    struct var_array *new_vars =
+        (struct var_array *)WS_Alloc(ws, sizeof(*new_vars));
+
+    AN(new_vars);
+    if (new_vars) {
+        new_vars->magic = VAR_ARRAY_MAGIC;
+        new_vars->count = count;
+        new_vars->items =
+            (struct var *)WS_Alloc(ws, count * sizeof(struct var));
+
+        if (zero_out)
+            memset(new_vars->items, 0, count * sizeof(struct var));
+    }
+
+    return new_vars;
+}
+
+static void*
+_duplicate_vars(struct ws *ws, void *data)
+{
+    struct var_array *vars = data;
+    struct var_array *new_vars;
+    unsigned i;
+
+    CHECK_OBJ_NOTNULL(vars, VAR_ARRAY_MAGIC);
+
+    new_vars = _alloc_var_array(ws, vars->count, 0);
+    if (new_vars) {
+        /* Copy variables into new array, making sure allocations are done in ws. */
+        memcpy(new_vars->items, vars->items, vars->count * sizeof(struct var));
+        for (i=0; i<new_vars->count; ++i) {
+            struct var *v = &new_vars->items[i];
+
+            /* We must copy the string into our own ws.
+               STRING_LITERAL doesn't need to be copied, because it's a static value
+               defined at compile time. */
+            if (v->type == STRING && v->value.STRING)
+                v->value.STRING = WS_Copy(ws, v->value.STRING, -1);
+        }
+    }
+
+    return new_vars;
+}
+
+VCL_VOID
+vmod_init_var_count(const struct vrt_ctx *ctx, VCL_INT count)
+{
+    struct rev_vmod *vmod;
+    struct var *vars;
+
+    /* Always initialize only the 'req' vars.
+       They are copied to 'bo' anyway before 'vcl_backend_response'. */
+
+    AN(ctx->req);
+    vmod = &ctx->req->vmod_revvar;
+
+    vmod->magic = REV_VMOD_MAGIC;
+    vmod->data  = _alloc_var_array(ctx->ws, count, 1);
+    vmod->dup_data_func = _duplicate_vars;
+}
+
+VCL_VOID
+vmod_unset(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx)
+{
+    struct var *v = _get_var(ctx, from_req, idx);
+    if (v)
+        v->type = UNSET;
+}
+
+VCL_VOID
+vmod_set_string(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_STRING value)
+{
+    struct var *v = _get_var(ctx, from_req, idx);
+    AN(v);
+
+    if (v) {
+        v->type = STRING;
+        if (value == NULL)
+            value = "";
+        v->value.STRING = WS_Copy(ctx->ws, value, -1);
+    }
+}
+
+VCL_VOID
+vmod_set_string_allow_null(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_STRING value)
+{
+    struct var *v = _get_var(ctx, from_req, idx);
+    AN(v);
+
+    if (v) {
+        v->type = STRING;
+        if (value)
+            v->value.STRING = WS_Copy(ctx->ws, value, -1);
+        else
+            v->value.STRING = NULL;
+    }
+}
+
+VCL_VOID
+vmod_set_string_literal(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_STRING value)
+{
+    struct var *v = _get_var(ctx, from_req, idx);
+    AN(v);
+
+    if (v) {
+        v->type = STRING_LITERAL;
+        if (value == NULL)
+            value = "";
+        /* 'value' is a constant, literal string which is "allocated" at compile time.
+         * Don't need to dup it.
+         */
+        v->value.STRING = (char *)value;
+    }
+}
+
+VCL_STRING
+vmod_get_string(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx)
+{
+    struct var *v = _get_var(ctx, from_req, idx);
+
+	if (!v || (v->type != STRING && v->type != STRING_LITERAL))
+		return NULL;
+	return (v->value.STRING);
+}
+
+
+#define VMOD_SET_X(vcl_type_u, vcl_type_l, ctype) \
+VCL_VOID \
+vmod_set_##vcl_type_l(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, ctype value) \
+{ \
+    struct var *v = _get_var(ctx, from_req, idx); \
+    AN(v); \
+    if (v) { \
+	    v->type = vcl_type_u; \
+	    v->value.vcl_type_u = value; \
+    } \
+}
+
+VMOD_SET_X(INT, int, VCL_INT)
+VMOD_SET_X(REAL, real, VCL_REAL)
+VMOD_SET_X(DURATION, duration, VCL_DURATION)
+VMOD_SET_X(BOOL, bool, VCL_BOOL)
+
+#define VMOD_GET_X(vcl_type_u, vcl_type_l, ctype) \
+ctype \
+vmod_get_##vcl_type_l(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx) \
+{ \
+    struct var *v = _get_var(ctx, from_req, idx); \
+	if (!v || v->type != vcl_type_u) \
+		return 0; \
+	return (v->value.vcl_type_u); \
+}
+
+VMOD_GET_X(INT, int, VCL_INT)
+VMOD_GET_X(REAL, real, VCL_REAL)
+VMOD_GET_X(DURATION, duration, VCL_DURATION)
+VMOD_GET_X(BOOL, bool, VCL_BOOL)
+
+VCL_BOOL
+vmod_and_or_set_bool(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_BOOL value)
+{
+    struct var *v = _get_var(ctx, from_req, idx);
+    AN(v);
+    if (!v)
+        return 0;
+
+    if (v->type == UNSET) {
+        v->type = BOOL;
+        v->value.BOOL = value;
+    } else {
+        if (v->type != BOOL)
+            return 0;
+        v->value.BOOL = v->value.BOOL && value;
+    }
+
+    return v->value.BOOL;
+}
+
+VCL_BOOL
+vmod_or_or_set_bool(const struct vrt_ctx *ctx, VCL_BOOL from_req, VCL_INT idx, VCL_BOOL value)
+{
+    struct var *v = _get_var(ctx, from_req, idx);
+    AN(v);
+    if (!v)
+        return 0;
+
+    if (v->type == UNSET) {
+        v->type = BOOL;
+        v->value.BOOL = value;
+    } else {
+		if (v->type != BOOL)
+			return 0;
+		v->value.BOOL = v->value.BOOL || value;
+	}
+	return v->value.BOOL;
+}
+
+VCL_VOID
+vmod_clear(const struct vrt_ctx *ctx, VCL_BOOL from_req)
+{
+    struct var_array *vars = _get_var_array(ctx, from_req);
+    AN(vars);
+
+    if (vars)
+        memset(vars->items, 0, vars->count * sizeof(struct var));
+}
+
diff --git a/varnish4-vmods/libvmod-revvar-4.0/src/vmod_revvar.vcc b/varnish4-vmods/libvmod-revvar-4.0/src/vmod_revvar.vcc
new file mode 100644
index 0000000..6f34242
--- /dev/null
+++ b/varnish4-vmods/libvmod-revvar-4.0/src/vmod_revvar.vcc
@@ -0,0 +1,24 @@
+$Module revvar 3 RevSW Variable VMOD for Varnish
+
+# Set the number of variables to use
+$Function VOID init_var_count(INT)
+
+# Unset for any
+$Function VOID unset(BOOL, INT)
+
+$Function VOID set_int(BOOL, INT, INT)
+$Function INT get_int(BOOL, INT)
+$Function VOID set_string(BOOL, INT, STRING)
+$Function VOID set_string_allow_null(BOOL, INT, STRING)
+$Function VOID set_string_literal(BOOL, INT, STRING)
+$Function STRING get_string(BOOL, INT)
+$Function VOID set_real(BOOL, INT, REAL)
+$Function REAL get_real(BOOL, INT)
+$Function VOID set_duration(BOOL, INT, DURATION)
+$Function DURATION get_duration(BOOL, INT)
+$Function VOID set_bool(BOOL, INT, BOOL)
+$Function BOOL get_bool(BOOL, INT)
+$Function BOOL and_or_set_bool(BOOL, INT, BOOL)
+$Function BOOL or_or_set_bool(BOOL, INT, BOOL)
+
+$Function VOID clear(BOOL)
diff --git a/varnish4-vmods/libvmod-timers-4.0/.gitignore b/varnish4-vmods/libvmod-timers-4.0/.gitignore
new file mode 100644
index 0000000..12120ba
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/.gitignore
@@ -0,0 +1,29 @@
+Makefile
+Makefile.in
+.deps/
+.libs/
+*.o
+*.lo
+*.la
+*~
+
+/aclocal.m4
+/autom4te.cache/
+/compile
+/config.guess
+/config.h
+/config.h.in
+/config.log
+/config.status
+/config.sub
+/configure
+/depcomp
+/install-sh
+/libtool
+/ltmain.sh
+/missing
+/stamp-h1
+/m4/
+
+/src/vcc_if.c
+/src/vcc_if.h
diff --git a/varnish4-vmods/libvmod-timers-4.0/COPYING b/varnish4-vmods/libvmod-timers-4.0/COPYING
new file mode 100644
index 0000000..f792696
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/COPYING
@@ -0,0 +1,7 @@
+Copyright (c) 2011 Varnish Software AS
+...
+See LICENSE for details.
+
+You're free to use and distribute this under terms in the
+LICENSE. Please add your relevant copyright statements.
+
diff --git a/varnish4-vmods/libvmod-timers-4.0/LICENSE b/varnish4-vmods/libvmod-timers-4.0/LICENSE
new file mode 100644
index 0000000..04ccb94
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/LICENSE
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright (c) 2013 Jos Boumans & Krux Digital
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/varnish4-vmods/libvmod-timers-4.0/Makefile.am b/varnish4-vmods/libvmod-timers-4.0/Makefile.am
new file mode 100644
index 0000000..e9c2628
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/Makefile.am
@@ -0,0 +1,18 @@
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = src
+
+EXTRA_DIST = README.rst
+
+dist_man_MANS = vmod_timers.3
+MAINTAINERCLEANFILES = $(dist_man_MANS)
+
+vmod_timers.3: README.rst
+if HAVE_RST2MAN
+	${RST2MAN} README.rst $@
+else
+	@echo "========================================"
+	@echo "You need rst2man installed to make dist"
+	@echo "========================================"
+	@false
+endif
diff --git a/varnish4-vmods/libvmod-timers-4.0/README.rst b/varnish4-vmods/libvmod-timers-4.0/README.rst
new file mode 100644
index 0000000..1e5df4c
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/README.rst
@@ -0,0 +1,237 @@
+============
+vmod_timers
+============
+
+----------------------
+Varnish timers Module
+----------------------
+
+:Author: Jos Boumans
+:Date: 2012-08-22
+:Version: 1.0
+:Manual section: 3
+
+SYNOPSIS
+========
+
+                import timers;
+
+                sub vcl_init {
+                    # Optional, defaults to milliseconds
+                    timers.unit( "microseconds" );
+                }
+
+                sub vcl_deliver {
+                    ### In seconds since the epoch, with 3 decimal points
+                    set resp.http.x-req_start       = timers.req_start();
+                    set resp.http.x-req_end         = timers.req_end();
+
+                    ### As a timestamp. like "Fri, 24 Aug 2012 19:48:03 GMT"
+                    set resp.http.x-req_start_ts    = timers.req_start_as_string();
+                    set resp.http.x-req_end_ts      = timers.req_end_as_string();
+
+                    ### Durations as an int, in your choice of units (see timers.unit)
+                    ### Time from connection accept to delegation to backend
+                    set resp.http.x-req_handle_time     = timers.req_handle_time();
+
+                    ### Time from delegation to backend to first byte from backend
+                    set resp.http.x-req_response_time   = timers.req_response_time();
+                }
+
+
+DESCRIPTION
+===========
+
+Varnish Module (vmod) for accessing various timers from Varnish.
+
+The duration counters are compatible with usage in vmod_statsd (see below).
+
+
+FUNCTIONS
+=========
+
+unit
+----
+
+Prototype::
+
+                unit(STRING S)
+
+Return value
+	NONE
+Description
+    Set the base unit of durations. Your choices are: "seconds", "milliseconds",
+    "microseconds" and "nanoseconds". Best used in vcl_init. Defaults to "milliseconds"
+
+Example::
+
+                timers.unit( "nanoseconds" );
+
+req_start
+---------
+
+Prototype::
+
+                req_start();
+
+Return value
+	REAL
+
+Description
+    Returns the start time of the request, in seconds since the epoch, as a number with 3
+    decimal places.	Can be used in vcl_recv and onwards.
+
+Example::
+
+                # Will set the header to something like: 1345837683.704
+                set resp.http.x-req_start = timers.req_start();
+
+req_end
+-------
+
+Prototype::
+
+                req_end();
+
+Return value
+	REAL
+Description
+    Returns the end time of the request, in seconds since the epoch, as a number with 3
+    decimal places.	Can be used in vcl_deliver and onwards.
+
+Example::
+
+                # Will set the header to something like: 1345837683.704
+                set resp.http.x-req_end = timers.req_end();
+
+req_start_as_string
+-------------------
+
+Prototype::
+
+                req_start_as_string()
+
+Return value
+	STRING
+Description
+	Returns the start time of the request, formatted as an HTTP compatible timestamp.
+	Can be used in vcl_recv and onwards.
+
+Example::
+
+                # Will set the header to something like: Fri, 24 Aug 2012 19:48:03 GMT
+                set resp.http.x-req_start_ts = timers.req_start_as_string();
+
+req_end_as_string
+-----------------
+
+Prototype::
+
+                req_end_as_string()
+
+Return value
+	STRING
+Description
+	Returns the end time of the request, formatted as an HTTP compatible timestamp.
+	Can be used in vcl_deliver and onwards.
+
+Example::
+
+                # Will set the header to something like: Fri, 24 Aug 2012 19:48:03 GMT
+                set resp.http.x-req_end_ts = timers.req_end_as_string();
+
+req_handle_time
+---------------
+
+Prototype::
+
+                req_handle_time()
+
+Return value
+	INT
+Description
+	Return the time it took from the client connection being accepted to the request
+	being handed off to a backend. Note that multiple requests can come in over the
+	same connection, and that the start marker for this is the accepted connection;
+	other requests may have been handled during this time!
+	The unit for this value is determinted by timers.unit and defaults to milliseconds.
+	Can be used in vcl_recv and onwards.
+
+	This duration is compatible with usage in vmod_statsd (see below)
+
+Example::
+
+                # Will set the header to something like: 119
+                set resp.http.x-req_handle_time = timers.req_handle_time();
+
+req_response_time
+-----------------
+
+Prototype::
+
+                req_response_time()
+
+Return value
+	INT
+Description
+	Return the time it took from when the request was handed off to a backend until the
+	first byte was returned from that backend. This is the effectively the server response
+	time.
+	The unit for this value is determinted by timers.unit and defaults to milliseconds.
+	Can be used in vcl_deliver and onwards.
+
+	This duration is compatible with usage in vmod_statsd (see below)
+
+Example::
+
+                # Will set the header to something like: 119
+                set resp.http.x-req_response_time = timers.req_response_time();
+
+
+
+INSTALLATION
+============
+
+If you received this packge without a pre-generated configure script, you must
+have the GNU Autotools installed, and can then run the 'autogen.sh' script. If
+you received this package with a configure script, skip to the second
+command-line under Usage to configure.
+
+Usage::
+
+ # Generate configure script
+ ./autogen.sh
+
+ # Execute configure script
+ ./configure VARNISHSRC=DIR [VMODDIR=DIR]
+
+`VARNISHSRC` is the directory of the Varnish source tree for which to
+compile your vmod. Both the `VARNISHSRC` and `VARNISHSRC/include`
+will be added to the include search paths for your module.
+
+Optionally you can also set the vmod install directory by adding
+`VMODDIR=DIR` (defaults to the pkg-config discovered directory from your
+Varnish installation).
+
+Make targets:
+
+* make - builds the vmod
+* make install - installs your vmod in `VMODDIR`
+* make check - runs the unit tests in ``src/tests/*.vtc``
+
+
+SEE ALSO
+========
+
+* https://github.com/jib/libvmod-statsd
+* https://www.varnish-cache.org
+* http://jiboumans.wordpress.com/2013/02/27/realtime-stats-from-varnish/
+* https://gist.github.com/jib/5034755
+
+COPYRIGHT
+=========
+
+This document is licensed under the same license as the
+libvmod-timers project. See LICENSE for details.
+
+* Copyright (c) 2012 Jos Boumans
diff --git a/varnish4-vmods/libvmod-timers-4.0/autogen.sh b/varnish4-vmods/libvmod-timers-4.0/autogen.sh
new file mode 100755
index 0000000..2e1fb89
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/autogen.sh
@@ -0,0 +1,44 @@
+#!/bin/sh
+
+warn() {
+	echo "WARNING: $@" 1>&2
+}
+
+case `uname -s` in
+Darwin)
+	LIBTOOLIZE=glibtoolize
+	;;
+FreeBSD)
+	LIBTOOLIZE=libtoolize
+	;;
+Linux)
+	LIBTOOLIZE=libtoolize
+	;;
+SunOS)
+	LIBTOOLIZE=libtoolize
+	;;
+*)
+	warn "unrecognized platform:" `uname -s`
+	LIBTOOLIZE=libtoolize
+esac
+
+automake_version=`automake --version | tr ' ' '\n' | egrep '^[0-9]\.[0-9a-z.-]+'`
+if [ -z "$automake_version" ] ; then
+	warn "unable to determine automake version"
+else
+	case $automake_version in
+		0.*|1.[0-8]|1.[0-8][.-]*)
+			warn "automake ($automake_version) detected; 1.9 or newer recommended"
+			;;
+		*)
+			;;
+	esac
+fi
+
+set -ex
+
+$LIBTOOLIZE --copy --force
+aclocal -I m4
+autoheader
+automake --add-missing --copy --foreign
+autoconf
diff --git a/varnish4-vmods/libvmod-timers-4.0/configure.ac b/varnish4-vmods/libvmod-timers-4.0/configure.ac
new file mode 100644
index 0000000..5659612
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/configure.ac
@@ -0,0 +1,60 @@
+AC_PREREQ(2.59)
+AC_COPYRIGHT([Copyright (c) 2011 Varnish Software AS])
+AC_INIT([libvmod-timers], [trunk])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_SRCDIR(src/vmod_timers.vcc)
+AM_CONFIG_HEADER(config.h)
+
+AC_CANONICAL_SYSTEM
+AC_LANG(C)
+
+AM_INIT_AUTOMAKE([foreign])
+
+AC_GNU_SOURCE
+AC_PROG_CC
+AC_PROG_CC_STDC
+if test "x$ac_cv_prog_cc_c99" = xno; then
+	AC_MSG_ERROR([Could not find a C99 compatible compiler])
+fi
+AC_PROG_CPP
+
+AC_PROG_INSTALL
+AC_PROG_LIBTOOL
+AC_PROG_MAKE_SET
+
+# Check for rst utilities
+AC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], "no")
+if test "x$RST2MAN" = "xno"; then
+	AC_MSG_WARN([rst2man not found - not building man pages])
+fi
+AM_CONDITIONAL(HAVE_RST2MAN, [test "x$RST2MAN" != "xno"])
+
+
+#Check for pkg-config
+PKG_PROG_PKG_CONFIG
+
+# Checks for header files.
+AC_HEADER_STDC
+AC_CHECK_HEADERS([sys/stdlib.h])
+
+
+
+# Check for python
+AC_CHECK_PROGS(PYTHON, [python3 python3.1 python3.2 python2.7 python2.6 python2.5 python2 python], [AC_MSG_ERROR([Python is needed to build this vmod, please install python.])])
+
+
+# Varnish include files tree
+VARNISH_VMOD_INCLUDES
+VARNISH_VMOD_DIR
+VARNISH_VMODTOOL
+
+# Check that varnishtest is built in the varnish source directory
+AC_PATH_PROG([VARNISHTEST], [varnishtest])
+AC_PATH_PROG([VARNISHD], [varnishd])
+
+AC_CONFIG_FILES([
+	Makefile
+	src/Makefile
+])
+AC_OUTPUT
+                                  
diff --git a/varnish4-vmods/libvmod-timers-4.0/src/Makefile.am b/varnish4-vmods/libvmod-timers-4.0/src/Makefile.am
new file mode 100644
index 0000000..c5120c0
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/src/Makefile.am
@@ -0,0 +1,28 @@
+AM_CPPFLAGS = @VMOD_INCLUDES@
+
+vmoddir = @VMOD_DIR@
+vmod_LTLIBRARIES = libvmod_timers.la
+
+libvmod_timers_la_LDFLAGS = -module -export-dynamic -avoid-version -shared
+
+libvmod_timers_la_SOURCES = \
+	vcc_if.c \
+	vcc_if.h \
+	vmod_timers.c
+
+vcc_if.c vcc_if.h: @VMODTOOL@ $(top_srcdir)/src/vmod_timers.vcc
+	@VMODTOOL@ $(top_srcdir)/src/vmod_timers.vcc
+
+VMOD_TESTS = tests/*.vtc
+.PHONY: $(VMOD_TESTS)
+
+tests/*.vtc:
+	@VARNISHTEST@ -Dvarnishd=@VARNISHD@ -Dvmod_topbuild=$(abs_top_builddir) $@
+
+check: $(VMOD_TESTS)
+
+EXTRA_DIST = \
+	vmod_timers.vcc \
+	$(VMOD_TESTS)
+
+CLEANFILES = $(builddir)/vcc_if.c $(builddir)/vcc_if.h
diff --git a/varnish4-vmods/libvmod-timers-4.0/src/tests/test01.vtc b/varnish4-vmods/libvmod-timers-4.0/src/tests/test01.vtc
new file mode 100644
index 0000000..2b45424
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/src/tests/test01.vtc
@@ -0,0 +1,113 @@
+varnishtest "Test timers vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+
+# Function INT add(INT,INT)
+# Function INT subtract(INT,INT)
+# Function VOID unit(PRIV_VCL,STRING)
+# Function REAL req_start(PRIV_VCL)
+# Function TIME req_start_as_string(PRIV_VCL)
+# Function REAL req_end(PRIV_VCL)
+# Function TIME req_end_as_string(PRIV_VCL)
+# Function INT req_handle_time(PRIV_VCL)
+# Function INT req_response_time(PRIV_VCL)
+# Function INT req_delivery_time(PRIV_VCL)
+
+#    12 VCL_Log      c d req_start 1345837683.704
+#    12 VCL_Log      c d req_start_as_string Fri, 24 Aug 2012 19:48:03 GMT
+#    12 VCL_Log      c d req_end 1345837683.704
+#    12 VCL_Log      c d req_end_as_string Fri, 24 Aug 2012 19:48:03 GMT
+#    12 VCL_Log      c d req_handle_time 108718
+#    12 VCL_Log      c d req_response_time 1434326
+#    12 VCL_Log      c d req_delivery_time -1
+
+varnish v1 -vcl+backend {
+    import timers from "${vmod_topbuild}/src/.libs/libvmod_timers.so";
+
+    sub vcl_init {
+        ### so there's something to see, since there's no actual backend
+        timers.unit( "nanoseconds" );
+    }
+
+    ### XXX there isn't regex support to check the answers, so resort to
+    ### setting flags in vcl deliver :(
+    sub vcl_deliver {
+
+        ######################
+        ### utility functions
+        ######################
+
+        set resp.http.add       = timers.add( 1, 1 );
+        set resp.http.subtract  = timers.subtract( 4, 2 );
+
+        ######################
+        ### Timestamps
+        ######################
+
+        if( timers.req_start() > 0 ) {
+            set resp.http.req_start = 1;
+        }
+
+        ### XXX needs a temporary variable
+        set resp.http.x-req-start = timers.req_start_as_string();
+        if( resp.http.x-req-start ~ "GMT" ) {
+            set resp.http.req_start_as_string = 1;
+        }
+
+        if( timers.req_end() > 0 ) {
+            set resp.http.req_end = 1;
+        }
+
+        ### XXX needs a temporary variable
+        set resp.http.x-req-end = timers.req_end_as_string();
+        if( resp.http.x-req-end ~ "GMT" ) {
+            set resp.http.req_end_as_string = 1;
+        }
+
+        ######################
+        ### Durations
+        ######################
+
+        if( timers.req_handle_time() > 0 ) {
+            set resp.http.req_handle_time = 1;
+        }
+
+        if( timers.req_response_time() > 0 ) {
+            set resp.http.req_response_time = 1;
+        }
+
+        ### XXX vcl_deliver is called before the request is finished (obviously)
+        ### so delivery time will be -1. Until there's a later stage vcl that gets
+        ### called after delivery is completed, we can't expect a valid value here.
+        if( timers.req_delivery_time() < 0 ) {
+            set resp.http.req_delivery_time = 1;
+        }
+    }
+
+} -start
+
+client c1 {
+    txreq -url "/"
+    rxresp
+
+    ### utility functions
+    expect resp.http.add        == 2
+    expect resp.http.subtract   == 2
+
+    ### timestamps
+    expect resp.http.req_start              == 1
+    expect resp.http.req_start_as_string    == 1
+    expect resp.http.req_end                == 1
+    expect resp.http.req_end_as_string      == 1
+
+    ### durations
+    expect resp.http.req_handle_time        == 1
+    expect resp.http.req_response_time      == 1
+    expect resp.http.req_delivery_time      == 1
+}
+
+client c1 -run
diff --git a/varnish4-vmods/libvmod-timers-4.0/src/vmod_timers.c b/varnish4-vmods/libvmod-timers-4.0/src/vmod_timers.c
new file mode 100644
index 0000000..e910717
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/src/vmod_timers.c
@@ -0,0 +1,243 @@
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+
+#include "vrt.h"
+#include "cache/cache.h"
+
+#include "vcc_if.h"
+
+#define DEBUG 1
+
+#ifdef DEBUG                    // To print diagnostics to the error log
+#define _DEBUG 1                // enable through gcc -DDEBUG
+#else
+#define _DEBUG 0
+#endif
+
+#if 0
+#define NOW (ctx->now)
+#else
+
+double VTIM_real(void);
+#define NOW VTIM_real()
+
+#endif
+
+/*  XXX This is all true for varnish 3.0.3 - the varnish 3 BRANCH is already structured,
+    differently. Ectx->req->specially the session struct has changed, with more data moving into
+    the request struct instead :(
+
+    //*************************
+    //  ReqEnd explained
+    //*************************
+
+    From: https://www.varnish-cache.org/trac/wiki/Varnishlog
+
+    Typically, this looks like
+
+      830 ReqEnd c 877345549 1233949945.075706005 1233949945.075754881 0.017112017 0.000022888 0.000025988
+
+    The first number (877345549) is the XID, which you'll find in the X-Varnish header
+    sent to the client.
+
+    The second number (1233949945.075706005) is the time when we start processing a
+    request. It is decimal seconds since epoch.
+
+    The third number (1233949945.075754881) is the time when the request is completed. It
+    is decimal seconds since epoch.
+
+    The fourth number (0.017112017) is the time elapsed between the session actually being
+    accept(2)-ed and the start of request processing for this request. Keep in mind that
+    sessions are only accept()ed once, so this is time from the initial request was
+    accepted until the current request begun processing (in other words: other requests
+    from the same client/session could have been processed in the meanwhile).
+
+    The fifth number (0.000022888) is the time elapsed from the start of the request
+    processing until we start delivering the object to the client. For all practical
+    purposes, this number is the backend rectx->req->sponse time.
+
+    The sixth and last number (0.000025988) is the time from we start delivering the
+    object until the request completes.
+
+    //*************************
+    //  ReqEnd Code
+    //*************************
+
+    From varnish-3.0.3:./bin/varnishd/cache_center.c:348
+
+    dp = ctx->req->sp->t_rectx->req->sp - ctx->req->sp->t_req;
+    da = ctx->req->sp->t_end - ctx->req->sp->t_rectx->req->sp;
+    dh = ctx->req->sp->t_req - ctx->req->sp->t_open;
+
+    WSL(ctx->req->sp->wrk, SLT_ReqEnd, ctx->req->sp->id, "%u %.9f %.9f %.9f %.9f %.9f",
+        ctx->req->sp->xid, ctx->req->sp->t_req, ctx->req->sp->t_end, dh, dp, da);
+
+    The session struct is documented in: varnish-3.0.3:./bin/varnishd/cache.h:524
+    Important parts:
+
+        // HTTP request
+        struct http             *http;
+
+        // Timestamps, all on TIM_real() timescale
+        double                  t_open;
+        double                  t_req;
+        double                  t_rectx->req->sp;
+        double                  t_end;
+
+*/
+
+// ************************
+// Initialization functions
+// ************************
+
+
+typedef struct timersConfig {
+	int multiplier;             // To go from seconds -> milli, micro or nanoseconds
+} config_t;
+
+int
+init_function(struct vmod_priv *priv, const struct VCL_conf *conf)
+{
+    config_t *cfg;
+    cfg             = malloc(sizeof(config_t));
+    cfg->multiplier = 1000;     // default to milliseconds
+
+    priv->priv      = cfg;
+
+	return (0);
+}
+
+// **********************
+// Config functions
+// **********************
+
+// Set the multiplication factor
+void
+vmod_unit( const struct vrt_ctx *ctx, struct vmod_priv *priv, const char *unit ) {
+    config_t *cfg   = priv->priv;
+
+    cfg->multiplier =
+        strcasecmp( unit, "seconds"      ) == 0 ? 1                     :
+        strcasecmp( unit, "milliseconds" ) == 0 ? 1000                  :
+        strcasecmp( unit, "microseconds" ) == 0 ? 1000 * 1000           :
+        strcasecmp( unit, "nanoseconds"  ) == 0 ? 1000 * 1000 * 1000    :
+        1000;   // default back to milliseconds if you gave us garbage.
+}
+
+// **********************
+// Utility functions
+// **********************
+
+// VCL doesn't let you do math - simple addition function
+VCL_INT
+vmod_add( const struct vrt_ctx *ctx, VCL_INT i, VCL_INT j ) {
+    return i + j;
+}
+
+// VCL doesn't let you do math - simple subtraction function
+VCL_INT
+vmod_subtract( const struct vrt_ctx *ctx, VCL_INT i, VCL_INT j ) {
+    return i - j;
+}
+
+// **********************
+// Start/End functions
+// **********************
+
+// Timestamp of when the request started
+VCL_REAL
+vmod_req_start( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
+    return (double) ctx->req->t_req;
+}
+
+// Timestamp of when the request started as a string representation.
+// Varnish will represent the result differently by the type we use in the .vcc
+VCL_REAL vmod_req_start_as_string() __attribute__((alias("vmod_req_start")));
+
+
+// Timestamp of when the request finished
+VCL_REAL
+vmod_req_end( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
+    config_t *cfg   = priv->priv;
+
+    return (double) ctx->req->sp->t_idle;
+}
+
+// Timestamp of when the request started as a string representation.
+// Varnish will represent the result differently by the type we use in the .vcc
+double vmod_req_end_as_string() __attribute__((alias("vmod_req_end")));
+
+
+// **********************
+// Duration functions
+// **********************
+
+// Duration of Accept -> Sent to backend.
+VCL_INT
+vmod_req_handle_time( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
+    config_t *cfg   = priv->priv;
+
+    if (isnan(ctx->req->t_req) || isnan(ctx->req->t_first))
+        return -1;
+
+    return (int) ((ctx->req->t_req - ctx->req->sp->t_open) * cfg->multiplier);
+}
+
+// Duration of Sent to Backend -> First byte.
+VCL_INT
+vmod_req_response_time( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
+    config_t *cfg   = priv->priv;
+
+    // The response may not have been sent yet (say you're calling this
+    // from vcl_recv) - Return -1 in that case.
+    if (isnan(ctx->req->t_req))
+        return -1;
+
+    return (int) ((ctx->now - ctx->req->t_req) * cfg->multiplier);
+}
+
+// Duration of Request headers received -> now.
+VCL_INT
+vmod_req_processing_time( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
+    config_t *cfg   = priv->priv;
+
+    // The response may not have been sent yet (say you're calling this
+    // from vcl_recv) - Return -1 in that case.
+    if (isnan(ctx->req->t_first))
+        return -1;
+
+    return (int) ((NOW - ctx->req->t_first) * cfg->multiplier);
+}
+
+// Duration of Request headers received -> now.
+VCL_REAL
+vmod_req_processing_time_real( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
+    config_t *cfg   = priv->priv;
+
+    // The response may not have been sent yet (say you're calling this
+    // from vcl_recv) - Return -1 in that case.
+    if (isnan(ctx->req->t_first))
+        return -1;
+
+    return NOW - ctx->req->t_first;
+}
+
+// Duration of First byte -> Last byte
+// XXX since 'vcl_deliver' is the last point of entry for user facing code at
+// the moment, the request will never be 'done' in the vcl users can access,
+// meaning this will always return -1. I'm leaving it here for completeness
+// sake, and it may become useful if there appears a vcl hook for after last
+// byte.
+VCL_INT
+vmod_req_delivery_time( const struct vrt_ctx *ctx, struct vmod_priv *priv ) {
+    config_t *cfg   = priv->priv;
+
+    // The response may not have been sent yet (say you're calling this
+    // from vcl_recv) - Return -1 in that case.
+    if (isnan(ctx->req->t_prev) || isnan(ctx->req->sp->t_idle))
+        return -1;
+
+    int rv = (int) ((ctx->req->sp->t_idle - ctx->req->t_prev) * cfg->multiplier);
+    return rv >= 0 ? rv : -1;
+}
diff --git a/varnish4-vmods/libvmod-timers-4.0/src/vmod_timers.vcc b/varnish4-vmods/libvmod-timers-4.0/src/vmod_timers.vcc
new file mode 100644
index 0000000..15ecd7c
--- /dev/null
+++ b/varnish4-vmods/libvmod-timers-4.0/src/vmod_timers.vcc
@@ -0,0 +1,14 @@
+$Module timers 3 Varnish timers Module
+$Init init_function
+$Function INT add(INT,INT)
+$Function INT subtract(INT,INT)
+$Function VOID unit(PRIV_VCL,STRING)
+$Function REAL req_start(PRIV_VCL)
+$Function TIME req_start_as_string(PRIV_VCL)
+$Function REAL req_end(PRIV_VCL)
+$Function TIME req_end_as_string(PRIV_VCL)
+$Function INT req_handle_time(PRIV_VCL)
+$Function INT req_response_time(PRIV_VCL)
+$Function INT req_processing_time(PRIV_VCL)
+$Function REAL req_processing_time_real(PRIV_VCL)
+$Function INT req_delivery_time(PRIV_VCL)
-- 
2.7.4

