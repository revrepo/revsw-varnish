This VMOD implements basic variable in VCL. Well. It's more of an
association list with support for strings, ints and reals.

There are methods to get and set each type.

Global variables have a lifespan that extends across requests and
VCLs, for as long as the vmod is loaded. Non-globals are local to a
single request.

Prototype, most should be self-explaining:

Function VOID set(STRING, STRING)
Function STRING get(STRING)

Function VOID global_set(STRING, STRING)
Function STRING global_get(STRING)

Function VOID set_int(STRING, INT)
Function INT get_int(STRING)

Function VOID set_string(STRING, STRING)
Function STRING get_string(STRING)

Function VOID set_real(STRING, REAL)
Function REAL get_real(STRING)

Function VOID set_duration(STRING, DURATION)
Function DURATION get_duration(STRING)

Function VOID set_ip(STRING, IP)
Function IP get_ip(STRING)

Function VOID clear()

clear() clears the whole non-global variable space.

VARNISH 4.0 LIMITATIONS:
    - This VMOD is currently NOT available in the following Varnish 4.0 VCL
    methods: vcl_backend_fetch, vcl_backend_response and vcl_backend_error.
    For explanation and workaround see github issue #5.

    - Local variables set using this VMOD will be reset when crossing a request
    boundary, but also when restarting a request. This is the default behavior
    in Varnish 4.0. Function disable_implicit_clears() is provided in order
    disable implicit clears of the var space. This allows mimicking in Varnish
    4.0 the default behavior in older and newer versions of Varnish (i.e.
    cleaning the var space when crossing a request boundary but not during
    restarts). When enabling this the var space must be manually cleared in VCL
    (i.e. var.clear()) during the initial request (i.e. vcl_recv when
    req.restarts == 0) before doing any get or set operation. Otherwise crashes
    are expected. For additional details see github issue #12.
