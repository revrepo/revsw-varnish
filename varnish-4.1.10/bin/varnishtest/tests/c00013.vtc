varnishtest "Test parking second request on backend delay (waitinglist)"

server s1 {
	rxreq
	expect req.url == "/foo"
	send "HTTP/1.0 200 OK\r\nConnection: close\r\n\r\n"
	delay .2
	sema r1 sync 2
	delay .2
	send "line1\n"
	delay .2
	sema r1 sync 2
	send "line2\n"
} -start

varnish v1 -vcl+backend {
	sub vcl_backend_response {
		set beresp.do_stream = false;
	}
} -start

varnish v1 -cliok "param.set debug +syncvsl"

client c1 {
	txreq -url "/foo" -hdr "client: c1"
	rxresp
	expect resp.status == 200
	expect resp.bodylen == 12
	expect resp.http.x-varnish == "1001"
} -start

sema r1 sync 2

client c2 {
	txreq -url "/foo" -hdr "client: c2"
	delay .2
	sema r1 sync 2
	rxresp
	expect resp.status == 200
	expect resp.bodylen == 12
	expect resp.http.x-varnish == "1004 1002"
} -run

client c1 -wait

varnish v1 -expect busy_sleep == 1
varnish v1 -expect busy_wakeup == 1

##################################################
# Now try again where getting a thread fails

barrier b3 cond 2
barrier b4 cond 2

server s3 {
	rxreq
	expect req.url == "/foo"
	send "HTTP/1.0 200 OK\r\nConnection: close\r\n\r\n"
	delay .2
	barrier b3 sync
	delay .2
	send "line1\n"
	delay .2
	barrier b4 sync
	send "line2\n"
} -start

varnish v3 -vcl+backend {
	sub vcl_backend_fetch {
		set bereq.backend = s3;
	}
	sub vcl_backend_response {
		set beresp.do_stream = false;
	}
} -start

varnish v3 -cliok "param.set debug +failresched"

varnish v3 -cliok "param.set debug +syncvsl"

client c3 -connect ${v3_sock} {
	txreq -url "/foo" -hdr "client: c3"
	rxresp
	expect resp.status == 200
	expect resp.bodylen == 12
	expect resp.http.x-varnish == "1001"
} -start

barrier b3 sync

client c4 -connect ${v3_sock} {
	txreq -url "/foo" -hdr "client: c4"
	delay .2
	barrier b4 sync
	expect_close
} -run

client c3 -wait

varnish v1 -vsl_catchup
varnish v3 -expect busy_sleep >= 1
varnish v3 -expect busy_wakeup == 0
varnish v3 -expect busy_killed == 1
varnish v3 -expect sc_overload == 1
